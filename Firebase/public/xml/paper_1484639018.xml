<paper id="1484639018"><title>Program Result Checking: A New Approach to Making Programs More Reliable</title><year>1993</year><authors><author org="University of California at Berkeley" id="2163096604">Manuel Blum</author></authors><n_citation>21</n_citation><doc_type>Conference</doc_type><references><reference>174553187</reference><reference>1506921193</reference><reference>1594962164</reference><reference>1596412683</reference><reference>1596720500</reference><reference>2002032317</reference><reference>2033361557</reference><reference>2062965695</reference><reference>2064968474</reference><reference>2097206148</reference><reference>2115236294</reference><reference>2127350845</reference><reference>2134839489</reference><reference>2138904733</reference><reference>2293988196</reference></references><venue id="1141821850" type="C">International Colloquium on Automata, Languages and Programming</venue><doi>10.1007/3-540-56939-1_57</doi><keywords><keyword weight="0.0">Software fault</keyword><keyword weight="0.42521">Discrete mathematics</keyword><keyword weight="0.47078">Programming language</keyword><keyword weight="0.48664">Graph isomorphism</keyword><keyword weight="0.44634">Hamiltonian path</keyword><keyword weight="0.47858">Computer science</keyword><keyword weight="0.53352">Software</keyword><keyword weight="0.45425">Distributed computing</keyword><keyword weight="0.46763">Computation</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Program result checking is concerned with designing programs to check their work. For example, after solving an equation for x, a result-checking program would substitute x back into the equation to make sure that the answer obtained is correct. There are many ways to check results, but there has been no theory to say what constitutes a good check. It is not a good check, for example, to redo a computation without change a second time. Such recomputation may uncover an intermittent hardware fault, but it will not uncover a software fault, and the discovery and elimination of software faults is the principal goal of this work. This talk discusses the concept of result checking, gives several examples, and outlines the basic theory.</abstract></paper>
<paper id="1966493164"><title>Long term file migration: development and evaluation of algorithms</title><year>1981</year><authors><author org="Univ of California, Berkeley, Berkeley#TAB#" id="2585487612">Alan Jay Smith</author></authors><n_citation>83</n_citation><doc_type>Journal</doc_type><references><reference>1487184349</reference><reference>1999966594</reference><reference>2014796038</reference><reference>2035002121</reference><reference>2036569672</reference><reference>2043213682</reference><reference>2045062701</reference><reference>2054702681</reference><reference>2055013718</reference><reference>2058119919</reference><reference>2059368477</reference><reference>2061901770</reference><reference>2071051471</reference><reference>2092087712</reference><reference>2142098074</reference><reference>2164705534</reference></references><venue id="103482838" type="J">Communications of The ACM</venue><doi>10.1145/358722.358737</doi><keywords><keyword weight="0.6651">Stub file</keyword><keyword weight="0.4604">Computer science</keyword><keyword weight="0.45795">Parallel computing</keyword><keyword weight="0.64258">Device file</keyword><keyword weight="0.45735">Algorithm</keyword><keyword weight="0.71695">File size</keyword><keyword weight="0.67549">Versioning file system</keyword><keyword weight="0.65988">Unix file types</keyword><keyword weight="0.6659">Indexed file</keyword><keyword weight="0.68183">File system fragmentation</keyword><keyword weight="0.69812">Computer file</keyword></keywords><publisher>ACM</publisher><abstract>The steady increase in the power and complexity of modern computer systems has encouraged the implementation of automatic file migration systems which move files dynamically between mass storage devices and disk in response to user reference patterns. Using information describing 13 months of user disk data set file references, we develop and evaluate (replacement) algorithms for the selection of files to be moved from disk to mass storage. Our approach is general and demonstrates a general methodology for this type of problem. We find that algorithms based on both the file size and the time since the file was last used work well. The best realizable algorithms tested condition on the empirical distribution of the times between file references. Acceptable results are also obtained by selecting for replacement that file whose size times time to most recent reference is maximal. Comparisons are made with a number of standard algorithms developed for paging, such as Working Set, VMIN, and GOPT. Sufficient information (parameter values, fitted equations) is provided so that our algorithms may be easily implemented on other systems.</abstract></paper>
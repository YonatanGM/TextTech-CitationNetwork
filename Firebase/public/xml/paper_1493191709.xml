<paper id="1493191709"><title>Reasoning About Pipelines with Structural Hazards</title><year>1994</year><authors><author org="Cornell University;" id="2304720301">Mark Aagaard</author><author org="Cornell University;" id="988563514">Miriam Leeser</author></authors><n_citation>16</n_citation><doc_type /><references><reference>23915378</reference><reference>1540891592</reference><reference>1543469746</reference><reference>1596337553</reference><reference>1741528175</reference><reference>2011889923</reference><reference>2095572512</reference><reference>2098377846</reference><reference>2119629105</reference><reference>2126676817</reference><reference>2132635145</reference><reference>2163852930</reference></references><venue id="" type="">TPCD '94 Proceedings of the Second International Conference on Theorem Provers in Circuit Design - Theory, Practice and Experience</venue><doi>10.1007/3-540-59047-1_40</doi><keywords><keyword weight="0.48777">Pipeline (computing)</keyword><keyword weight="0.53147">Datapath</keyword><keyword weight="0.42165">Pipeline transport</keyword><keyword weight="0.46352">Programming language</keyword><keyword weight="0.46294">Computer science</keyword><keyword weight="0.66363">Correctness</keyword><keyword weight="0.4601">Theoretical computer science</keyword><keyword weight="0.0">Formal description</keyword><keyword weight="0.50455">Input/output</keyword><keyword weight="0.45791">Database transaction</keyword><keyword weight="0.57011">Functional specification</keyword></keywords><publisher>Springer Berlin Heidelberg</publisher><abstract>We have developed a formal definition of correctness for pipelines that ensures that transactions terminate and satisfy a functional specification. This definition separates the correctness criteria associated with the pipelining aspects of a design from the functional relationship between input and output transactions. Using this definition, we developed and formally verified a technique that divides the verification of a pipeline into two separate tasks: proving that the pipelining circuitry meets the pipelining correctness criteria and that the datapath and control circuitry meet the functional specification. The first proof is data independent (except for pipelines that use data-dependent control). The second proof is purely combinational: there is no notion of time and each possible input transaction can be dealt with independently. In addition, we have created a framework that structures and simplifies the proof of the pipelining circuitry.</abstract></paper>
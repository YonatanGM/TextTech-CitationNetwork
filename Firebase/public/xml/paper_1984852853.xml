<paper id="1984852853"><title>Constrained expressions: toward broad applicability of analysis methods for distributed software systems</title><year>1988</year><authors><author org="University of California, Santa, Barbara" id="2130002691">Laura K. Dillon</author><author org="University of Massachusetts-Amherst" id="11791032">George S. Avrunin</author><author org="University of Massachusetts-Amherst" id="253426647">Jack C. Wileden</author></authors><n_citation>25</n_citation><doc_type>Journal</doc_type><references><reference>192046056</reference><reference>1546981056</reference><reference>1984909114</reference><reference>2003716256</reference><reference>2006244393</reference><reference>2006648494</reference><reference>2031561037</reference><reference>2035845010</reference><reference>2038952689</reference><reference>2040068897</reference><reference>2043683472</reference><reference>2056386379</reference><reference>2074578336</reference><reference>2100021838</reference><reference>2110425399</reference><reference>2153580110</reference><reference>2171419179</reference><reference>2611742346</reference></references><venue id="41449414" type="J">ACM Transactions on Programming Languages and Systems</venue><doi>10.1145/44501.44502</doi><keywords><keyword weight="0.46515">Informal logic</keyword><keyword weight="0.46812">Notation</keyword><keyword weight="0.0">Formal reasoning</keyword><keyword weight="0.47525">Programming language</keyword><keyword weight="0.55685">Petri net</keyword><keyword weight="0.50355">Expression (mathematics)</keyword><keyword weight="0.0">Distributed software systems</keyword><keyword weight="0.46975">Computer science</keyword><keyword weight="0.46737">Theoretical computer science</keyword><keyword weight="0.47935">Formalism (philosophy)</keyword><keyword weight="0.61707">Software development</keyword></keywords><publisher>ACM</publisher><abstract>It is extremely difficult to characterize the possible behaviors of a distributed software system through informal reasoning. Developers of distributed systems require tools that support formal reasoning about properties of the behaviors of their systems. These tools should be applicable to designs and other preimplementation descriptions of a system, as well as to completed programs. Furthermore, they should not limit a developeru0027s choice of development languages. In this paper we present a basis for broadly applicable analysis methods for distributed software systems. The constrained expression formalism can be used with a wide variety of distributed system development notations to give a uniform closed-form representation of a systemu0027s behavior. A collection of formal analysis techniques can then be applied with this representation to establish properties of the system. Examples of these formal analysis techniques appear elsewhere. Here we illustrate the broad applicability of the constrained expression formalism by showing how constrained expression representations are obtained from descriptions of systems in three different notations: SDYMOL, CSP, and Petri nets. Features of these three notations span most of the significant alternatives for describing distributed software systems. Our examples thus offer persuasive evidence for the broad applicability of the constrained expression approach.</abstract></paper>
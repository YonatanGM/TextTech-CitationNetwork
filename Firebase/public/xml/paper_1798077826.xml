<paper id="1798077826"><title>Breaking abstractions and unstructuring data structures</title><year>1998</year><authors><author org="Department of Computer Science, Auckland University, New Zealand" id="321147201">C. Collberg</author><author org="University of Auckland; ." id="2239754346">C. Thomborson</author><author org="University of Auckland; ." id="2170666093">D. Low</author></authors><n_citation>155</n_citation><doc_type>Conference</doc_type><references><reference>1528438050</reference><reference>1644882639</reference><reference>1964962870</reference><reference>2025043404</reference><reference>2031246684</reference><reference>2055794506</reference><reference>2061422483</reference><reference>2062414112</reference><reference>2069355638</reference><reference>2126851641</reference><reference>2134312016</reference><reference>2158864412</reference><reference>2170352783</reference></references><venue id="1140657324" type="C">International Conference on Computational Logistics</venue><doi>10.1109/ICCL.1998.674154</doi><keywords><keyword weight="0.51922">Data structure</keyword><keyword weight="0.46794">Programming language</keyword><keyword weight="0.50022">Object-oriented programming</keyword><keyword weight="0.55519">Source code</keyword><keyword weight="0.4598">Computer science</keyword><keyword weight="0.49284">Reverse engineering</keyword><keyword weight="0.49582">Control flow</keyword><keyword weight="0.45645">Theoretical computer science</keyword><keyword weight="0.50215">Data type</keyword><keyword weight="0.58914">Obfuscation (software)</keyword><keyword weight="0.50918">Obfuscation</keyword></keywords><publisher>IEEE</publisher><abstract>To ensure platform independence, mobile programs are distributed in forms that are isomorphic to the original source code. Such codes are easy to decompile, and hence they increase the risk of malicious reverse engineering attacks. Code obfuscation is one of several techniques which has been proposed to alleviate this situation. An obfuscator is a tool which-through the application of code transformations-converts a program into an equivalent one that is more difficult to reverse engineer. In a previous paper (Collberg et al., 1998) we have described the design of a control flow obfuscator for Java. In this paper we extend the design with transformations that obfuscate data structures and abstractions. In particular we show how to obfuscate classes, arrays, procedural abstractions and built-in data types like strings, integers and booleans.</abstract></paper>
<paper id="1569966513"><title>Towards an intermediate language based on graph rewriting</title><year>1987</year><authors><author org="University of Nijmegen" id="2055959026">H P Barendregt</author><author org="University of Nijmegen" id="2950536406">M C J D Eekelen</author><author org="University of East Anglia" id="2054352611">J R W Glauert</author><author org="University of East Anglia" id="1999130292">J R Kennaway</author><author org="University of Nijmegen" id="2046925394">M J Plasmeijer</author><author org="University of East Anglia" id="2139573819">M R Sleep</author></authors><n_citation>42</n_citation><doc_type>Conference</doc_type><references><reference>1480729609</reference><reference>2022014483</reference><reference>2093853627</reference><reference>2179386815</reference></references><venue id="2754330098" type="C">International Conference on Parallel Architectures and Languages Europe</venue><doi>10.1007/3-540-17945-3_9</doi><keywords><keyword weight="0.46929">Programming language</keyword><keyword weight="0.53696">Functional programming</keyword><keyword weight="0.4461">Computer science</keyword><keyword weight="0.47673">Canonical form</keyword><keyword weight="0.593">Confluence</keyword><keyword weight="0.74215">Graph rewriting</keyword><keyword weight="0.61191">Rewriting</keyword><keyword weight="0.68193">Abstract semantic graph</keyword><keyword weight="0.57254">Graph reduction</keyword><keyword weight="0.41326">Computation</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Lean is an experimental language for specifying computations in terms of graph rewriting. It is based on an alternative to Term Rewriting Systems (TRS) in which the terms are replaced by graphs. Such a Graph Rewriting System (GRS) consists of a set of graph rewrite rules which specify how a graph may be rewritten. Besides supporting functional programming, Lean also describes imperative constructs and allows the manipulation of cyclic graphs. Programs may exhibit non-determinism as well as parallelism. In particular, Lean can serve as an intermediate language between declarative languages and machine architectures, both sequential and parallel.</abstract></paper>
<paper id="1965695377"><title>Extending object-oriented systems with roles</title><year>1996</year><authors><author org="Vienna University of Technology, Vienna Austria" id="1873538321">Georg Gottlob</author><author org="Univ. of Linz, Linz, Austria" id="2242930301">Michael Schrefl</author><author org="Univ. of Linz, Linz, Austria" id="2227130659">Brigitte RÃ¶ck</author></authors><n_citation>312</n_citation><doc_type>Journal</doc_type><references><reference>1565924171</reference><reference>1590607611</reference><reference>1705152440</reference><reference>1770006921</reference><reference>1977647614</reference><reference>2029344921</reference><reference>2055989415</reference><reference>2095436501</reference><reference>2126895750</reference><reference>2135490787</reference><reference>2137116823</reference><reference>2169842681</reference><reference>2215315499</reference><reference>2294346714</reference></references><venue id="87067389" type="J">ACM Transactions on Information Systems</venue><doi>10.1145/230538.230540</doi><keywords><keyword weight="0.61562">Class-based programming</keyword><keyword weight="0.46939">Multimedia database</keyword><keyword weight="0.44463">Programming language</keyword><keyword weight="0.57134">Object-oriented programming</keyword><keyword weight="0.56387">Method</keyword><keyword weight="0.44428">Computer science</keyword><keyword weight="0.55994">Smalltalk</keyword><keyword weight="0.44455">Theoretical computer science</keyword><keyword weight="0.40508">Porting</keyword><keyword weight="0.47366">Hierarchy</keyword><keyword weight="0.48039">Semantics</keyword></keywords><publisher>ACM</publisher><abstract>In many class-based object-oriented systems the association between as instance and a class is exclusive and permanent. Therefore these systems have serious difficulties in representing objects taking on different roles over time. Such objects must be reclassified any time they evolve (e.g., if a person becomes a student and later an employee). Class hierarchies must be planned carefully and may grow exponentially if entities may take on serveral independent roles. The problem is even more servere for object-oriented databases than for common object-oriented programming. Databases store objects over longer periods, during which the represented entities evolve. This article shows how class-based object-oriented systems can be extended to handle evolving objects well. Class hierarchies are complemented by role hierarchies, whose nodes represent role types an object classified in the root may take on. At any point in time, an entity is represented by an instance of the root and an instance of every role type whose role it currently plays. In a natural way, the approach extends traditional object-oriented concepts, such as classification, object identity, specialization, inheritance, and polymorphism in a natural way. The practicability of the approach is demonstrated by an implementation in Smalltalk. Smalltalk was chosen because it is widely known, which is not true for any particular class-based object-oriented database programming language. Roles can be provided in Smalltalk by adding a few classes. There is no need to modify the semantics of Smalltalk itself. Role hierarchies are mapped transparently onto ordinary classes. The presented implementation can easily be ported to object-oriented database programming languages based on Smalltalk, such as Gemstoneu0027s OPAL hierarchies are complemented by role hierarchies, whose nodes represent role types an object classified in the root may take on. At any point in time, an entity is represented by an instance of the root and an instance of every role type whose role in currently plays.</abstract></paper>
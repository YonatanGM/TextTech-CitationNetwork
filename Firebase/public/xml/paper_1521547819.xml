<paper id="1521547819"><title>Generative Programming (GP) with C</title><year>1997</year><authors><author org="Fachhochschule Heidelberg" id="2679358126">Ulrich W. Eisenecker</author></authors><n_citation>23</n_citation><doc_type /><references><reference>1868410565</reference><reference>2023546887</reference><reference>2052890401</reference><reference>2109411754</reference></references><venue id="" type="">JMLC '97 Proceedings of the Joint Modular Languages Conference on Modular Programming Languages</venue><doi>10.1007/3-540-62599-2_51</doi><keywords><keyword weight="0.56624">Functional logic programming</keyword><keyword weight="0.5645">Procedural programming</keyword><keyword weight="0.4662">Programming language</keyword><keyword weight="0.55554">Object-oriented programming</keyword><keyword weight="0.58437">Programming paradigm</keyword><keyword weight="0.44355">Computer science</keyword><keyword weight="0.55613">Inductive programming</keyword><keyword weight="0.44623">Theoretical computer science</keyword><keyword weight="0.56618">Protocol (object-oriented programming)</keyword><keyword weight="0.56122">Reactive programming</keyword><keyword weight="0.56555">Declarative programming</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>This paper gives a brief summary of generative programming (GP) and its main principles. To investigate GP and for implementing generators usually new languages are developed and deployed in research. But it seems not to be imperative to base work on new languages. Therefore the qualification of the multiparadigm language C++ will be examined. The effectiveness of C++ for GP as well as basic idioms and techniques are explored in more detail. This includes statically and dynamically configured systems, migrating from generic to generative programming, compositional use of templates, delaying code injection in statically configured systems, controlling virtualization of functions, interface extension and adding properties by inheriting from template parameters, and expressing constraints for template parameters of related classes.</abstract></paper>
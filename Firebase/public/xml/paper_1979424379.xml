<paper id="1979424379"><title>Practical CTL* model checking: Should SPIN be extended?</title><year>2000</year><authors><author org="RIACS, NASA Ames Research Center, Mountain View, CA, USA; E-mail: wvisser@ptolemy.arc.nasa.gov, US" id="2610259858">Willem Visser</author><author org="Department of Computer Science, University of Manchester, Manchester, UK; E-mail: howard@cs.man.ac.uk, UK" id="2155306770">Howard Barringer</author></authors><n_citation>25</n_citation><doc_type>Journal</doc_type><references><reference>1501731334</reference><reference>1593428110</reference><reference>1607782211</reference><reference>1640973035</reference><reference>1813719546</reference><reference>1875868519</reference><reference>1969912861</reference><reference>1977553951</reference><reference>1988808695</reference><reference>1990609140</reference><reference>2012935476</reference><reference>2023808162</reference><reference>2033071128</reference><reference>2067441543</reference><reference>2102548669</reference><reference>2118382442</reference><reference>2152700389</reference></references><venue id="122567160" type="J">International Journal on Software Tools for Technology Transfer</venue><doi>10.1007/s100090050042</doi><keywords><keyword weight="0.52495">Kripke structure</keyword><keyword weight="0.43858">Discrete mathematics</keyword><keyword weight="0.58113">Automata theory</keyword><keyword weight="0.50903">Model checking</keyword><keyword weight="0.57145">Mobile automaton</keyword><keyword weight="0.55317">Nondeterministic algorithm</keyword><keyword weight="0.40438">Computer science</keyword><keyword weight="0.48334">Automaton</keyword><keyword weight="0.42278">Algorithm</keyword><keyword weight="0.43047">Theoretical computer science</keyword><keyword weight="0.60628">Timed automaton</keyword><keyword weight="0.60706">BÃ¼chi automaton</keyword></keywords><publisher>Springer Nature</publisher><abstract>We describe an efficient CTL* model checking algorithm based on alternating automata and games. A CTL* formula, expressing a correctness property, is first translated to a hesitant alternating automaton and then composed with a Kripke structure representing the model to be checked, after which this resulting automaton is then checked for nonemptiness. We introduce the nonemptiness game that checks the nonemptiness of a hesitant alternating automaton (HAA). In the same way that alternating automata generalise nondeterministic automata, we show that this game for checking the nonemptiness of HAA, generalises the nested depth-first algorithm used to check the nonemptiness of nondeterministic Buchi automata (used in Spin).</abstract></paper>
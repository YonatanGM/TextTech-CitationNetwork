<paper id="1508398345"><title>Data construction with recursive set expressions</title><year>1990</year><authors><author org="University of Vienna" id="1979563096">Johann Eder</author><author org="University of Hamburg," id="2477367212">Andreas Rudloff</author><author org="University of Hamburg," id="2030828791">Florian Matthes</author><author org="University of Hamburg," id="2984633189">Joachim W. Schmidt</author></authors><n_citation>5</n_citation><doc_type /><references><reference>75064631</reference><reference>1494051470</reference><reference>1540708579</reference><reference>1545571974</reference><reference>1558508802</reference><reference>1577255517</reference><reference>1579672261</reference><reference>1761552948</reference><reference>1987862681</reference><reference>2091631741</reference><reference>2165467455</reference><reference>2167353014</reference><reference>2167527087</reference><reference>2167685423</reference><reference>2172633566</reference></references><venue id="" type="">International East/West Database Workshop</venue><doi>10.1007/3-540-54141-1_15</doi><keywords><keyword weight="0.51172">Query language</keyword><keyword weight="0.57884">Context-sensitive language</keyword><keyword weight="0.49471">Recursive set</keyword><keyword weight="0.49814">Expression (mathematics)</keyword><keyword weight="0.45946">Computer science</keyword><keyword weight="0.46696">Theoretical computer science</keyword><keyword weight="0.56762">Recursive language</keyword><keyword weight="0.46028">Natural language processing</keyword><keyword weight="0.0">Artificial intelligence</keyword><keyword weight="0.51312">Constructed language</keyword><keyword weight="0.4934">Logic programming</keyword><keyword weight="0.55593">Language technology</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>In this paper we present a conceptually rather conservative approach to data deduction. Instead of introducing new language constructs we stay within the conventional relational framework while exploiting it further by making better use of current language technology. Applying naming, typing and binding to queries and relations leads to a language that gains expressiveness from its orthogonality rather than from extensiveness.</abstract></paper>
<paper id="1982223289"><title>A Formal Method for the Abstract Specification of Software</title><year>1984</year><authors><author org="Naval Research Laboratory, Washington, D. C.," id="2169367542">John McLean</author></authors><n_citation>58</n_citation><doc_type>Journal</doc_type><references><reference>1492921354</reference><reference>2090190027</reference><reference>2120670175</reference><reference>2134119432</reference><reference>2134338128</reference></references><venue id="118992489" type="J">Journal of the ACM</venue><doi>10.1145/828.829</doi><keywords><keyword weight="0.46351">Programming language</keyword><keyword weight="0.44884">Computer science</keyword><keyword weight="0.63855">Correctness</keyword><keyword weight="0.66317">Formal specification</keyword><keyword weight="0.47271">Software</keyword><keyword weight="0.53922">Formal grammar</keyword><keyword weight="0.61581">Formal methods</keyword><keyword weight="0.4822">Completeness (statistics)</keyword><keyword weight="0.51997">Semantics</keyword><keyword weight="0.64075">Formal verification</keyword></keywords><publisher>ACM</publisher><abstract>An intuitive presentation of the trace method for the abstractspecification of software contains sample specifications, syntacticand semantic definitions of consistency and totalness, methods forproving specifications consistent and total, and a comparison ofthe method with the algebraic approach to specification. Thisintuitive presentation is underpinned by a formal syntax,semantics, and derivation system for the method. Completeness andsoundness theorems establish the correctness of the derivationsystem with respect to the semantics, the coextensiveness of thesyntactic definitions of consistency and totalness with theirsemantic counterparts, and the correctness of the proof methodspresented. Areas for future research are discussed.</abstract></paper>
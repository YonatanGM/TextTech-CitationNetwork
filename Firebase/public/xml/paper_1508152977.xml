<paper id="1508152977"><title>State-Space Caching Revisited</title><year>1992</year><authors><author org="Université de Liège**" id="2634395717">Patrice Godefroid</author><author org="AT&amp;T Bell Lab.#TAB#" id="2028047182">Gerard J. Holzmann</author><author org="Université de Liège**" id="2151914609">Didier Pirottin</author></authors><n_citation>66</n_citation><doc_type>Conference</doc_type><references><reference>1505315292</reference><reference>1525928754</reference><reference>1540501475</reference><reference>1563242841</reference><reference>1968552123</reference><reference>1984771054</reference><reference>2012935476</reference><reference>2033071128</reference><reference>2079463874</reference><reference>2129335898</reference><reference>2147539576</reference><reference>2159519421</reference><reference>2554105671</reference></references><venue id="1162450063" type="C">Computer Aided Verification</venue><doi>10.1007/3-540-56496-9_15</doi><keywords><keyword weight="0.57123">Model checking</keyword><keyword weight="0.4363">Exponential function</keyword><keyword weight="0.0">State space exploration</keyword><keyword weight="0.45255">Computer science</keyword><keyword weight="0.51115">CPU cache</keyword><keyword weight="0.45938">Algorithm</keyword><keyword weight="0.4626">Theoretical computer science</keyword><keyword weight="0.50924">Linear temporal logic</keyword><keyword weight="0.52219">Reachability</keyword><keyword weight="0.64375">State space</keyword><keyword weight="0.47239">Partially ordered set</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>State space caching is a state space exploration method that stores all states of just one execution sequence plus as many previously visited states as available memory allows. So far, this technique has been of little practical significance. With a conventional reachability analysis, it allows one to reduce memory usage by only two to three times, before an unacceptable exponential increase of the run-time overhead sets in. The explosion of the run-time requirements is caused by redundant multiple explorations of unstored parts of the state space. Indeed, almost all states in the state space of concurrent systems are typically reached several times during the search. There are two causes for this: firstly, several different partial ordcrings of statement executions can lead to the same state; secondly, all interleavings of a same partial ordering of statement executions lead to the same state.</abstract></paper>
<paper id="1512600622"><title>An OCL Formulation of UML2 Template Binding</title><year>2004</year><authors><author org="Université des Sciences et Technologies de Lille" id="2604944131">Olivier Caron</author><author org="Université des Sciences et Technologies de Lille" id="2159832001">Bernard Carré</author><author org="Université des Sciences et Technologies de Lille" id="2122815062">Alexis Muller</author><author org="Université des Sciences et Technologies de Lille" id="1992921720">Gilles Vanwormhoudt</author></authors><n_citation>9</n_citation><doc_type>Journal</doc_type><references><reference>2015479359</reference><reference>2019896107</reference><reference>2064025843</reference></references><venue id="106296714" type="J">Lecture Notes in Computer Science</venue><doi>10.1007/978-3-540-30187-5_3</doi><keywords><keyword weight="0.56201">Model transformation</keyword><keyword weight="0.46029">Software engineering</keyword><keyword weight="0.53233">Unified Modeling Language</keyword><keyword weight="0.59396">Model-driven architecture</keyword><keyword weight="0.45138">Computer science</keyword><keyword weight="0.42027">Algorithm</keyword><keyword weight="0.54771">Software development process</keyword><keyword weight="0.5888">Object Constraint Language</keyword><keyword weight="0.58226">Metamodeling</keyword><keyword weight="0.51562">Reusability</keyword><keyword weight="0.5424">Software development</keyword><keyword weight="0.44514">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>After being considered only as documentation for a long time, models are gaining more and more importance in the software development lifecycle, as full software artefacts. The UML standard contributes a lot to this mutation, with the identification and the structuration of models space dimensions and constructs. Models can nowadays be explicitly manipulated through metamodeling techniques, dedicated tools or processes such as model transformation chains. This is Model Driven Engineering. Once it is clear that models are full software ingredients, we are faced with new problems (needs!) such as the possibility of their reusability and composability. As a consequence, specific constructs are introduced in order to facilitate this, such as the template notion initiated by UML1.3. Applications of this notion are growing more and more so that it was deeply revisited and strengthened in UML2. Though, its specification still lacks precision, particularly concerning the binding mechanism that allows to obtain models from templates. We propose a set of OCL constraints which strengthens the definition and helps in verifying the correctness of resulting models. These constraints apply to the UML2 metamodel and were implemented in an OCL verifier that we integrated in the Eclipse environment.</abstract></paper>
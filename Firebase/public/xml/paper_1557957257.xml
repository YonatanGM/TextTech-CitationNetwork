<paper id="1557957257"><title>Finding Feasible Counter-examples when Model Checking Abstracted Java Programs</title><year>2001</year><authors><author org="Kansas State Univ." id="2901938786">Corina S. Pasareanu</author><author org="Kansas State Univ." id="2156583880">Matthew B. Dwyer</author><author org="RIACS, NASA Ames Research Center#TAB#" id="2610259858">Willem Visser</author></authors><n_citation>63</n_citation><doc_type>Conference</doc_type><references><reference>1525623009</reference><reference>1533109738</reference><reference>1546300044</reference><reference>1550685300</reference><reference>1590185363</reference><reference>1599210792</reference><reference>1855771754</reference><reference>1968331212</reference><reference>1987073197</reference><reference>1991339794</reference><reference>2043100293</reference><reference>2059224852</reference><reference>2080593426</reference><reference>2090106217</reference><reference>2108408848</reference><reference>2111692334</reference><reference>2115309705</reference><reference>2135274583</reference><reference>2145326461</reference><reference>2158395308</reference><reference>2171480813</reference></references><venue id="1159071770" type="C">Tools and Algorithms for Construction and Analysis of Systems</venue><doi>10.1007/3-540-45319-9_20</doi><keywords><keyword weight="0.68728">Abstraction model checking</keyword><keyword weight="0.44434">Abstraction</keyword><keyword weight="0.46998">Programming language</keyword><keyword weight="0.62996">Model checking</keyword><keyword weight="0.51913">Predicate abstraction</keyword><keyword weight="0.46358">Computer science</keyword><keyword weight="0.45667">Theoretical computer science</keyword><keyword weight="0.47143">Software</keyword><keyword weight="0.48667">Counterexample</keyword><keyword weight="0.50592">Java</keyword><keyword weight="0.43208">Computation</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Despite recent advances in model checking and in adapting model checking techniques to software, the state explosion problem remains a major hurdle in applying model checking to software. Recent work in automated program abstraction has shown promise as a means of scaling model checking to larger systems. Most common abstraction techniques compute an upper approximation of the original program. Thus, when a specification is found true for the abstracted program, it is known to be true for the original program. Finding a specification to be false, however, is inconclusive since the specification may be violated on a behavior in the abstracted program which is not present in the original program. We have extended an explicit-state model checker, Java PathFinder (JPF), to analyze counter-examples in the presence of abstractions. We enhanced JPF to search for "feasible" (i.e. nondeterminismfree) counter-examples "on-the-fly", during model checking. Alternatively, an abstract counter-example can be used to guide the simulation of the concrete computation and thereby check feasibility of the counterexample. We demonstrate the effectiveness of these techniques on counterexamples from checks of several multi-threaded Java programs.</abstract></paper>
<paper id="1547337510"><title>Inheritance as an Incremental Modification Mechanism or What Like Is and Isn't Like</title><year>1988</year><authors><author org="Brown University" id="2024290158">Peter Wegner</author><author org="Brown University" id="431165649">Stanley B. Zdonik</author></authors><n_citation>229</n_citation><doc_type>Conference</doc_type><references><reference>100882334</reference><reference>1509319532</reference><reference>1770006921</reference><reference>2010152469</reference><reference>2027657506</reference><reference>2029246084</reference><reference>2035182234</reference><reference>2093541252</reference><reference>2155322595</reference><reference>2159853262</reference><reference>2161825580</reference><reference>2173184982</reference></references><venue id="1177184315" type="C">European Conference on Object-Oriented Programming</venue><doi>10.1007/3-540-45910-3_4</doi><keywords><keyword weight="0.43048">Subtractive color</keyword><keyword weight="0.43842">Programming language</keyword><keyword weight="0.42858">Finite set</keyword><keyword weight="0.42438">Algebraic number</keyword><keyword weight="0.44392">Conceptual model</keyword><keyword weight="0.43321">Compatibility (mechanics)</keyword><keyword weight="0.4289">Computer science</keyword><keyword weight="0.49856">Parametric polymorphism</keyword><keyword weight="0.44285">Software system</keyword><keyword weight="0.44326">Theoretical computer science</keyword><keyword weight="0.55981">Multiple inheritance</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>Incremental modification is a fundamental mechanism not only in software systems, but also in physical and mathematical systems. Inheritance owes its importance in large measure to its flexibility as a discrete incremental modification mechanism. Four increasingly permissive properties of incremental modification realizable by inheritance are examined: behavior compatibility, signature compatibility, name compatibility, and cancellation. Inheritance for entities with finite sets of attributes is defined and characterized as incremental modification with deferred binding of self-reference. Types denned as predicates for type checking are contrasted with classes defined as templates for object generation. Mathematical, operational, and conceptual models of inheritance are then examined in detail, leading to a discussion of algebraic models of behavioral compatibility, horizontal and vertical signature modification, algorithmically defined name modification, additive and subtractive exceptions, abstract inheritance networks, and parametric polymorphism. Liketypes are defined as a symmetrical general form of incremental modification that provide a framework for modeling similarity. The combination of safe behaviorally compatible changes and less safe radical incremental changes in a single programming language is considered.</abstract></paper>
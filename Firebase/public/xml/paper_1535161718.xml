<paper id="1535161718"><title>Reducing the Overhead of Dynamic Analysis</title><year>2002</year><authors><author org="Computer Sciences Department, University of Wisconsin-Madison, 1210 West Dayton Street, Madison, WI, 53706, USA" id="2125628827">Suan Hsi Yong</author><author org="Computer Sciences Department, University of Wisconsin-Madison, 1210 West Dayton Street, Madison, WI, 53706, USA" id="1974504312">Susan Horwitz</author></authors><n_citation>4</n_citation><doc_type>Journal</doc_type><references><reference>1579850852</reference><reference>1685737956</reference><reference>1825457006</reference><reference>1973326708</reference><reference>2038053930</reference><reference>2043647957</reference><reference>2054827240</reference><reference>2061117785</reference><reference>2079549821</reference><reference>2091141964</reference><reference>2095115578</reference><reference>2115454537</reference><reference>2130711572</reference><reference>2131135493</reference><reference>2140611647</reference><reference>2153332620</reference><reference>2158134106</reference><reference>2161100976</reference></references><venue id="50368787" type="J">Electronic Notes in Theoretical Computer Science</venue><doi>10.1016/S1571-0661(04)80583-8</doi><keywords><keyword weight="0.46786">Computer science</keyword><keyword weight="0.55817">Static analysis</keyword><keyword weight="0.41408">Harm</keyword><keyword weight="0.44741">Theoretical computer science</keyword><keyword weight="0.45754">Real-time computing</keyword><keyword weight="0.64714">Dynamic program analysis</keyword><keyword weight="0.55484">Debugging</keyword><keyword weight="0.46618">Embedded system</keyword></keywords><publisher>Elsevier</publisher><abstract>Abstract Dynamic analysis (instrumenting programs with code to detect and preven errors during program execution) can be an effective approach to debugging, as well as an effective means to prevent harm being caused by malicious code. One problem with this approach is the runtime overhead introduced by the instrumentation. We define several techniques that involve using the results of static analysis to identify some cases where instrumentation can safely be removed. While we have designed the techniques with a specific dynamic analysis in mind (that used by the Runtime Type-Checking tool), the ideas may be of more general applicability.</abstract></paper>
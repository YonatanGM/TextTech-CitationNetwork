<paper id="1946501790"><title>Program result-checking: a theory of testing meets a test of theory</title><year>1994</year><authors><author org="Dept. of Comput. Sci., California Univ., Berkeley, CA, USA#TAB#" id="2163096604">M. Blum</author><author org="Dept. of Comput. Sci., California Univ., Berkeley, CA, USA#TAB#" id="2129296980">H. Wasserman</author></authors><n_citation>31</n_citation><doc_type>Conference</doc_type><references><reference>174553187</reference><reference>1481582196</reference><reference>1594962164</reference><reference>1964234068</reference><reference>1970056983</reference><reference>1972300923</reference><reference>1975715978</reference><reference>1982248598</reference><reference>1985623009</reference><reference>1994135885</reference><reference>2002032317</reference><reference>2005722951</reference><reference>2006912660</reference><reference>2053086236</reference><reference>2064968474</reference><reference>2080132708</reference><reference>2094878497</reference><reference>2097206148</reference><reference>2097331548</reference><reference>2113244484</reference><reference>2132605415</reference><reference>2134839489</reference><reference>2293988196</reference><reference>2336485197</reference></references><venue id="1150208541" type="C">Foundations of Computer Science</venue><doi>10.1109/SFCS.1994.365678</doi><keywords><keyword weight="0.45876">Programming language</keyword><keyword weight="0.46202">Computer science</keyword><keyword weight="0.49839">Software bug</keyword><keyword weight="0.49829">Software performance testing</keyword><keyword weight="0.45284">Theoretical computer science</keyword><keyword weight="0.41023">Fourier transform</keyword><keyword weight="0.46958">Software</keyword><keyword weight="0.41412">Linear map</keyword><keyword weight="0.48713">Software quality</keyword><keyword weight="0.50966">Debugging</keyword><keyword weight="0.51962">Randomness</keyword></keywords><publisher>IEEE</publisher><abstract>We review the field of result-checking, discussing simple checkers and self-correctors. We argue that such checkers could profitably be incorporated in software as an aid to efficient debugging and reliable functionality. We consider how to modify traditional checking methodologies to make them more appropriate for use in real-time, real-number computer systems. In particular, we suggest that checkers should be allowed to use stored randomness: i.e., that they should be allowed to generate, pre-process, and store random bits prior to run-time, and then to use this information repeatedly in a series of run-time checks. In a case study of checking a general real-number linear transformation (for example, a Fourier Transform), we present a simple checker which uses stored randomness, and a self-corrector which is particularly efficient if stored randomness is allowed. u003e</abstract></paper>
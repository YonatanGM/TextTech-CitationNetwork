<paper id="1555105863"><title>Using annotations to check structural properties of classes</title><year>2005</year><authors><author org="Software Technology Group, Department of Computer Science, Darmstadt University of Technology, Germany#TAB#" id="336828806">Michael Eichberg</author><author org="Software Technology Group, Department of Computer Science, Darmstadt University of Technology, Germany#TAB#" id="2653003427">Thorsten Sch√§fer</author><author org="Software Technology Group, Department of Computer Science, Darmstadt University of Technology, Germany#TAB#" id="93690356">Mira Mezini</author></authors><n_citation>26</n_citation><doc_type>Conference</doc_type><references><reference>1537748064</reference><reference>1541063262</reference><reference>1610570299</reference><reference>1986453394</reference><reference>2103196543</reference><reference>2122102635</reference><reference>2124482749</reference><reference>2146455667</reference></references><venue id="1187615537" type="C">Fundamental Approaches to Software Engineering</venue><doi>10.1007/978-3-540-31984-9_18</doi><keywords><keyword weight="0.46617">Programming language</keyword><keyword weight="0.4791">Annotation</keyword><keyword weight="0.53196">Source code</keyword><keyword weight="0.46263">Computer science</keyword><keyword weight="0.47729">Path expression</keyword><keyword weight="0.5387">Code generation</keyword><keyword weight="0.45622">Theoretical computer science</keyword><keyword weight="0.52437">Enterprise JavaBeans</keyword><keyword weight="0.48709">Java</keyword><keyword weight="0.48111">Software development</keyword><keyword weight="0.47327">Semantics</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The specification of meta-information, by using attributes in .NET or annotations in Java, along with the source code is gaining widespread use. Meta-information is used for different purposes such as code generation or configuration of the environment in which a class is deployed. However, in most cases using an annotation also implies that constraints, beyond those defined by the languageu0027s semantics, have to be followed. E.g., a class must define a no-arguments constructor or the parameters of a method must have specific types. Currently, these constraints are not checked at all or only to a very limited extend. Hence, a violation can remain undetected and result in deployment-time or even subtle run-time errors. In this paper, we present a user-extensible framework that enables the definition of constraints to check the properties of annotated elements. Further, we demonstrate the application of the framework to check the constraints defined in the EJB 3.0 specification, and an evaluation of the approach based on checking the xPetstore-EJB3.0 project from within Eclipse to test the performance.</abstract></paper>
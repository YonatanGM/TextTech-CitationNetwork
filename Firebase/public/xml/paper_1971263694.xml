<paper id="1971263694"><title>How to generate random integers with known factorization</title><year>1983</year><authors><author org="" id="2152679201">Eric Bach</author></authors><n_citation>8</n_citation><doc_type>Conference</doc_type><references><reference>1981455414</reference><reference>2012857639</reference><reference>2166717942</reference><reference>2962961657</reference></references><venue id="1190910084" type="C">Symposium on the Theory of Computing</venue><doi>10.1145/800061.808747</doi><keywords><keyword weight="0.46534">Discrete mathematics</keyword><keyword weight="0.46058">Combinatorics</keyword><keyword weight="0.62528">Provable prime</keyword><keyword weight="0.63416">Primality test</keyword><keyword weight="0.61664">Trial division</keyword><keyword weight="0.63024">Prime factor</keyword><keyword weight="0.62593">Irreducible polynomial</keyword><keyword weight="0.63751">Factorization of polynomials</keyword><keyword weight="0.42187">Mathematics</keyword><keyword weight="0.59438">Random function</keyword><keyword weight="0.66865">Integer factorization</keyword></keywords><publisher>ACM</publisher><abstract>Recent work in public-key cryptography has led to the need to generate large random numbers with known factorization. This paper describes a probabilistic algorithm that produces a random k-bit integer in factored form. Each such number is equally likely to appear. The expected running time is, up to a constant factor, that required for k prime tests on k-bit integers. Thus, under reasonable assumptions about the speed of primality testing, it is a polynomial time process.</abstract></paper>
<paper id="1596431623"><title>Partial Completeness of Abstract Fixpoint Checking</title><year>2000</year><authors><author org="ÉCOLE NORMALE SUPÉRIEURE" id="2148533322">Patrick Cousot</author></authors><n_citation>41</n_citation><doc_type>Conference</doc_type><references><reference>153567890</reference><reference>1489487975</reference><reference>1491913687</reference><reference>1492188176</reference><reference>1497571013</reference><reference>1501731334</reference><reference>1502837501</reference><reference>1514983780</reference><reference>1550685300</reference><reference>1568478782</reference><reference>1571284404</reference><reference>1593428110</reference><reference>1599210792</reference><reference>1966571454</reference><reference>1987073197</reference><reference>2014764321</reference><reference>2025554746</reference><reference>2043100293</reference><reference>2046160987</reference><reference>2080593426</reference><reference>2081810835</reference><reference>2090106217</reference><reference>2108959714</reference><reference>2340063198</reference></references><venue id="1152543101" type="C">Symposium on Abstraction, Reformulation and Approximation</venue><doi>10.1007/3-540-44914-0_1</doi><keywords><keyword weight="0.671">Abstraction model checking</keyword><keyword weight="0.60679">Model checking</keyword><keyword weight="0.52498">Abstract interpretation</keyword><keyword weight="0.43726">Computer science</keyword><keyword weight="0.4872">Static analysis</keyword><keyword weight="0.45129">Theoretical computer science</keyword><keyword weight="0.47282">Mathematical proof</keyword><keyword weight="0.48938">Fixed point</keyword><keyword weight="0.52723">Program analysis</keyword><keyword weight="0.48989">Completeness (statistics)</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Abstract interpretation is used in program static analysis and model checking to cope with infinite state spaces and/or with computer resource limitations. One common problem is to check abstract fixpoints for specifications. The abstraction is partially complete when the checking algorithm is exact in that, if the algorithm ever terminates, its answer is always affirmative for correct specifications. We characterize partially complete abstractions for various abstract fixpoint checking algorithms, including new ones, and show that the computation of complete abstract domains is essentially equivalent to invariance proofs that is to concrete fixpoint checking.</abstract></paper>
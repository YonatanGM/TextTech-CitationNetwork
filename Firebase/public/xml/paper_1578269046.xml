<paper id="1578269046"><title>Harnessing rCOS for tool support: the CoCoME experience</title><year>2007</year><authors><author org="United Nations University, Institute for Software Technology" id="2228957528">Zhenbang Chen</author><author org="Faculty of Science and Technology, The University of Macau,#TAB#" id="2164105355">Xiaoshan Li</author><author org="United Nations University, Institute for Software Technology" id="2303465018">Zhiming Liu</author><author org="United Nations University, Institute for Software Technology" id="1925871413">Volker Stolz</author><author org="United Nations University, Institute for Software Technology" id="2922954611">Lu Yang</author></authors><n_citation>8</n_citation><doc_type>Conference</doc_type><references><reference>1492683468</reference><reference>1511826042</reference><reference>1555946950</reference><reference>1583910698</reference><reference>1857327297</reference><reference>1993836075</reference><reference>1998455310</reference><reference>2000947342</reference><reference>2012211446</reference><reference>2015688007</reference><reference>2041911176</reference><reference>2058954073</reference><reference>2110425399</reference><reference>2113061194</reference><reference>2137865376</reference><reference>2148797234</reference><reference>2153887189</reference><reference>2159181605</reference><reference>2167467151</reference></references><venue id="1169806927" type="C">Formal Methods</venue><doi>10.1007/978-3-540-75221-9_5</doi><keywords><keyword weight="0.43301">Notation</keyword><keyword weight="0.48498">Software engineering</keyword><keyword weight="0.62339">Package development process</keyword><keyword weight="0.46624">Computer science</keyword><keyword weight="0.55936">Correctness</keyword><keyword weight="0.44488">Theoretical computer science</keyword><keyword weight="0.0">Tool design</keyword><keyword weight="0.62977">Software development process</keyword><keyword weight="0.60073">Formal methods</keyword><keyword weight="0.6178">Goal-Driven Software Development Process</keyword><keyword weight="0.61113">Software development</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Complexity of software development has to be dealt with by dividing the different aspects and different views of the system and separating different concerns in the design. This implies the need of different modelling notations and tools to support more and more phases of the entire development process. To ensure the correctness of the models produced, the tools therefore need to integrate sophisticated checkers, generators and transformations. A feasible approach to ensure high quality of such add-ins is to base them on sound formal foundations. This paper reports our experience in the work on the Common Component Modelling Example (CoCoME) and shows where such add-ins will fit. In particular, we show how the formal techniques developed in rCOS can be integrated into a component-based development process, and where it can be integrated in and provide extension to an existing successful commercial tool for adding formally supported checking, transformation and generation modules.</abstract></paper>
<paper id="1507902915"><title>Alias Types for Recursive Data Structures</title><year>2000</year><authors><author org="Carnegie - Mellon University#TAB#" id="2161850330">David Walker</author><author org="Cornell University;" id="1985120884">J. Gregory Morrisett</author></authors><n_citation>163</n_citation><doc_type>Journal</doc_type><references><reference>1479933889</reference><reference>1555216982</reference><reference>1568624484</reference><reference>1608714802</reference><reference>1851346840</reference><reference>1965765328</reference><reference>1970061809</reference><reference>1971933951</reference><reference>1974265510</reference><reference>1977898832</reference><reference>1980939032</reference><reference>1988661738</reference><reference>2005192022</reference><reference>2006543828</reference><reference>2011648260</reference><reference>2012968289</reference><reference>2028038730</reference><reference>2030697178</reference><reference>2037911517</reference><reference>2038677544</reference><reference>2040070287</reference><reference>2051632385</reference><reference>2069107692</reference><reference>2071455557</reference><reference>2088126145</reference><reference>2102440514</reference><reference>2116293853</reference><reference>2118227920</reference><reference>2138839382</reference><reference>2139356751</reference><reference>2151480972</reference><reference>2164039975</reference><reference>2169907127</reference><reference>2170577595</reference><reference>2296413644</reference><reference>2911227993</reference><reference>2911865844</reference><reference>2912106379</reference><reference>2912166712</reference></references><venue id="106296714" type="J">Lecture Notes in Computer Science</venue><doi>10.1007/3-540-45332-6_7</doi><keywords><keyword weight="0.5545">Data structure</keyword><keyword weight="0.53369">Alias</keyword><keyword weight="0.6254">Aliasing (computing)</keyword><keyword weight="0.53042">Tree traversal</keyword><keyword weight="0.44516">Computer science</keyword><keyword weight="0.63483">Pointer aliasing</keyword><keyword weight="0.45163">Algorithm</keyword><keyword weight="0.51584">Type theory</keyword><keyword weight="0.45225">Theoretical computer science</keyword><keyword weight="0.52031">Memory management</keyword><keyword weight="0.62628">Recursive data type</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>Linear type systems permit programmers to deallocate or explicitly recycle memory, but are severely restricted by the fact that they admit no aliasing. This paper describes a pseudo-linear type system that allows a degree of aliasing and memory reuse as well as the ability to define complex recursive data structures. Our type system can encode conventional linear data structures such as linear lists and trees as well as more sophisticated data structures including cyclic and doubly-linked lists and trees. In the latter cases, our type system is expressive enough to represent pointer aliasing and yet safely permit destructive operations such as object deallocation. We demonstrate the flexibility of our type system by encoding two common space-conscious algorithms: destination-passing style and Deutsch-Schorr-Waite or "link-reversal" traversal algoithms.</abstract></paper>
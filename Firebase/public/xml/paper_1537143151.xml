<paper id="1537143151"><title>Closed Types as a Simple Approach to Safe Imperative Multi-stage Programming</title><year>2000</year><authors><author org="Univ. di Genova" id="2305061308">Cristiano Calcagno</author><author org="Univ. di Genova" id="2168610516">Eugenio Moggi</author><author org="Department of Computing Sciences" id="2663121153">Walid Taha</author></authors><n_citation>36</n_citation><doc_type>Conference</doc_type><references><reference>1555697857</reference><reference>1556604985</reference><reference>1570178357</reference><reference>1679133098</reference><reference>1829244603</reference><reference>1982122213</reference><reference>1988177568</reference><reference>2015256273</reference><reference>2073378225</reference><reference>2088735483</reference><reference>2094455839</reference><reference>2096314727</reference><reference>2106445678</reference><reference>2784736083</reference></references><venue id="1141821850" type="C">International Colloquium on Automata, Languages and Programming</venue><doi>10.1007/3-540-45022-X_4</doi><keywords><keyword weight="0.51586">Metaprogramming</keyword><keyword weight="0.52012">Operational semantics</keyword><keyword weight="0.44958">Open problem</keyword><keyword weight="0.47125">Programming language</keyword><keyword weight="0.46721">Computer science</keyword><keyword weight="0.4866">Partial evaluation</keyword><keyword weight="0.58946">High-level programming language</keyword><keyword weight="0.53837">Multi-stage programming</keyword><keyword weight="0.50812">Parsing</keyword><keyword weight="0.54739">Type constructor</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Safely adding computational effects to a multi-stage language has been an open problem. In previous work, a closed type constructor was used to provide a safe mechanism for executing dynamically generated code. This paper proposes a general notion of closed type as a simple approach to safely introducing computational effects into multistage languages. We demonstrate this approach formally in a core language called Mini-MLrefBN. This core language combines safely multi-stage constructs and ML-style references. In addition to incorporating state, Mini-MLrefBN also embodies a number of technical improvements over previously proposed core languages for multi-stage programming.</abstract></paper>
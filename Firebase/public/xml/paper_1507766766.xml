<paper id="1507766766"><title>Reasonong about Classess in Object-Oriented Languages: Logical Models and Tools</title><year>1998</year><authors><author org="Tu Dresden" id="2122959048">Ulrich Hensel</author><author org="Univ. Nijmegen" id="2148094435">Marieke Huisman</author><author org="Univ. Nijmegen" id="2105127320">Bart Jacobs</author><author org="Tu Dresden" id="2108105160">Hendrik Tews</author></authors><n_citation>52</n_citation><doc_type>Conference</doc_type><references><reference>1483254119</reference><reference>1509854283</reference><reference>1525643703</reference><reference>1544633123</reference><reference>1544933093</reference><reference>1568996673</reference><reference>1583030898</reference><reference>1627776297</reference><reference>1644882639</reference><reference>1659048632</reference><reference>1764715826</reference><reference>1985275803</reference><reference>1994033778</reference><reference>2057670587</reference><reference>2086788473</reference><reference>2113486906</reference><reference>2161825580</reference><reference>2166870727</reference></references><venue id="1136861413" type="C">European Symposium on Programming</venue><doi>10.1007/BFb0053566</doi><keywords><keyword weight="0.60361">Algebraic specification</keyword><keyword weight="0.48596">Programming language</keyword><keyword weight="0.60217">Formal language</keyword><keyword weight="0.55138">Object-oriented programming</keyword><keyword weight="0.4689">Computer science</keyword><keyword weight="0.46684">Theoretical computer science</keyword><keyword weight="0.54488">Implementation</keyword><keyword weight="0.66939">Formal specification</keyword><keyword weight="0.54344">Higher-order logic</keyword><keyword weight="0.57598">Proof assistant</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>A formal language CCSL is introduced for describing specifications of classes in object-oriented languages. We show how class specifications in CCSL can be translated into higher order logic. This allows us to reason about these specifications. In particular, it allows us (1) to describe (various) implementations of a particular class specification, (2) to develop the logical theory of a specific class specification, and (3) to establish refinements between two class specifications.</abstract></paper>
<paper id="1887907765"><title>Generalized version control in an object-oriented database</title><year>1988</year><authors><author org="Hewlett Packard Labs., Palo Alto, CA, USA#TAB#" id="2973236947">D. Beech</author><author org="Hewlett Packard Labs., Palo Alto, CA, USA#TAB#" id="2974567791">B. Mahbod</author></authors><n_citation>125</n_citation><doc_type>Conference</doc_type><references><reference>116617976</reference><reference>164147944</reference><reference>196018858</reference><reference>1507837977</reference><reference>1570983218</reference><reference>1595151077</reference><reference>1990244497</reference><reference>2026735162</reference><reference>2059252897</reference><reference>2085740580</reference><reference>2126884704</reference></references><venue id="1163988186" type="C">International Conference on Data Engineering</venue><doi>10.1109/ICDE.1988.105441</doi><keywords><keyword weight="0.65921">Object-oriented design</keyword><keyword weight="0.45148">Data mining</keyword><keyword weight="0.50987">Functional requirement</keyword><keyword weight="0.55837">Database model</keyword><keyword weight="0.53259">Relational database</keyword><keyword weight="0.46873">Computer science</keyword><keyword weight="0.53423">Object model</keyword><keyword weight="0.49786">Information engineering</keyword><keyword weight="0.42839">Control system</keyword><keyword weight="0.45088">Database</keyword><keyword weight="0.46942">Generality</keyword></keywords><publisher>IEEE Computer Society</publisher><abstract>An important function of an engineering database management system is to support incremental and cooperative design in an orderly way. This calls for a version-control mechanism of some generality if it is to be appropriate to the design of complex objects. The authors consider the nature of design objects, and develop some functional requirements for version control of such objects. They outline the basic object-oriented database model, which they take as the foundation for their proposal. They then discuss the relationship between versions and the objects they exemplify, describe the mechanisms for the creation of versioned objects and the conversion of non-versioned objects to versioned form, study the impact on referencing and type checking in the object model, and arrive at a flexible notion of a context containing rules for version selection. Their implementation of some of these concepts is also described. u003e</abstract></paper>
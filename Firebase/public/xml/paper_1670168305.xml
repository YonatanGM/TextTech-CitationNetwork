<paper id="1670168305"><title>Distributed application configuration</title><year>1996</year><authors><author org="IMAG, Grenoble, France" id="2306297839">L. Bellissard</author><author org="IMAG, Grenoble, France" id="2304939849">S.B. Atallah</author><author org="IMAG, Grenoble, France" id="2665572972">F. Boyer</author><author org="IMAG, Grenoble, France" id="99485367">M. Riveill</author></authors><n_citation>48</n_citation><doc_type>Conference</doc_type><references><reference>1495626372</reference><reference>1535752867</reference><reference>2050185963</reference><reference>2096870603</reference><reference>2125294767</reference><reference>2133456356</reference></references><venue id="1200222865" type="C">International Conference on Distributed Computing Systems</venue><doi>10.1109/ICDCS.1996.508008</doi><keywords><keyword weight="0.55932">System programming</keyword><keyword weight="0.61588">Software configuration management</keyword><keyword weight="0.46955">Computer science</keyword><keyword weight="0.57766">Distributed design patterns</keyword><keyword weight="0.59373">Software system</keyword><keyword weight="0.58374">Component-based software engineering</keyword><keyword weight="0.56085">Software construction</keyword><keyword weight="0.58331">Software development</keyword><keyword weight="0.58254">Software framework</keyword><keyword weight="0.47996">Distributed computing</keyword></keywords><publisher>IEEE</publisher><abstract>This paper presents Olan, a language and a run time support intended to facilitate the design, configuration and evolution of distributed applications made up of heterogeneous software components. Configuration covers two phases: for the application builder the identification of the software components and the description of their interconnections and communications; for the application administrator and maintainer the accurate use of system resources provided by the target environment, such as the placement of components on nodes. The main benefit of Olan is to provide a single unified description of distributed applications, adequate for construction, management, and evolution. The overall description is independent from the componentsu0027 implementation, so that the configuration process, e.g. the production of different versions of an implementation, is decoupled from the programming process. The features of the configuration language and the functions of the runtime support system are illustrated through the example of a distributed teleconferencing application.</abstract></paper>
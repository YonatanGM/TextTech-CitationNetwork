<paper id="1983382292"><title>The use of design descriptions in automated diagnosis</title><year>1984</year><authors><author org="Stanford Univ., Stanford, CA" id="281079088">Michael R. Genesereth</author></authors><n_citation>514</n_citation><doc_type>Journal</doc_type><references><reference>30492759</reference><reference>140614223</reference><reference>1895928490</reference><reference>2004045008</reference><reference>2021337406</reference><reference>2021492392</reference><reference>2033755422</reference><reference>2079866295</reference><reference>2100738443</reference><reference>2103766969</reference><reference>2111334369</reference><reference>2403798461</reference></references><venue id="196139623" type="J">Artificial Intelligence</venue><doi>10.1016/0004-3702(84)90043-2</doi><keywords><keyword weight="0.50051">Overhead (computing)</keyword><keyword weight="0.46496">Computer science</keyword><keyword weight="0.4856">Inference</keyword><keyword weight="0.43309">Dart</keyword><keyword weight="0.40494">Ranging</keyword><keyword weight="0.43648">Computer program</keyword><keyword weight="0.45302">Boolean algebra</keyword><keyword weight="0.0">Artificial intelligence</keyword><keyword weight="0.53298">Mycin</keyword><keyword weight="0.45762">Machine learning</keyword><keyword weight="0.47142">Generality</keyword></keywords><publisher>Elsevier Science Publishers Ltd.</publisher><abstract>Abstract This paper describes a device-independent diagnostic program called dart. dart differs from previous approaches to diagnosis taken in the Artificial Intelligence community in that it works directly from design descriptions rather than mycin -like symptom-fault rules. dart differs from previous approaches to diagnosis taken in the design-automation community in that it is more general and in many cases more efficient. dart uses a device-independent language for describing devices and a device-independent inference procedure for diagnosis. The resulting generality allows it to be applied to a wide class of devices ranging from digital logic to nuclear reactors. Although this generality engenders some computational overhead on small problems, it facilitates the use of multiple design descriptions and thereby makes possible combinatoric savings that more than offsets this overhead on problems of realistic size.</abstract></paper>
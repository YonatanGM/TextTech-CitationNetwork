<paper id="1623034960"><title>Fine-grain software distributed shared memory on SMP clusters</title><year>1998</year><authors><author org="Western Res. Lab., Digital Equip. Corp., Colorado Springs, CO, USA" id="2023512596">D.J. Scales</author><author org="" id="293998607">K. Gharachorloo</author><author org="" id="2608978038">A. Aggarwal</author></authors><n_citation>69</n_citation><doc_type>Conference</doc_type><references><reference>1508282982</reference><reference>1540779330</reference><reference>1542985837</reference><reference>1661326830</reference><reference>1949410241</reference><reference>1966285605</reference><reference>2014485836</reference><reference>2016730358</reference><reference>2029601347</reference><reference>2044902313</reference><reference>2047226031</reference><reference>2055176170</reference><reference>2058614217</reference><reference>2096733429</reference><reference>2101166607</reference><reference>2110244632</reference><reference>2111728901</reference><reference>2112378054</reference><reference>2113873540</reference><reference>2129192659</reference><reference>2130070879</reference><reference>2131607581</reference><reference>2132960876</reference><reference>2133022700</reference><reference>2133373086</reference><reference>2133766356</reference><reference>2141318181</reference><reference>2145021036</reference><reference>2151666023</reference><reference>2153287317</reference><reference>2157724676</reference><reference>2157897722</reference><reference>2163395477</reference><reference>2165083806</reference><reference>2171791894</reference><reference>2176864362</reference></references><venue id="1126329156" type="C">High-Performance Computer Architecture</venue><doi>10.1109/HPCA.1998.650552</doi><keywords><keyword weight="0.49138">Read-only memory</keyword><keyword weight="0.53372">Inline function</keyword><keyword weight="0.53008">Cache</keyword><keyword weight="0.44789">Computer science</keyword><keyword weight="0.4655">Parallel computing</keyword><keyword weight="0.64434">Distributed memory</keyword><keyword weight="0.45044">Real-time computing</keyword><keyword weight="0.48018">Software system</keyword><keyword weight="0.4796">Cluster analysis</keyword><keyword weight="0.49093">Application software</keyword><keyword weight="0.66925">Distributed shared memory</keyword><keyword weight="0.4636">Distributed computing</keyword></keywords><publisher>IEEE Computer Society</publisher><abstract>Commercial SMP nodes are an attractive building block for software distributed shared memory systems. The advantages of using SMP nodes include fast communication among processors within the same node and potential gains from clustering where remote data fetched by one processor is used by other processors on the same node. This paper describes a major extension to the Shasta distributed shared memory system to run efficiently on a cluster of SMP nodes. The Shasta system keeps shared data coherent across nodes at a fine granularity by inserting inline code that checks the cache state of shared data before each load or store in an application. However allowing processors to share memory within the same SMP is complicated by race conditions that arise because the inline state check is non-atomic with respect to the actual load or store of shared data. We present a novel protocol that avoids such race conditions without the use of costly synchronization in the inline checking code. To characterize the benefits of using SMP nodes in the context of Shasta, we present detailed performance results for nine SPLASH-2 applications running on a cluster of Alpha multiprocessors.</abstract></paper>
<paper id="1549205822"><title>High Level Specification of I/O in Functional Languages</title><year>1992</year><authors><author org="University of Nijmegen" id="2008571019">Peter Achten</author><author org="University of Nijmegen" id="2051672078">John H. G. van Groningen</author><author org="University of Nijmegen" id="1453097970">Rinus Plasmeijer</author></authors><n_citation>33</n_citation><doc_type>Conference</doc_type><references><reference>1520096901</reference><reference>1586212986</reference><reference>1971791303</reference><reference>2078944436</reference><reference>2089241138</reference><reference>2172307690</reference><reference>2911865844</reference><reference>2912106379</reference><reference>2914702690</reference></references><venue id="2754882675" type="C">Glasgow Workshop on Functional Programming</venue><doi>10.1007/978-1-4471-3215-8_1</doi><keywords><keyword weight="0.48379">Programming language</keyword><keyword weight="0.56601">Functional programming</keyword><keyword weight="0.0">Event stream</keyword><keyword weight="0.4636">Computer science</keyword><keyword weight="0.0">High level specification</keyword><keyword weight="0.46748">Theoretical computer science</keyword><keyword weight="0.59422">Input/output</keyword><keyword weight="0.0">Functional semantics</keyword><keyword weight="0.56751">Graph rewriting</keyword><keyword weight="0.61687">Functional specification</keyword><keyword weight="0.52296">Semantics</keyword></keywords><publisher>Springer, London</publisher><abstract>The interface with the outside world has always been one of the weakest points of functional languages. It is not easy to incorporate I/O without being allowed to do side-effects. Furthermore, functional languages allow redexes to be evaluated in any order while I/O generally has to be performed in a very specific order. In this paper we present a new solution for the I/O problem which we have incorporated in the language Concurrent Clean. Concurrent Clean offers a linear type system called Unique Types. It makes it possible to define functions with side-effects without violating the functional semantics. Now it is possible to change any object in the world in the way we wanted: e.g. arrays can be updated in-situ, arbitrary file manipulation is possible. We have used this powerful tool among others to create a library for window based I/O. Using an explicit environment passing scheme provides a high-level and elegant functional specification method for I/O, called Event I/O. Now the specification of I/O has become one of the strengths of functional languages: interactive programs written in Concurrent Clean are concise, easy to write and comprehend as well as efficient. The presented solution can in principle be applied for any other functional language as well provided that it actually uses graph rewriting semantics in the implementation.</abstract></paper>
<paper id="1588926042"><title>Reasoning in Interval Temporal Logic</title><year>1983</year><authors><author org="Stanford, University" id="2509450762">Ben Maszkowski</author><author org="Stanford Universityâ€¨" id="2146370811">Zohar Manna</author></authors><n_citation>83</n_citation><doc_type /><references><reference>2022667180</reference><reference>2061121751</reference><reference>2093541252</reference><reference>2103976539</reference></references><venue id="" type="">Proceedings of the Carnegie Mellon Workshop on Logic of Programs</venue><doi>10.1007/3-540-12896-4_374</doi><keywords><keyword weight="0.64766">Computational logic</keyword><keyword weight="0.64068">Predicate variable</keyword><keyword weight="0.47057">Programming language</keyword><keyword weight="0.63898">Horn clause</keyword><keyword weight="0.67243">Interval temporal logic</keyword><keyword weight="0.45353">Computer science</keyword><keyword weight="0.46285">Theoretical computer science</keyword><keyword weight="0.65063">Logic programming</keyword><keyword weight="0.65813">Predicate logic</keyword><keyword weight="0.64004">Dynamic logic (modal logic)</keyword><keyword weight="0.65045">Higher-order logic</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Predicate logic is a powerful and general descriptive formalism with a long history of development. However, since the logicu0027u0027s underlying semantics have no notion of time, statements such as "I increases by 2" cannot be directly expressed. We discuss interval temporal logic (ITL), a formalism that augments standard predicate logic with operators for time-dependent concepts. Our earlier work used ITL to specify and reason about hardware. In this paper we show how ITL can also directly capture various control structures found in conventional programming languages. Constructs are given for treating assignment, iteration, sequential and parallel computations and scoping. The techniques used permit specification and reasoning about such algorithms as concurrent Quicksort. We compare ITL with the logic-based programming languages Lucid and Prolog.</abstract></paper>
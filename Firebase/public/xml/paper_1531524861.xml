<paper id="1531524861"><title>Neutralization and Preemtion in Extended Logic Programs</title><year>1993</year><authors><author org="Freie Universität Berlin." id="2141172227">Gerd Wagner</author></authors><n_citation>4</n_citation><doc_type>Conference</doc_type><references><reference>100882334</reference><reference>1491890888</reference><reference>1556967393</reference><reference>1596105581</reference><reference>1762925607</reference><reference>2001338113</reference><reference>2014343072</reference><reference>2015627330</reference><reference>2018830344</reference><reference>2076698873</reference><reference>2156092566</reference></references><venue id="1201110412" type="C">International Conference on Logic Programming</venue><doi>10.1007/3-540-56944-8_65</doi><keywords><keyword weight="0.58202">Automated reasoning</keyword><keyword weight="0.57536">Computational logic</keyword><keyword weight="0.43868">Computer science</keyword><keyword weight="0.41009">Algorithm</keyword><keyword weight="0.43736">Theoretical computer science</keyword><keyword weight="0.57374">Bunched logic</keyword><keyword weight="0.59528">Non-monotonic logic</keyword><keyword weight="0.57213">Deductive reasoning</keyword><keyword weight="0.59435">Philosophy of logic</keyword><keyword weight="0.57465">Many-valued logic</keyword><keyword weight="0.5731">Dynamic logic (modal logic)</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Extended logic programs allow for negative conclusions in rules. So, the question of how to deal with contradictions arises. The trivialization (or ‘explosion’) approach of classical logic, according to which everything follows from a contradiction, is certainly not adequate for the purpose of processing partially inconsistent information in a cognitively and computationally satisfactory way. We propose to consider logical principles instead, which stem from the area of directly skeptical inheritance, or defeasible reasoning, known from the AI literature on nonmonotonic reasoning. In these systems conflicting pieces of information neutralize each other unless one of them ‘preempts’ (i.e. defeats) the other. The preemption mechanism is usually based on some notion of specificity. Extending earlier work [19], where we have introduced the concept of neutralization to the framework of extended logic programs, we show in this paper how to add a general mechanism for specificity-based preemption and demonstrate its feasibility by presenting an appropriate meta-interpreter.</abstract></paper>
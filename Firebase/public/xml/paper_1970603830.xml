<paper id="1970603830"><title>The temporal semantics of concurrent programs</title><year>1981</year><authors><author org="Tel-Aviv University, Computer Science Division, Tel-Aviv, Israel" id="2171343426">Amir Pnueli</author></authors><n_citation>386</n_citation><doc_type>Journal</doc_type><references><reference>78754889</reference><reference>135594033</reference><reference>1597755753</reference><reference>1964727056</reference><reference>1965662337</reference><reference>1994350081</reference><reference>2023808162</reference><reference>2032847002</reference><reference>2059034970</reference><reference>2132334337</reference><reference>2144738461</reference><reference>2162890392</reference><reference>2168149256</reference></references><venue id="90727058" type="J">Theoretical Computer Science</venue><doi>10.1016/0304-3975(81)90110-9</doi><keywords><keyword weight="0.4859">Notation</keyword><keyword weight="0.4686">Disjoint sets</keyword><keyword weight="0.46938">Programming language</keyword><keyword weight="0.64849">Temporal logic of actions</keyword><keyword weight="0.50848">Shared memory</keyword><keyword weight="0.45467">Computer science</keyword><keyword weight="0.63515">Linear temporal logic</keyword><keyword weight="0.46546">Theoretical computer science</keyword><keyword weight="0.60311">Temporal logic</keyword><keyword weight="0.46111">Formalism (philosophy)</keyword><keyword weight="0.48228">Semantics</keyword></keywords><publisher>Elsevier</publisher><abstract>The formalism of Temporal Logic is suggested as an appropriate tool for formalizing the semantics of concurrent programs. A simple model of concurrent program is presented in which n processors are executing concurrent n disjoint programs under a shared memory environment. The semantics of such a program specifies the class of state sequences which are admissible as proper execution sequences under the :[62],"two main criteria which are required are :[70],"Each state is obtained from its predecessor in the sequence by exactly one processor performing an atomic instruction in its :[91],"Fair Scheduling: no processor which is infinitely often enabled will be indefinitely :[104],"basic elements of Temporal Logic are introduced in a particular logic framework DX. The usefulness of Temporal Logic notation in describing properties of concurrent programs is demonstrated. A construction is then given for assigning to a program P a temporal formula W(P) which is true on all proper execution sequences of P. In order to prove that a program P possesses a property R1, one has only to prove the implications :[176],"example of such proof is given. It is then demonstrated that specification of the Temporal character of the programu0027s behavior is absolutely essential for the unambiguous understanding of the meaning of programming constructs.</abstract></paper>
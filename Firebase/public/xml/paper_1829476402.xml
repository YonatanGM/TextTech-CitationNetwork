<paper id="1829476402"><title>Generating a prototype from a UML model of system requirements</title><year>2004</year><authors><author org="Faculty of Science and Technology , University of Macau , Macao, China" id="2164105355">Xiaoshan Li</author><author org="International Institute for Software Technology, United Nations University, Macao, China#TAB#" id="2303465018">Zhiming Liu</author><author org="International Institute for Software Technology, United Nations University, Macao, China#TAB#" id="2951845012">Jifeng He</author><author org="International Institute for Software Technology, United Nations University, Macao, China#TAB#" id="2259565702">Quan Long</author></authors><n_citation>14</n_citation><doc_type>Conference</doc_type><references><reference>1482962177</reference><reference>1543262385</reference><reference>1593874741</reference><reference>1602736775</reference><reference>1825588344</reference><reference>2123130867</reference><reference>2158641382</reference><reference>2161498631</reference><reference>2161825580</reference></references><venue id="1133495350" type="C">International Conference on Distributed Computing and Internet Technology</venue><doi>10.1007/978-3-540-30555-2_30</doi><keywords><keyword weight="0.46972">Programming language</keyword><keyword weight="0.51017">Unified Modeling Language</keyword><keyword weight="0.45844">Computer science</keyword><keyword weight="0.53244">Requirements analysis</keyword><keyword weight="0.50321">Formal specification</keyword><keyword weight="0.47895">Code generation</keyword><keyword weight="0.65191">Applications of UML</keyword><keyword weight="0.53083">System requirements</keyword><keyword weight="0.48097">Software development</keyword><keyword weight="0.53468">Executable</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We present a method for automatically generating a prototype from a UML model of system requirements that consists of a use-case model and a conceptual class model The method is based on a formalization of UML in which a use case is formally specified by a pair of pre and post conditions in the context of a conceptual class model To generate a prototype, we translate the pre and post conditions of a use case into a sequence of executable atomic actions These actions are to create or delete an object, update an object, establish or remove a link between two objects with respect to an association Such a prototype can be used to validate requirements and check system invariants An automated prototype generator is developed in Java, and a simple library system is used as an example to illustrate the feasibility of the method.</abstract></paper>
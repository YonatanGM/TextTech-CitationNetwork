<paper id="1813696046"><title>Predicting software's minimum-time-to-hazard and mean-time-to-hazard for rare input events</title><year>1995</year><authors><author org="Reliable Software Technol., Sterling, VA, USA" id="2798654577">J.M. Voas</author><author org="" id="2792816725">K.W. Miller</author></authors><n_citation>14</n_citation><doc_type>Conference</doc_type><references><reference>1039852248</reference><reference>1905291772</reference><reference>2099855131</reference><reference>2113004249</reference><reference>2164501290</reference></references><venue id="1157832733" type="C">International Symposium on Software Reliability Engineering</venue><doi>10.1109/ISSRE.1995.497662</doi><keywords><keyword weight="0.54382">Mean time between failures</keyword><keyword weight="0.51135">Observability</keyword><keyword weight="0.58747">Inverse distribution</keyword><keyword weight="0.43209">Computer science</keyword><keyword weight="0.57486">Software fault tolerance</keyword><keyword weight="0.43739">Real-time computing</keyword><keyword weight="0.51327">Fault tolerance</keyword><keyword weight="0.51153">Software metric</keyword><keyword weight="0.51013">Software quality</keyword><keyword weight="0.4436">Reliability engineering</keyword><keyword weight="0.51737">Fault injection</keyword></keywords><publisher>IEEE</publisher><abstract>The paper turns the concept of input distributions on its head to exploit inverse input distributions. Although such distributions are not always true mathematical inverses, they do capture an intuitive property: inputs that have high frequencies in the original distribution will have low frequencies in the inverse distribution, and vice versa. We can use the inverse distribution in several different quality checks during development. We provide a fault based (fault injection) method to determine minimum time to failure and mean time to failure for software systems under normal operational and non normal operational conditions (meaning rare but legal events). In our calculations, we consider how various programmer faults, design errors, and incoming hardware failures are expected to impact the observability of the software system.</abstract></paper>
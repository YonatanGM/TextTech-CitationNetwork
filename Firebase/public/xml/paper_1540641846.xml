<paper id="1540641846"><title>Modular Verification of SRT Division</title><year>1996</year><authors><author org="SRI, International#TAB#" id="2937052463">Harald Rue√ü</author><author org="SRI, International#TAB#" id="2118526916">Natarajan Shankar</author><author org="SRI, International#TAB#" id="2143082811">Mandayam K. Srivas</author></authors><n_citation>30</n_citation><doc_type>Conference</doc_type><references><reference>2029932273</reference><reference>2036085017</reference><reference>2081371283</reference><reference>2094831575</reference><reference>2105011602</reference><reference>2106462831</reference><reference>2113486906</reference><reference>2142785890</reference><reference>2143166621</reference></references><venue id="1162450063" type="C">Computer Aided Verification</venue><doi>10.1007/3-540-61474-5_63</doi><keywords><keyword weight="0.57281">Specification language</keyword><keyword weight="0.59185">Functional verification</keyword><keyword weight="0.47344">Programming language</keyword><keyword weight="0.57699">Intelligent verification</keyword><keyword weight="0.45938">Computer science</keyword><keyword weight="0.44379">Algorithm</keyword><keyword weight="0.58867">Formal specification</keyword><keyword weight="0.4619">Theoretical computer science</keyword><keyword weight="0.56475">Verification</keyword><keyword weight="0.58655">Formal methods</keyword><keyword weight="0.57809">High-level verification</keyword><keyword weight="0.56954">Formal verification</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We describe a formal specification and verification in PVS for the general theory of SRT division, and for the hardware design of a specific implementation. The specification demonstrates how attributes of the PVS language (in particular, predicate subtypes) allow the general theory to be developed in a readable manner that is similar to textbook presentations, while the PVS table construct allows direct specification of the implementationu0027s quotient look-up table. Verification of the derivations in the SRT theory and for the data path and look-up table of the implementation are highly automated and performed for arbitrary, but finite precision; in addition, the theory is verified for general radix, while the implementation is specialized to radix 4. The effectiveness of the automation derives from PVSu0027s tight integration of rewriting with decision procedures for equality, linear arithmetic over integers and rationals, and propositional logic. This example demonstrates that the resources of an expressive specification language and of a general-purpose theorem prover are not inimical to highly automated verification in this domain, and can contribute to clarity, generality, and reuse.</abstract></paper>
<paper id="195082763"><title>Improved probabilistic verification by hash compaction</title><year>1995</year><authors><author org="Stanford, University" id="2103634389">Ulrich Stern</author><author org="Stanford, University" id="2148325455">David L. Dill</author></authors><n_citation>85</n_citation><doc_type /><references><reference>98763178</reference><reference>1947849810</reference><reference>2052207834</reference><reference>2106928356</reference><reference>2116989825</reference><reference>2117812659</reference><reference>2150119568</reference><reference>2151454836</reference><reference>2166158916</reference></references><venue id="" type="">CHARME '95 Proceedings of the IFIP WG 10.5 Advanced Research Working Conference on Correct Hardware Design and Verification Methods</venue><doi>10.1007/3-540-60385-9_13</doi><keywords><keyword weight="0.57342">State transition table</keyword><keyword weight="0.46702">Byte</keyword><keyword weight="0.47601">Upper and lower bounds</keyword><keyword weight="0.42232">Computer science</keyword><keyword weight="0.44595">Algorithm</keyword><keyword weight="0.50568">Probabilistic method</keyword><keyword weight="0.63582">Hash function</keyword><keyword weight="0.51804">Probabilistic logic</keyword><keyword weight="0.46045">False positive paradox</keyword><keyword weight="0.60091">Hash table</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We present and analyze a probabilistic method for verification by explicit state enumeration, which improves on the “hashcompact” method of Wolper and Leroy. The hashcompact method maintains a hash table in which compressed values for states instead of full state descriptors are stored. This method saves space but allows a non-zero probability of omitting states during verification, which may cause verification to miss design errors (i.e. verification may produce “false positives”). Our method improves on Wolper and Leroyu0027s by calculating the hash and compressed values independently, and by using a specific hashing scheme that requires a low number of probes in the hash table. The result is a large reduction in the probability of omitting a state. Hence, we can achieve a given upper bound on the probability of omitting a state using fewer bits per compressed state. For example, we can reduce the number of bytes stored for each state from the eight recommended by Wolper and Leroy to only five, and still enumerate state spaces of up to 80 million reachable states while keeping the probability of missing even one state to less than 0.13%.</abstract></paper>
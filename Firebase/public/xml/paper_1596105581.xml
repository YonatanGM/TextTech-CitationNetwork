<paper id="1596105581"><title>A database needs two kinds of negation</title><year>1991</year><authors><author org="Freie UniversitÃ¤t Berlin." id="2141172227">Gerd Wagner</author></authors><n_citation>56</n_citation><doc_type /><references><reference>105798218</reference><reference>1494051470</reference><reference>1511711492</reference><reference>1756530980</reference><reference>1766174263</reference><reference>1980131378</reference><reference>1984715534</reference><reference>1995303925</reference><reference>2015627330</reference><reference>2018830344</reference><reference>2165467455</reference><reference>2914983426</reference></references><venue id="" type="">MFDBS 91 Proceedings of the 3rd symposium on Mathematical fundamentals of database and knowledge base systems</venue><doi>10.1007/3-540-54009-1_25</doi><keywords><keyword weight="0.65375">Intuitionistic logic</keyword><keyword weight="0.0">Logic program</keyword><keyword weight="0.6593">Negation</keyword><keyword weight="0.43736">Computer science</keyword><keyword weight="0.57167">Proof theory</keyword><keyword weight="0.63003">Logic programming</keyword><keyword weight="0.40167">Database</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Databases do not usually allow for the representation of explicit negative information. We show that the concept of strong negation, already known from partial logic and constructive logic, provides a computationally feasible means to represent and process explicit negative information. On the other hand it seems desirable to retain the usual form of negation in databases, viz negation-as-failure which we also call weak negation. We show how the interaction between strong and weak negation can be modelled within the framework of partial logic.</abstract></paper>
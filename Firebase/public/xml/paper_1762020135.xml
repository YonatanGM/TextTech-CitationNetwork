<paper id="1762020135"><title>Polymorphic Recursion and Subtype Qualifications: Polymorphic Binding-Time Analysis in Polynomial Time</title><year>1995</year><authors><author org="K. U.Leuven" id="1435925321">Dirk Dussart</author><author org="DIKU" id="2141268906">Fritz Henglein</author><author org="DIKU" id="2011613385">Christian Mossin</author></authors><n_citation>52</n_citation><doc_type>Conference</doc_type><references><reference>1519142519</reference><reference>1595983599</reference><reference>1963954367</reference><reference>1978692906</reference><reference>1994511561</reference><reference>2025057593</reference><reference>2125357395</reference><reference>2131067178</reference><reference>2154632906</reference><reference>2163976959</reference><reference>2166822586</reference><reference>2169611723</reference><reference>2170810629</reference></references><venue id="1137552346" type="C">Static Analysis Symposium</venue><doi>10.1007/3-540-60360-3_36</doi><keywords><keyword weight="0.0">Binding time analysis</keyword><keyword weight="0.39673">Computer science</keyword><keyword weight="0.62141">Principal type</keyword><keyword weight="0.59921">Type inference</keyword><keyword weight="0.42615">Theoretical computer science</keyword><keyword weight="0.42072">Polymorphism (computer science)</keyword><keyword weight="0.746">Polymorphic recursion</keyword><keyword weight="0.47471">Time complexity</keyword><keyword weight="0.54898">Subtyping</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The combination of parameter polymorphism, subtyping extended to qualified and polymorphic types, and polymorphic recursion is useful in standard type inference and gives expressive type-based program analyses, but raises difficult algorithmic problems.</abstract></paper>
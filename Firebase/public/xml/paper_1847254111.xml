<paper id="1847254111"><title>Failure handling and coordinated execution of concurrent workflows</title><year>1998</year><authors><author org="Dept. of Comput. Sci., Massachusetts Univ., Amherst, MA, USA" id="2634635957">M. Karnath</author><author org="" id="323797451">K. Ramamritham</author></authors><n_citation>88</n_citation><doc_type>Conference</doc_type><references><reference>48863930</reference><reference>1490331809</reference><reference>1507413030</reference><reference>1556531117</reference><reference>1991418154</reference><reference>2010053008</reference><reference>2015234709</reference><reference>2043318789</reference><reference>2101074054</reference><reference>2107129508</reference><reference>2129674434</reference><reference>2149604773</reference><reference>2156529936</reference></references><venue id="1163988186" type="C">International Conference on Data Engineering</venue><doi>10.1109/ICDE.1998.655796</doi><keywords><keyword weight="0.43726">Data mining</keyword><keyword weight="0.69722">Workflow technology</keyword><keyword weight="0.61266">Workflow Management Coalition</keyword><keyword weight="0.45863">Computer science</keyword><keyword weight="0.51594">Correctness</keyword><keyword weight="0.65837">Windows Workflow Foundation</keyword><keyword weight="0.62851">XPDL</keyword><keyword weight="0.70138">Workflow engine</keyword><keyword weight="0.70512">Workflow management system</keyword><keyword weight="0.60897">Workflow</keyword><keyword weight="0.44784">Database</keyword><keyword weight="0.46571">Distributed computing</keyword></keywords><publisher>IEEE</publisher><abstract>Workflow management systems (WFMSs) coordinate the execution of applications distributed over networks. In WFMSs, data inconsistencies can arise due to: the interaction between steps of concurrent threads within a workflow (intra-workflow coordination); the interaction between steps of concurrent workflows (inter-workflow coordination); and the presence of failures. Since these problems have not received adequate attention, this paper focuses on developing the necessary concepts and infrastructure to handle them. First, to deal with inter- and intra-workflow coordination requirements we have identified a set of high level building blocks. Secondly, to handle failures we propose a novel and pragmatic approach called opportunistic compensation and re-execution that allows a workflow designer to customize workflow recovery from correctness as well as performance perspectives. Thirdly based on these concepts we have designed a workflow specification language that expresses new requirements for workflow executions and implemented a run-time system for managing workflow executions while satisfying the new requirements. These ideas are geared towards improving the modeling and correctness properties offered by WFMSs and making them more robust and flexible.</abstract></paper>
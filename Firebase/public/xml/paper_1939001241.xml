<paper id="1939001241"><title>Naturally Embedded Query Languages</title><year>1992</year><authors><author org="University of Edinburgh," id="599151389">Val Tannen</author><author org="University of Pennsylvania" id="2020138198">Peter Buneman</author><author org="University of Pennsylvania" id="2263195242">Limsoon Wong</author></authors><n_citation>145</n_citation><doc_type>Conference</doc_type><references><reference>31746626</reference><reference>135323631</reference><reference>1520355364</reference><reference>1596560506</reference><reference>1975355536</reference><reference>1984890936</reference><reference>1987682002</reference><reference>1997143185</reference><reference>2007578346</reference><reference>2009592055</reference><reference>2016282341</reference><reference>2044215335</reference><reference>2089781037</reference><reference>2109221906</reference><reference>2148517439</reference><reference>2162602286</reference><reference>2295914203</reference></references><venue id="1165285842" type="C">International Conference on Database Theory</venue><doi>10.1007/3-540-56039-4_38</doi><keywords><keyword weight="0.59793">Fifth-generation programming language</keyword><keyword weight="0.68842">Query language</keyword><keyword weight="0.62098">RDF query language</keyword><keyword weight="0.60818">Second-generation programming language</keyword><keyword weight="0.4662">Programming language</keyword><keyword weight="0.45671">Computer science</keyword><keyword weight="0.60876">Very high-level programming language</keyword><keyword weight="0.46706">Theoretical computer science</keyword><keyword weight="0.60047">Third-generation programming language</keyword><keyword weight="0.6019">Programming language theory</keyword><keyword weight="0.59569">Language primitive</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We investigate the properties of a simple programming language whose main computational engine is structural recursion on sets. We describe a progression of sublanguages in this paradigm that (1) have increasing expressive power, and (2) illustrate robust conceptual restrictions thus exhibiting interesting additional properties. These properties suggest that we consider our sublanguages as candidates for “query languages”. Viewing query languages as restrictions of our more general programming language has several advantages. First, there is no “impedance mismatch” problem; the query languages are already there, so they share common semantic foundation with the general language. Second, we suggest a uniform characterization of nested relational and complex-object algebras in terms of some surprisingly simple operators;and we can make comparisons of expressiveness in a general framework. Third, we exhibit differences in expressive power that are not always based on complexity arguments, but use the idea that a query in one language may not be polymorphically expressible in another. Fourth, ideas of category theory can be profitably used to organize semantics and syntax, in particular our minimal (core) language is a well-understood categorical construction: a cartesian category with a strong monad on it. Finally, we bring out an algebraic perspective, that is, our languages come with equational theories, and categorical ideas can be used to derive a number of rather general identities that may serve as optimizations or as techniques for discovering optimizations.</abstract></paper>
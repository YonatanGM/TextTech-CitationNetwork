<paper id="1841535323"><title>Parallelizing the closure computation in automated deduction</title><year>1990</year><authors><author org="Australian Nat. University" id="2026529187">John K. Slaney</author><author org="Argonne National Laboratory,#TAB#" id="1977610862">Ewing L. Lusk</author></authors><n_citation>24</n_citation><doc_type>Conference</doc_type><references><reference>1534330909</reference><reference>1972956465</reference><reference>1994913066</reference><reference>2051668492</reference><reference>2091220676</reference><reference>2119089900</reference></references><venue id="1134440762" type="C">Conference on Automated Deduction</venue><doi>10.1007/3-540-52885-7_77</doi><keywords><keyword weight="0.58615">Automated reasoning</keyword><keyword weight="0.592">Parallel algorithm</keyword><keyword weight="0.46521">Computer science</keyword><keyword weight="0.57584">Automated theorem proving</keyword><keyword weight="0.46254">Algorithm</keyword><keyword weight="0.54691">Closure (topology)</keyword><keyword weight="0.4913">Automation</keyword><keyword weight="0.47087">Theoretical computer science</keyword><keyword weight="0.52852">Rule of inference</keyword><keyword weight="0.54943">Computation</keyword><keyword weight="0.53671">Mathematical logic</keyword></keywords><publisher>Springer Berlin Heidelberg</publisher><abstract>In this paper we present a parallel algorithm for computing the closure of a set under an operation. This particular type of computation appears in a variety of disguises, and has been used in automated theorem proving, abstract algebra, and formal logic. The algorithm we give here is particularly suited for shared-memory parallel computers, where it makes possible economies of space. Implementations of the algorithm in two application contexts are described and experimental results given.</abstract></paper>
<paper id="1566496315"><title>Integration in PVS: Tables, Types, and Model Checking</title><year>1997</year><authors><author org="SRI, International#TAB#" id="2091958867">Sam Owre</author><author org="SRI, International#TAB#" id="2157944775">John M. Rushby</author><author org="SRI, International#TAB#" id="2118526916">Natarajan Shankar</author></authors><n_citation>33</n_citation><doc_type>Conference</doc_type><references><reference>1511157305</reference><reference>1522700326</reference><reference>1540641846</reference><reference>1551406732</reference><reference>1607353699</reference><reference>1840254652</reference><reference>2020968148</reference><reference>2097544069</reference><reference>2106462831</reference><reference>2113486906</reference><reference>2122086011</reference><reference>2147880466</reference><reference>2148596898</reference><reference>2163380638</reference><reference>2170247991</reference></references><venue id="1159071770" type="C">Tools and Algorithms for Construction and Analysis of Systems</venue><doi>10.1007/BFb0035400</doi><keywords><keyword weight="0.60259">Model checking</keyword><keyword weight="0.51281">Decision table</keyword><keyword weight="0.47002">Computer science</keyword><keyword weight="0.4178">Space Shuttle</keyword><keyword weight="0.56525">Automated theorem proving</keyword><keyword weight="0.46982">Theoretical computer science</keyword><keyword weight="0.51164">Dependent type</keyword><keyword weight="0.0">Verification system</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We have argued previously that the effectiveness of a verification system derives not only from the power of its individual features for expression and deduction, but from the extent to which these capabilities are integrated: the whole is more than the sum of its parts [19,21]. Here, we illustrate this thesis by describing a simple construct for tabular specifications that was recently added to PVS. Because this construct integrates with other capabilities of PVS, such as typechecker-generated proof obligations, dependent typing, higher-order functions, model checking, and general theorem proving, it can be used for a surprising variety of purposes. We demonstrate this with examples drawn from hardware division algorithms and requirements specifications.</abstract></paper>
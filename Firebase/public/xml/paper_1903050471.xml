<paper id="1903050471"><title>Scheduling of Independent Dedicated Multiprocessor Tasks</title><year>2002</year><authors><author org="Univerité d’Evry" id="2949283110">Evripidis Bampis</author><author org="CNR Viale del Policlinico" id="2159694835">Massimiliano Caramia</author><author org="Charles University" id="2120831594">Jirí Fiala</author><author org="Christian-Albrechts-Universität zu Kiel," id="2113377157">Aleksei V. Fishkin</author><author org="University of Rome “tor vergata”" id="1894136617">Antonio Iovanella</author></authors><n_citation>17</n_citation><doc_type>Conference</doc_type><references><reference>1491075941</reference><reference>1586604414</reference><reference>1912586891</reference><reference>1925163993</reference><reference>1970500119</reference><reference>1991878822</reference><reference>2054042656</reference><reference>2111385661</reference><reference>2121897488</reference><reference>2126880571</reference><reference>2127960094</reference><reference>2135507920</reference><reference>2142932691</reference><reference>2202947145</reference><reference>2911767655</reference></references><venue id="1175727152" type="C">International Symposium on Algorithms and Computation</venue><doi>10.1007/3-540-36136-7_35</doi><keywords><keyword weight="0.56413">Online algorithm</keyword><keyword weight="0.55092">Approximation algorithm</keyword><keyword weight="0.58702">Job shop scheduling</keyword><keyword weight="0.63824">Multiprocessor scheduling</keyword><keyword weight="0.50136">Scheduling (computing)</keyword><keyword weight="0.44116">Computer science</keyword><keyword weight="0.4562">Algorithm</keyword><keyword weight="0.52746">Independent set</keyword><keyword weight="0.43624">Distributed computing</keyword><keyword weight="0.59274">Competitive analysis</keyword><keyword weight="0.51344">Bounded function</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We study the off and on-line versions of the well known problem of scheduling a set of n independent multiprocessor tasks with pre-specified processor allocations on a set of identical processors in order to minimize the makespan. Recently, in [12], it has been proven that in the case when all tasks have unit processing time the problem cannot be approximated within a factor of m1/2 - ?, neither for some ? u003e 0, unless P= NP; nor for any ? u003e 0, unless NP=ZPP. For this special case we give a simple algorithm based on the classical first-fit technique. We analyze the algorithm for both tasks arrive over time and tasks arrive over list on-line scheduling versions, and show that its competitive ratio is bounded by 2?m and 2?m + 1, respectively. Here we also use some preliminary results on (vertex) coloring of k-tuple graphs. For the case of arbitrary processing times, we show that any algorithm which uses the first-fit technique cannot be better than m competitive. Then, by using our split-round technique, we give a 3?m-approximation algorithm for the off-line version of the problem. Finally, by using some ideas from [20], we adapt the algorithm to the on-line case, in the paradigm of tasks arriving over time in which the existence of a task is unknown until its release date, and show that its competitive ratio is bounded by 6?m. Due to the conducted experimental results, we conclude that our algorithms can perform well in practice.</abstract></paper>
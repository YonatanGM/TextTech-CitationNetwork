<paper id="1517231072"><title>Discovery of Interesting Data Dependencies from a Workload of SQL Statements</title><year>1999</year><authors><author org="Universite Blaise Pascal#TAB#" id="2148254865">Stéphane Lopes</author><author org="Universite Blaise Pascal#TAB#" id="2226135823">Jean-Marc Petit</author><author org="Universite Blaise Pascal#TAB#" id="2950612771">Farouk Toumani</author></authors><n_citation>6</n_citation><doc_type>Conference</doc_type><references><reference>1781748254</reference><reference>1978387271</reference><reference>1983428002</reference><reference>1994962776</reference><reference>2066771339</reference><reference>2098932141</reference><reference>2125227861</reference><reference>2148291485</reference><reference>2150817871</reference></references><venue id="1141769385" type="C">European Conference on Principles of Data Mining and Knowledge Discovery</venue><doi>10.1007/978-3-540-48247-5_54</doi><keywords><keyword weight="0.56656">SQL</keyword><keyword weight="0.45775">Data mining</keyword><keyword weight="0.53735">Data dependency</keyword><keyword weight="0.55345">Relational database</keyword><keyword weight="0.48145">Functional programming</keyword><keyword weight="0.45997">Workload</keyword><keyword weight="0.46156">Computer science</keyword><keyword weight="0.51499">Database schema</keyword><keyword weight="0.55604">Functional dependency</keyword><keyword weight="0.68321">Dependency theory (database theory)</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Discovering data dependencies consists in producing the whole set of a given class of data dependencies holding in a database, the task of selecting the interesting ones being usually left to an expert user. In this paper we take another look at the problems of discovering inclusion and functional dependencies in relational databases. We define rigourously the so-called logical navigation from a workload of SQL statements. This assumption leads us to devise tractable algorithms for discovering “interesting” inclusion and functional dependencies.</abstract></paper>
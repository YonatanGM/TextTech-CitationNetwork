<paper id="1500563148"><title>Variability Dependencies in Product Family Engineering</title><year>2003</year><authors><author org="University of Groningen" id="1997901772">Michel Jaring</author><author org="University of Groningen" id="2271217432">Jan Bosch</author></authors><n_citation>12</n_citation><doc_type /><references><reference>23753253</reference><reference>68886642</reference><reference>1486076990</reference><reference>1489242299</reference><reference>1496612258</reference><reference>1515014736</reference><reference>1554977156</reference><reference>1731038901</reference><reference>2016589052</reference><reference>2023546887</reference><reference>2054762611</reference><reference>2106432430</reference><reference>2114152285</reference><reference>2116844130</reference><reference>2125579889</reference><reference>2129253955</reference><reference>2129310344</reference><reference>2137860663</reference><reference>2142874510</reference></references><venue id="" type="">International Workshop on Software Product-Family Engineering</venue><doi>10.1007/978-3-540-24667-1_7</doi><keywords><keyword weight="0.7016">Product family engineering</keyword><keyword weight="0.46357">Architecture</keyword><keyword weight="0.50277">Enterprise resource planning</keyword><keyword weight="0.45668">Systems engineering</keyword><keyword weight="0.41726">Display size</keyword><keyword weight="0.46942">Software engineering</keyword><keyword weight="0.4866">Software</keyword><keyword weight="0.66028">Software product line</keyword><keyword weight="0.53587">Diversification (marketing strategy)</keyword><keyword weight="0.40467">Engineering</keyword><keyword weight="0.56107">Legacy system</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>In a product family context, software architects anticipate product diversification and design architectures that support variants in both space (multiple contexts) and time (changing contexts). Product diversification is based on the concept of variability: a single architecture and a set of components support a family of products. Software product families need to support increasing amounts of variability, leading to a situation where variability dependencies become of primary concern. This paper discusses (1) a taxonomy of variability dependencies and (2) a case study in designing a program monitor and exception handler for a legacy system. The study shows that the types of variability dependencies in a system depend on how the system is designed and architected.</abstract></paper>
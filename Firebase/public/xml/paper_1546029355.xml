<paper id="1546029355"><title>Theoretical and Empirical Comparisons of Approximate String Matching Algorithms</title><year>1992</year><authors><author org="Cold Spring Harbor Laboratory," id="2303853135">William I. Chang</author><author org="University of Washington," id="2156341953">Jordan Lampe</author></authors><n_citation>66</n_citation><doc_type>Conference</doc_type><references><reference>1550098107</reference><reference>1970707909</reference><reference>1981320868</reference><reference>1990413869</reference><reference>1995303482</reference><reference>2004120611</reference><reference>2011632873</reference><reference>2011999472</reference><reference>2014497078</reference><reference>2016219933</reference><reference>2018885841</reference><reference>2024817899</reference><reference>2052899946</reference><reference>2074707165</reference><reference>2100451901</reference><reference>2121252285</reference><reference>2130200371</reference><reference>2149202424</reference></references><venue id="1192804102" type="C">Combinatorial Pattern Matching</venue><doi>10.1007/3-540-56024-6_14</doi><keywords><keyword weight="0.56611">Edit distance</keyword><keyword weight="0.63867">String searching algorithm</keyword><keyword weight="0.46009">Discrete mathematics</keyword><keyword weight="0.46021">Combinatorics</keyword><keyword weight="0.63968">Commentz-Walter algorithm</keyword><keyword weight="0.45141">Algorithm</keyword><keyword weight="0.54596">Ukkonen's algorithm</keyword><keyword weight="0.62899">Rabin–Karp algorithm</keyword><keyword weight="0.62323">Approximate string matching</keyword><keyword weight="0.5818">String metric</keyword><keyword weight="0.42407">Mathematics</keyword><keyword weight="0.61763">Boyer–Moore string search algorithm</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We study in depth a model of non-exact pattern matching based on edit distance, which is the minimum number of substitutions, insertions, and deletions needed to transform one string of symbols to another. More precisely, the k differences approximate string matching problem specifies a text string of length n, a pattern string of length m, the number k of differences (substitutions, insertions, deletions) allowed in a match, and asks for all locations in the text where a match occurs. We have carefully implemented and analyzed various O(kn) algorithms based on dynamic programming (DP), paying particular attention to dependence on b the alphabet size. An empirical observation on the average values of the DP tabulation makes apparent each algorithmu0027s dependence on b. A new algorithm is presented that computes much fewer entries of the DP table. In practice, its speedup over the previous fastest algorithm is 2.5X for binary alphabet; 4X for four-letter alphabet; 10X for twenty-letter alphabet. We give a probabilistic analysis of the DP table in order to prove that the expected running time of our algorithm (as well as an earlier “cut-off” algorithm due to Ukkonen) is O(kn) for random text. Furthermore, we give a heuristic argument that our algorithm is O(kn/(√b-1)) on the average, when alphabet size is taken into consideration.</abstract></paper>
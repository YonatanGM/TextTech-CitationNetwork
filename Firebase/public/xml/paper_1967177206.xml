<paper id="1967177206"><title>Complexity of flow analysis, inductive assertion synthesis and a language due to Dijkstra</title><year>1980</year><authors><author org="" id="2116419005">Neil D. Jones</author><author org="" id="222738917">Steven S. Muchnick</author></authors><n_citation>57</n_citation><doc_type>Conference</doc_type><references><reference>1585404558</reference><reference>1655990431</reference><reference>1969077685</reference><reference>2018537910</reference><reference>2065251436</reference><reference>2083916702</reference><reference>2088064948</reference><reference>2088126145</reference><reference>2103953153</reference><reference>2123301443</reference><reference>2132661148</reference><reference>2133976022</reference><reference>2330123543</reference></references><venue id="1150208541" type="C">Foundations of Computer Science</venue><doi>10.1109/SFCS.1980.16</doi><keywords><keyword weight="0.46676">Boolean function</keyword><keyword weight="0.4826">Dynamic programming</keyword><keyword weight="0.4151">Combinatorics</keyword><keyword weight="0.46026">Programming language</keyword><keyword weight="0.45406">Computer science</keyword><keyword weight="0.50551">Assertion</keyword><keyword weight="0.4604">Theoretical computer science</keyword><keyword weight="0.51302">Mathematical proof</keyword><keyword weight="0.48722">Flowchart</keyword><keyword weight="0.48194">Computational complexity theory</keyword><keyword weight="0.46934">Bounded function</keyword><keyword weight="0.49872">Dijkstra's algorithm</keyword></keywords><publisher>IEEE</publisher><abstract>Two different methods of flow analysis are discussed, one a significant generalization of the other. It is shown that the two methods have significantly different intrinsic computational complexities. As an outgrowth of our observations it is shown that a feature of the programming language used by Dijkstra in A Discipline of Programming makes it unsuitable for compile-time type checking, thus suggesting that flow analysis is applicable to the design of programming languages, as well as to their implementation. It is also shown that program verification by the method of inductive assertions is very likely to lead to assertions whose lengths and proofs are not polynomially bounded in the size of the program being verified, even for very simple programs. This last observation casts further doubt on the practicality and relevance of mechanized verification of arbitrary programs.</abstract></paper>
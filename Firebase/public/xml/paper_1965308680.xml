<paper id="1965308680"><title>Shuffle languages, Petri nets, and context-sensitive grammars</title><year>1981</year><authors><author org="University of Washington-Seattle," id="1973360365">Jay Gischer</author></authors><n_citation>56</n_citation><doc_type>Journal</doc_type><references><reference>1817451992</reference><reference>2073253517</reference><reference>2153580110</reference></references><venue id="103482838" type="J">Communications of The ACM</venue><doi>10.1145/358746.358767</doi><keywords><keyword weight="0.52233">Rule-based machine translation</keyword><keyword weight="0.52433">Regular expression</keyword><keyword weight="0.54582">Petri net</keyword><keyword weight="0.45299">Programming language</keyword><keyword weight="0.51585">Expression (mathematics)</keyword><keyword weight="0.43572">Computer science</keyword><keyword weight="0.51963">Concurrency</keyword><keyword weight="0.61013">Abstract family of languages</keyword><keyword weight="0.45176">Theoretical computer science</keyword><keyword weight="0.57552">Cone (formal languages)</keyword><keyword weight="0.51229">Regular language</keyword></keywords><publisher>ACM</publisher><abstract>Flow expressions have been proposed as an extension of the regular expressions designed to model concurrency. We examine a simplification of these flow expressions which we call shuffle expressions . We introduce two types of machines to aid in recognizing shuffle languages and show that one such machine may be equivalent to a Petri Net. In addition, closure and containment properties of the related language classes are investigated, and we show that one machine type recognizes at least a restricted class of shuffle languages. Finally, grammars for all shuffle languages are generated, and the shuffle languages are shown to be context-sensitive.</abstract></paper>
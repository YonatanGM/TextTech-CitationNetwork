<paper id="1526385399"><title>JAC: A Flexible Solution for Aspect-Oriented Programming in Java</title><year>2001</year><authors><author org="CNAM, Lab. CEDRIC" id="2099105146">Renaud Pawlak</author><author org="Univ. Paris 6" id="1986010036">Lionel Seinturier</author><author org="CNAM, Lab. CEDRIC" id="147420329">Laurence Duchien</author><author org="CNAM, Lab. CEDRIC" id="683273356">Gerard Florin</author></authors><n_citation>198</n_citation><doc_type>Journal</doc_type><references><reference>1571014466</reference><reference>1610570299</reference><reference>1855341394</reference><reference>1991604845</reference><reference>2016238341</reference><reference>2033868415</reference><reference>2094282293</reference><reference>2114436200</reference><reference>2134119432</reference><reference>2138363365</reference><reference>2139897701</reference><reference>2144809790</reference><reference>2913965119</reference></references><venue id="106296714" type="J">Lecture Notes in Computer Science</venue><doi>10.1007/3-540-45429-2_1</doi><keywords><keyword weight="0.4638">Programming language</keyword><keyword weight="0.56434">Aspect-oriented programming</keyword><keyword weight="0.5581">Object-oriented programming</keyword><keyword weight="0.6146">Java annotation</keyword><keyword weight="0.45023">Computer science</keyword><keyword weight="0.62296">Java concurrency</keyword><keyword weight="0.60547">Real time Java</keyword><keyword weight="0.62231">Generics in Java</keyword><keyword weight="0.57175">AspectJ</keyword><keyword weight="0.57349">Java</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>This paper presents JAC (Java Aspect Components), a framework for aspect-oriented programming in Java. Unlike language such as AspectJ which are mostly class-based,JAC is object-based and does not require any language extensions to Java. It uses the Javassist class load-time MOP. An aspect program in JAC is a set of aspect objects that can be dynamically deployed and undeployed on top of running application objects. Aspect objects may define three kinds of aspect methods: wrapping methods (that wrap application methods and provide the ability to run code before and after the wrapped methods), role methods (that add new functionalities to application objects), and exception handlers. The aspects composition issue is handled through a well-defined wrapping controller that specifies for each wrapped object at wrap-time, runtime or both, the execution order of aspect objects.</abstract></paper>
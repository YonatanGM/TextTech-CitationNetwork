<paper id="1971505071"><title>Detection of injected, dynamically generated, and obfuscated malicious code</title><year>2003</year><authors><author org="Massachusetts Institute of Technology, Lexington, Ma" id="2058126059">Jesse C. Rabek</author><author org="Massachusetts Institute of Technology, Lexington, Ma" id="300064627">Roger I. Khazan</author><author org="Massachusetts Institute of Technology, Lexington, Ma" id="2156514130">Scott M. Lewandowski</author><author org="Massachusetts Institute of Technology, Lexington, Ma" id="2125948329">Robert K. Cunningham</author></authors><n_citation>94</n_citation><doc_type>Conference</doc_type><references><reference>1592090113</reference><reference>1600911019</reference><reference>1952910495</reference><reference>1989359075</reference><reference>2048465382</reference><reference>2123886726</reference><reference>2129860818</reference><reference>2135143063</reference><reference>2167332015</reference><reference>2615155959</reference></references><venue id="2626915506" type="C">Workshop on Rapid Malcode</venue><doi>10.1145/948187.948201</doi><keywords><keyword weight="0.60616">Static program analysis</keyword><keyword weight="0.51547">Anomaly detection</keyword><keyword weight="0.4388">Computer security</keyword><keyword weight="0.44454">Computer science</keyword><keyword weight="0.51271">Static analysis</keyword><keyword weight="0.51423">Software</keyword><keyword weight="0.52407">System call</keyword><keyword weight="0.47912">Obfuscation</keyword><keyword weight="0.56626">Intrusion detection system</keyword><keyword weight="0.5112">Executable</keyword></keywords><publisher>ACM</publisher><abstract>This paper presents DOME, a host-based technique for detecting several general classes of malicious code in software executables. DOME uses static analysis to identify the locations (virtual addresses) of system calls within the software executables, and then monitors the executables at runtime to verify that every observed system call is made from a location identified using static analysis. The power of this technique is that it is simple, practical, applicable to real-world software, and highly effective against injected, dynamically generated, and obfuscated malicious code.</abstract></paper>
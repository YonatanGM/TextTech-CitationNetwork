<paper id="1805570991"><title>Early-release fair scheduling</title><year>2000</year><authors><author org="Dept. of Comput. Sci., North Carolina, Univ., Chapel Hill, NC, USA" id="2113290946">J.H. Anderson</author><author org="Department of Computer Science, University of North Carolina, Chapel Hill NC#TAB#" id="2121640103">A. Srinivasan</author></authors><n_citation>181</n_citation><doc_type>Conference</doc_type><references><reference>2056830486</reference><reference>2104338317</reference></references><venue id="1203052477" type="C">Euromicro Conference on Real-Time Systems</venue><doi>10.1109/EMRTS.2000.853990</doi><keywords><keyword weight="0.60738">Fixed-priority pre-emptive scheduling</keyword><keyword weight="0.65702">Fair-share scheduling</keyword><keyword weight="0.5377">Scheduling (computing)</keyword><keyword weight="0.38611">Computer science</keyword><keyword weight="0.40553">Parallel computing</keyword><keyword weight="0.38886">Real-time computing</keyword><keyword weight="0.4395">Multiprocessing</keyword><keyword weight="0.63358">Rate-monotonic scheduling</keyword><keyword weight="0.619">Dynamic priority scheduling</keyword><keyword weight="0.61393">Earliest deadline first scheduling</keyword><keyword weight="0.6157">Round-robin scheduling</keyword><keyword weight="0.40151">Distributed computing</keyword></keywords><publisher>IEEE</publisher><abstract>Presents a variant of Pfair scheduling (S. Baruah et al., 1995, 1996), which we call early-release fair (ERfair) scheduling. Like conventional Pfair scheduling, ERfair scheduling algorithms can be applied to optimally schedule periodic tasks on a multiprocessor system in polynomial time. However, ERfair scheduling differs from Pfair scheduling in that it is work-conserving. As a result, average job response times may be much lower under ERfair scheduling than under Pfair scheduling, particularly in lightly loaded systems. In addition, run-time costs are lower under ERfair scheduling.</abstract></paper>
<paper id="1984909114"><title>A general-purpose algorithm for analyzing concurrent programs</title><year>1983</year><authors><author org="University Of California , Irvine" id="2113585066">Richard N. Taylor</author></authors><n_citation>271</n_citation><doc_type>Journal</doc_type><references><reference>1655990431</reference><reference>1968788085</reference><reference>1995109607</reference><reference>2040368451</reference><reference>2110425399</reference><reference>2152879290</reference></references><venue id="103482838" type="J">Communications of The ACM</venue><doi>10.1145/69586.69587</doi><keywords><keyword weight="0.49451">Synchronization</keyword><keyword weight="0.48178">Programming language</keyword><keyword weight="0.0">General purpose</keyword><keyword weight="0.47365">Computer science</keyword><keyword weight="0.53718">Static analysis</keyword><keyword weight="0.0">Parallel processing</keyword><keyword weight="0.44717">Algorithm</keyword><keyword weight="0.46839">Theoretical computer science</keyword><keyword weight="0.58596">Concurrent computing</keyword><keyword weight="0.48861">Mathematical logic</keyword></keywords><publisher>ACM</publisher><abstract>Developing and verifying concurrent programs presents several problems. A static analysis algorithm is presented here that addresses the following problems: how processes are synchronized, what determines when programs are run in parallel, and how errors are detected in the synchronization structure. Though the research focuses on Ada, the results can be applied to other concurrent programming languages such as CSP.</abstract></paper>
<paper id="1912713675"><title>Optimizing regular path expressions using graph schemas</title><year>1998</year><authors><author org="AT &amp; T Labs., Florham Park, NJ, USA" id="2989068932">M. Fernandez</author><author org="" id="1986159374">D. Suciu</author></authors><n_citation>236</n_citation><doc_type>Conference</doc_type><references><reference>187851124</reference><reference>1528249715</reference><reference>1535992660</reference><reference>1605802622</reference><reference>1908950999</reference><reference>1967062750</reference><reference>1969357318</reference><reference>1970629906</reference><reference>1971845537</reference><reference>1998084650</reference><reference>2012531809</reference><reference>2070553391</reference><reference>2095954648</reference><reference>2109660182</reference><reference>2112719612</reference><reference>2113397233</reference><reference>2113641191</reference><reference>2117849706</reference><reference>2124812961</reference><reference>2132063146</reference><reference>2135282325</reference><reference>2149532506</reference></references><venue id="1163988186" type="C">International Conference on Data Engineering</venue><doi>10.1109/ICDE.1998.655753</doi><keywords><keyword weight="0.52473">Graph theory</keyword><keyword weight="0.51241">Approximation algorithm</keyword><keyword weight="0.53543">Data structure</keyword><keyword weight="0.49503">Data modeling</keyword><keyword weight="0.59196">Query language</keyword><keyword weight="0.53921">Tree (graph theory)</keyword><keyword weight="0.45272">Computer science</keyword><keyword weight="0.71037">Path expression</keyword><keyword weight="0.47071">Theoretical computer science</keyword><keyword weight="0.51909">Rewriting</keyword><keyword weight="0.42736">Database</keyword></keywords><publisher>IEEE Computer Society</publisher><abstract>Query languages for data with irregular structure use regular path expressions for navigation. This feature is useful for querying data where parts of the structure is either unknown, unavailable to the user, or changes frequently. Naive execution of regular path expressions is inefficient however, because it ignores any structure in the data. We describe two optimization techniques for queries with regular path expressions. Both rely on graph schemas for specifying partial knowledge about the datau0027s structure. Query pruning uses this structure to restrict navigation to only a fragment of the data; we give an efficient algorithm for rewriting any regular path expression query into a pruned one. Query rewriting using state extents can eliminate or reduce navigation altogether; it is reminiscent of optimizing relational queries using indices. There may be several ways to optimize a query using state extents; we give a polynomial space algorithm that finds all such optimizations. For restricted forms of regular path expressions, the algorithm is provably efficient. We also give an efficient approximation algorithm that works on all regular path expressions.</abstract></paper>
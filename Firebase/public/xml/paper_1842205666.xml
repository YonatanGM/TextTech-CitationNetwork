<paper id="1842205666"><title>Nested Transactions in a Logical Language for Active Rules</title><year>1996</year><authors><author org="Universit채t Freiburg," id="2239188769">Bertram Lud채scher</author><author org="Universit채t Freiburg," id="2118015496">Wolfgang May</author><author org="Universit채t Freiburg," id="91862343">Georg Lausen</author></authors><n_citation>22</n_citation><doc_type>Conference</doc_type><references><reference>35271428</reference><reference>35767954</reference><reference>148128572</reference><reference>196899288</reference><reference>1494051470</reference><reference>1496528554</reference><reference>1497998981</reference><reference>1509153766</reference><reference>1514391877</reference><reference>1514432042</reference><reference>1524852452</reference><reference>1534136170</reference><reference>1548186255</reference><reference>1555797260</reference><reference>1561370784</reference><reference>1581060203</reference><reference>1585132271</reference><reference>1735593126</reference><reference>1768000531</reference><reference>1839937676</reference><reference>1843708379</reference><reference>1966276082</reference><reference>1968386702</reference><reference>1968513265</reference><reference>1971297231</reference><reference>1995080554</reference><reference>2008276941</reference><reference>2016580249</reference><reference>2017160649</reference><reference>2038726607</reference><reference>2042690606</reference><reference>2105592131</reference><reference>2117162183</reference><reference>2118391576</reference><reference>2129241924</reference><reference>2132745831</reference><reference>2137054551</reference><reference>2159808530</reference><reference>2170551989</reference></references><venue id="1180646617" type="C">Logic in Databases</venue><doi>10.1007/BFb0031742</doi><keywords><keyword weight="0.4483">Data mining</keyword><keyword weight="0.62998">Operational semantics</keyword><keyword weight="0.47213">Programming language</keyword><keyword weight="0.51583">Conceptual model</keyword><keyword weight="0.46434">Computer science</keyword><keyword weight="0.46349">Theoretical computer science</keyword><keyword weight="0.53267">Execution model</keyword><keyword weight="0.57425">Logic programming</keyword><keyword weight="0.56702">Datalog</keyword><keyword weight="0.54176">Active database</keyword><keyword weight="0.55261">Nested transaction</keyword><keyword weight="0.67407">Well-founded semantics</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>We present a hierarchically structured transaction-oriented concept for a rule-based active database system. In Report No.59 and Report No.78, we have proposed Statelog as a unified framework for active and deductive rules. Following the need for better structuring capabilities, we introduce procedures as a means to group semantically related rules and to encapsulate their behavior. In addition to executing elementary updates, procedures can be called, thereby defining (sub)transactions which may perform complex computations. A Statelog procedure is a set of ECA-style Datalog rules together with an import/export interface. System-immanent frame and procedure rules ensure both propagation of facts and processing of results of committed subtransactions. Thus, Statelog programs specify a nested transaction model which allows a much more structured and natural modeling of complex transactions than previous approaches. Two equivalent semantics for a Statelog program P are given: (i) a logic programming style semantics by a compilation into a logic program, and (ii) a model-theoretic Kripke-style semantics. While (ii) serves as a conceptual model of active rule behavior and allows to reason about properties of the specified transactions, (i) -- together with the appropriate execution model -- yields an operational semantics and can be used as an implementation of P.</abstract></paper>
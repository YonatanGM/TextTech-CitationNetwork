<paper id="1545270572"><title>Concurrency Control Theory for Deferred Materialized Views</title><year>1997</year><authors><author org="Columbia University" id="2099929122">Akira Kawaguchi</author><author org="Bell-Labs" id="2209150110">Daniel F. Lieuwen</author><author org="AT&amp;T Labs,#TAB#" id="112579409">Inderpal Singh Mumick</author><author org="Stanford, University" id="2308003564">Dallan Quass</author><author org="Columbia University" id="2116418223">Kenneth A. Ross</author></authors><n_citation>45</n_citation><doc_type>Conference</doc_type><references><reference>180056467</reference><reference>1497388414</reference><reference>1545155892</reference><reference>1556601737</reference><reference>1973382888</reference><reference>2006426459</reference><reference>2008907861</reference><reference>2012670464</reference><reference>2116476518</reference><reference>2118260817</reference><reference>2134600551</reference><reference>2163764339</reference><reference>2165456041</reference></references><venue id="1165285842" type="C">International Conference on Database Theory</venue><doi>10.1007/3-540-62222-5_53</doi><keywords><keyword weight="0.58895">Serializability</keyword><keyword weight="0.47903">Serialization</keyword><keyword weight="0.53362">Concurrency control</keyword><keyword weight="0.44671">Computer science</keyword><keyword weight="0.55738">Two-phase locking</keyword><keyword weight="0.44821">Deferred maintenance</keyword><keyword weight="0.53184">Database transaction</keyword><keyword weight="0.63567">Materialized view</keyword><keyword weight="0.43865">Database</keyword><keyword weight="0.40906">Speedup</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>We consider concurrency control problems that arise in the presence of materialized views. Consider a database system supporting materialized views to speed up queries. For a range of important applications (e.g. banking, billing, network managementransactions that access materialized views would like to get some consistency guarantees--if a transaction reads a base relation after an update, and then reads a materialized view derived from the base relation, it expects to see the effect of the base update on the materialized view. If a transaction reads two views, it expects that the two views reflect a single consistent database state. Such guarantees are not easy to obtain, as materialized views become inconsistent upon updates to base relations. Immediate maintenance reestablishes consistency within the transaction that updates the base relation, but this consistency comes at the cost of delaying update transactions. Deferred maintenance has been proposed to avoid penalizing update transactions by shifting maintenance into a different transaction (for example, into the transaction that reads the However, doing so causes a materialized view to become temporarily inconsistent with its definition. Consequently, transactions that read multiple materialized views, or that read a materialized view and also read and/or write base relations may execute in a non-serializable manner even when they are running under a strict two phase locking (2PL) protocol. We formalize the concurrency control problem in systems supporting materialized views. We develop a serializability theory based upon conflicts and serialization graphs in the presence of materialized views. Concurrency control algorithms based on this theory are being developed in the SWORD/Ode database system.z The work of Akira Kawaguchi and Kenneth A. Ross was performed while visiting ATu0026T Bell Laboratories, and was also partially supported by a grant from the ATu0026T Foundation, by a David and Lucile Packard Foundatio</abstract></paper>
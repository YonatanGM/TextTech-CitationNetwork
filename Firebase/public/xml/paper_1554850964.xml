<paper id="1554850964"><title>Verification Tools for Finite-State Concurrent Systems</title><year>1993</year><authors><author org="Carnegie-Mellon" id="2129477832">Edmund M. Clarke</author><author org="The Technion," id="1993734283">Orna Grumberg</author><author org="AT&amp;T Bell Lab.#TAB#" id="2154899043">David E. Long</author></authors><n_citation>232</n_citation><doc_type /><references><reference>185167655</reference><reference>1488858096</reference><reference>1490452953</reference><reference>1518764426</reference><reference>1530375987</reference><reference>1536783297</reference><reference>1540501475</reference><reference>1564947547</reference><reference>1578895382</reference><reference>1583165871</reference><reference>1593428110</reference><reference>1599313551</reference><reference>1602476740</reference><reference>1607877490</reference><reference>1655990431</reference><reference>1728798265</reference><reference>1753324106</reference><reference>1844032500</reference><reference>1885037678</reference><reference>1903679624</reference><reference>1967669950</reference><reference>1967686058</reference><reference>1970603830</reference><reference>1975657455</reference><reference>1992006255</reference><reference>2000138546</reference><reference>2000210358</reference><reference>2003227046</reference><reference>2004306067</reference><reference>2009965218</reference><reference>2011039300</reference><reference>2030224590</reference><reference>2030926579</reference><reference>2039812824</reference><reference>2041152728</reference><reference>2080267935</reference><reference>2080641824</reference><reference>2084910510</reference><reference>2090398333</reference><reference>2099120582</reference><reference>2105634893</reference><reference>2108016168</reference><reference>2108838086</reference><reference>2114092850</reference><reference>2117189826</reference><reference>2135453964</reference><reference>2144928994</reference><reference>2149479807</reference><reference>2150119568</reference><reference>2153439859</reference><reference>2154030608</reference><reference>2165108965</reference></references><venue id="" type="">A Decade of Concurrency, Reflections and Perspectives, REX School/Symposium</venue><doi>10.1007/3-540-58043-3_19</doi><keywords><keyword weight="0.0">Graph</keyword><keyword weight="0.60046">Functional verification</keyword><keyword weight="0.67491">Model checking</keyword><keyword weight="0.57842">Intelligent verification</keyword><keyword weight="0.47267">Computer science</keyword><keyword weight="0.58175">Binary decision diagram</keyword><keyword weight="0.0">Finite state</keyword><keyword weight="0.47782">Theoretical computer science</keyword><keyword weight="0.6349">Temporal logic</keyword><keyword weight="0.61161">High-level verification</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Temporal logic model checking is an automatic technique for verifying finite-state concurrent systems. Specifications are expressed in a propositional temporal logic, and the concurrent system is modeled as a state-transition graph. An efficient search procedure is used to determine whether or not the state-transition graph satisfies the specification. When the technique was first developed ten years ago, it was only possible to handle concurrent systems with a few thousand states. In the last few years, however, the size of the concurrent systems that can be handled has increased dramatically. By representing transition relations and sets of states implicitly using binary decision diagrams, it is now possible to check concurrent systems with more than 10120 states. In this paper we describe in detail how the new implementation works and give realistic examples to illustrate its power. We also discuss a number of directions for future research. The necessary background information on binary decision diagrams, temporal logic, and model checking has been included in order to make the exposition as self-contained as possible.</abstract></paper>
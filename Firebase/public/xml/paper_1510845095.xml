<paper id="1510845095"><title>Simple Ownership Types for Object Containment</title><year>2001</year><authors><author org="Utrecht University , Utrecht" id="2130450070">David G. Clarke</author><author org="Victoria University, Wellington" id="2103426042">James Noble</author><author org="University of New South Wales&lt;br /&gt;" id="1965051166">John Potter</author></authors><n_citation>109</n_citation><doc_type>Conference</doc_type><references><reference>1483872283</reference><reference>1491466960</reference><reference>1503818804</reference><reference>1540709996</reference><reference>1541430579</reference><reference>1544633123</reference><reference>1555946950</reference><reference>1999637392</reference><reference>2003868291</reference><reference>2006872422</reference><reference>2012755172</reference><reference>2014530617</reference><reference>2017274604</reference><reference>2020841721</reference><reference>2036719919</reference><reference>2046317364</reference><reference>2046387998</reference><reference>2049984112</reference><reference>2073407646</reference><reference>2077850509</reference><reference>2081388374</reference><reference>2101900462</reference><reference>2102440514</reference><reference>2106288115</reference><reference>2128445548</reference><reference>2136839747</reference><reference>2142103345</reference><reference>2160668778</reference><reference>2168822998</reference><reference>2295471304</reference></references><venue id="1177184315" type="C">European Conference on Object-Oriented Programming</venue><doi>10.1007/3-540-45337-7_4</doi><keywords><keyword weight="0.48466">Formal system</keyword><keyword weight="0.0">Graph</keyword><keyword weight="0.46257">Alias</keyword><keyword weight="0.44126">Programming language</keyword><keyword weight="0.51232">Object-oriented programming</keyword><keyword weight="0.44574">Computer science</keyword><keyword weight="0.4438">Theoretical computer science</keyword><keyword weight="0.45996">Invariant (mathematics)</keyword><keyword weight="0.49712">Soundness</keyword><keyword weight="0.47779">Dominator</keyword><keyword weight="0.38463">Containment</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Containment of objects is a natural concept that has been poorly supported in object-oriented programming languages. For a predefined set of ownership contexts, this paper presents a type system that enforces certain containment relationships for run-time objects. A fixed ordering relationship is presumed between the owners.The formalisation of ownership types has developed from our work with flexible alias protection together with an investigation of structural properties of object graphs based on dominator trees. Our general ownership type system permits fresh ownership contexts to be created at run-time. Here we present a simplified system in which the ownership contexts are predefined. This is powerful enough to express and enforce constraints about a systemu0027s high-level structure.Our formal system is presented in an imperative variant of the object calculus. We present type preservation and soundness results. Furthermore we highlight how these type theoretic results establish a containment invariant for objects, in which access to contained objects is only permitted via their owners. In effect, the predefined ownership ordering restricts the permissible inter-object reference structure.</abstract></paper>
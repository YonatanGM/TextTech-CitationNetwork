<paper id="1602573351"><title>Existential Types for Imperative Languages</title><year>2002</year><authors><author org="Cornell University;" id="2241310076">Dan Grossman</author></authors><n_citation>18</n_citation><doc_type>Conference</doc_type><references><reference>1490621049</reference><reference>1507902915</reference><reference>1825457006</reference><reference>1829244603</reference><reference>1971933951</reference><reference>1980939032</reference><reference>1998070736</reference><reference>2069107692</reference><reference>2104204098</reference><reference>2106348655</reference><reference>2114771706</reference><reference>2118227920</reference><reference>2131403402</reference><reference>2151156765</reference><reference>2169148161</reference><reference>2170800927</reference></references><venue id="1136861413" type="C">European Symposium on Programming</venue><doi>10.1007/3-540-45927-8_3</doi><keywords><keyword weight="0.44914">Programming language</keyword><keyword weight="0.53536">Formal language</keyword><keyword weight="0.47458">Existentialism</keyword><keyword weight="0.44438">Computer science</keyword><keyword weight="0.54402">Imperative programming</keyword><keyword weight="0.55888">Type safety</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We integrate existential types into a strongly typed C-like language. In particular, we show how a bad combination of existential types, mutation, and aliasing can cause a subtle violation of type safety. We explore two independent ways to strengthen the type system to restore safety. One restricts the mutation of existential packages. The other restricts the types of aliases of existential packages. We use our framework to explain why other languages with existential types are safe.</abstract></paper>
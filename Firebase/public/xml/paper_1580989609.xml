<paper id="1580989609"><title>Symbolic Model Checking and Constraint Logic Programming: a Cross-Fertilization</title><year>1994</year><authors><author org="Université Bordeaux I" id="1900853752">Marc-Michel Corsini</author><author org="Université Bordeaux I" id="2498220235">Antoine Rauzy</author></authors><n_citation>8</n_citation><doc_type>Conference</doc_type><references><reference>1503973138</reference><reference>1507151801</reference><reference>1568478782</reference><reference>1859526867</reference><reference>1986473353</reference><reference>1998132813</reference><reference>2027276583</reference><reference>2030224590</reference></references><venue id="1136861413" type="C">European Symposium on Programming</venue><doi>10.1007/3-540-57880-3_12</doi><keywords><keyword weight="0.6911">Constraint satisfaction</keyword><keyword weight="0.46213">Programming language</keyword><keyword weight="0.453">Computer science</keyword><keyword weight="0.70531">Constraint programming</keyword><keyword weight="0.46662">Theoretical computer science</keyword><keyword weight="0.67523">Concurrent constraint logic programming</keyword><keyword weight="0.56196">Symbolic programming</keyword><keyword weight="0.55041">Concolic testing</keyword><keyword weight="0.60542">Logic programming</keyword><keyword weight="0.71316">Constraint logic programming</keyword><keyword weight="0.60526">Satisfiability modulo theories</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>In this paper, we present the constraint language Toupie which is a finite domain μ-calculus interpreter that uses extended decision diagrams to represent relations and formulae. “Classical” constraint logic programming languages over finite domains (CLP(FD)) are designed to find one solution to a constraint problem, eventually the best one according to a given criterion. In Toupie, constraints are used to characterize existing relationships between variables. We advocate the use of this paradigm to model and solve efficiently difficult constraint problems that are not tractable with CLP(FD) languages.</abstract></paper>
<paper id="1555037657"><title>An Automatic Program Generator for Multi-Level Specialization</title><year>1997</year><authors><author org="DIKU, Department of Computer Science, University of Copenhagen, Universitetsparken 1, DK-2100 Copenhagen, Denmark. E-mail: [email protected]#TAB#" id="1985140975">Robert Glück</author><author org="Department of Mathematics and Physics, Royal Veterinary and Agricultural University, Thorvaldsensvej 40, DK-1871 Frederiksberg C, Denmark. E-mail: jesper@dina.kvl.dk#TAB#" id="2304132049">Jesper Jørgensen</author></authors><n_citation>49</n_citation><doc_type /><references><reference>48502565</reference><reference>1480878783</reference><reference>1508319048</reference><reference>1514680630</reference><reference>1556604985</reference><reference>1563764837</reference><reference>1566968514</reference><reference>1572530995</reference><reference>1929307865</reference><reference>1983961326</reference><reference>1988177568</reference><reference>1990347915</reference><reference>1996081324</reference><reference>2009674917</reference><reference>2029867601</reference><reference>2044549124</reference><reference>2057731509</reference><reference>2058824372</reference><reference>2073005537</reference><reference>2073378225</reference><reference>2074268752</reference><reference>2079958455</reference><reference>2084099544</reference><reference>2090036644</reference><reference>2095460218</reference><reference>2096314727</reference><reference>2098780004</reference><reference>2106445678</reference><reference>2111443557</reference><reference>2121569569</reference><reference>2124438325</reference><reference>2125977928</reference><reference>2142174207</reference><reference>2155961084</reference><reference>2168866950</reference></references><venue id="" type="">Lisp and Symbolic Computation archive</venue><doi>10.1023/A:1007763000430</doi><keywords><keyword weight="0.4006">Generation time</keyword><keyword weight="0.46973">Programming language</keyword><keyword weight="0.0">Binding time analysis</keyword><keyword weight="0.58503">Program transformation</keyword><keyword weight="0.0">Program specialization</keyword><keyword weight="0.50343">Functional programming</keyword><keyword weight="0.66419">Partial evaluation</keyword><keyword weight="0.46779">Computer science</keyword><keyword weight="0.4649">Theoretical computer science</keyword><keyword weight="0.47658">Computation</keyword></keywords><publisher>Kluwer Academic Publishers</publisher><abstract>Program specialization can divide a computation into several computation stages. This paper investigates the theoretical limitations and practical problems of standard specialization tools, presents multi-level specialization, and demonstrates that, in combination with the cogen approach, it is far more practical than previously supposed. The program generator which we designed and implemented for a higher-order functional language converts programs into very compact multi-level generating extensions that guarantee fast successive specialization. Experimental results show a remarkable reduction of generation time and generator size compared to previous attempts of multi-level specialization by self-application. Our approach to multi-level specialization seems well-suited for applications where generation time and program size are critical.</abstract></paper>
<paper id="1536254100"><title>A Note on Compositional Refinement</title><year>1992</year><authors><author org="UNIVERSITY OF TWENTE" id="2104884964">J. Zwiers</author><author org="Eindhoven University of Technology" id="2166073835">J.A.A. Coenen</author><author org="Christian-Albrechts-Universität zu Kiel," id="2809278704">W.P. de Roever</author></authors><n_citation>10</n_citation><doc_type /><references><reference>1489667464</reference><reference>1501421016</reference><reference>1511850051</reference><reference>1970495662</reference><reference>2005130403</reference><reference>2074797015</reference><reference>2131053137</reference><reference>2137865376</reference><reference>2144579789</reference><reference>2152198540</reference><reference>2163008980</reference></references><venue id="" type="">Refine</venue><doi>10.1007/978-1-4471-3550-0_18</doi><keywords><keyword weight="0.45192">Programming language</keyword><keyword weight="0.43998">Computer science</keyword><keyword weight="0.59803">Correctness</keyword><keyword weight="0.0">Syntactic structure</keyword></keywords><publisher>Springer, London</publisher><abstract>Implementing a (concurrent) program P often requires changing the syntactic structure of P at various levels. We argue and illustrate that in such a situation a natural framework for implementation correctness requires a more general notion of refinement than that of [HHS87], a notion which involves the introduction of separate refinement relations for P’s various abstract components. An outline is given of a formal framework for proving implementation correctness that involves these notions.</abstract></paper>
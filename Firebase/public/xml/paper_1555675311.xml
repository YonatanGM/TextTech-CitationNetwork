<paper id="1555675311"><title>Argonaute: graphical description, semantics and verification of reactive systems by using a process algebra</title><year>1989</year><authors><author org="LGI, IMAG-CAMPUS" id="2790591678">Florence Maraninchi</author></authors><n_citation>30</n_citation><doc_type>Conference</doc_type><references><reference>196640945</reference><reference>2064650227</reference><reference>2099529102</reference><reference>2103098504</reference><reference>2137865376</reference></references><venue id="1162450063" type="C">Computer Aided Verification</venue><doi>10.1007/3-540-52148-8_4</doi><keywords><keyword weight="0.46934">Programming language</keyword><keyword weight="0.44662">Computer science</keyword><keyword weight="0.47513">Automaton</keyword><keyword weight="0.45903">Theoretical computer science</keyword><keyword weight="0.47521">Automation</keyword><keyword weight="0.48465">Formalism (philosophy)</keyword><keyword weight="0.54459">Esterel</keyword><keyword weight="0.53214">Temporal logic</keyword><keyword weight="0.53689">Reactive system</keyword><keyword weight="0.51939">Process calculus</keyword><keyword weight="0.49784">Semantics</keyword><keyword weight="0.43731">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The Argonaute system is specifically designed to describe, specify and verify reactive systems such as communication protocols, real-time applications, man-machine interfaces, ... It is based upon the Argos graphical language, whose syntax relies on the Higraphs formalism by D. Harel [HAR88], and whose semantics is given by using a process algebra. Automata form the basic notion of the language, and hierarchical or parallel decompositions are given by using operators of the algebra. The complete formalization of the language inherits notions from both classical process algebras such as ccs [MIL80], and existing programming languages used in the same field such as Esterel [BG88] or the Statecharts formalism [HAR87]. Concerning complex system description, Argos allows to describe intrinsic states directly — with the basic automation notion — and only them: connections between components need no extra-state. The Argonaute system allows to describe reactive systems graphically, to specify properties by means of temporal logic formulas, to produce a model on which logic formulas can be evaluated and to simulate an execution of the system described, by using the external graphical form to show evolutions. We present the global structure and functionalities of the Argonaute system, and the theoretical basis of the Argos language.</abstract></paper>
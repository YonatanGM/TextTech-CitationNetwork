<paper id="1984877584"><title>Analysis and benchmarking of two parallel sorting algorithms: hyperquicksort and quickmerge</title><year>1989</year><authors><author org="Parallel Computing Laboratory, Department of Computer Science, University of New Hampshire, Durham, U.S.A." id="2623147560">M. J. Quinn</author></authors><n_citation>18</n_citation><doc_type>Journal</doc_type><references><reference>2029342163</reference><reference>2040046786</reference><reference>2073860632</reference></references><venue id="125499977" type="J">Bit Numerical Mathematics</venue><doi>10.1007/BF01952679</doi><keywords><keyword weight="0.0">Algorithm complexity</keyword><keyword weight="0.44516">Computer science</keyword><keyword weight="0.46467">Parallel computing</keyword><keyword weight="0.0">Parallel processing</keyword><keyword weight="0.45205">Algorithm</keyword><keyword weight="0.49777">Multiprocessing</keyword><keyword weight="0.4546">Theoretical computer science</keyword><keyword weight="0.52736">Communication complexity</keyword><keyword weight="0.0">Parallel sorting</keyword><keyword weight="0.50604">Hypercube</keyword><keyword weight="0.55558">Sorting algorithm</keyword><keyword weight="0.48315">Benchmarking</keyword></keywords><publisher>BIT Computer Science and Numerical Mathematics</publisher><abstract>We analyze the computational and communication complexity of four sorting algorithms as implemented on a hypercube multicomputer: two variants of hyperquicksort and two variants of quickmerge. Based upon this analysis, machine-specific parameters can be used to determine when each algorithm requires less communication time than the others. We present benchmark results of the four algorithms on a 64-processor NCube/7. The benchmarking provides experimental evidence that hyperquicksort divides the values to be sorted more evenly among the processors than quickmerge. Because it does a better job balancing work between processors, hyperquicksort proves to be uniformly superior to quickmerge.</abstract></paper>
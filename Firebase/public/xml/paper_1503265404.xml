<paper id="1503265404"><title>Generation of Efficient Interprocedural Analyzers with PAG</title><year>1995</year><authors><author org="Universität des Saarlandes" id="2123828657">Martin Alt</author><author org="Universität des Saarlandes" id="2135218977">Florian Martin</author></authors><n_citation>69</n_citation><doc_type>Conference</doc_type><references><reference>1542105498</reference><reference>1593165330</reference><reference>1594085018</reference><reference>1994660988</reference><reference>2014764321</reference><reference>2022363576</reference><reference>2034579607</reference><reference>2036157748</reference><reference>2043100293</reference><reference>2045818721</reference><reference>2053152889</reference><reference>2072350000</reference><reference>2074674105</reference><reference>2080573945</reference><reference>2084875723</reference><reference>2102890180</reference><reference>2109027606</reference><reference>2122107008</reference><reference>2124153277</reference><reference>2143659699</reference><reference>2421851683</reference></references><venue id="1137552346" type="C">Static Analysis Symposium</venue><doi>10.1007/3-540-60360-3_31</doi><keywords><keyword weight="0.47461">Programming language</keyword><keyword weight="0.49504">Global optimization</keyword><keyword weight="0.53366">Abstract interpretation</keyword><keyword weight="0.46405">Computer science</keyword><keyword weight="0.46964">Parallel computing</keyword><keyword weight="0.55625">Data-flow analysis</keyword><keyword weight="0.59682">Compiler</keyword><keyword weight="0.64056">Compiler construction</keyword><keyword weight="0.45551">Spectrum analyzer</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>To produce high quality code, modern compilers use global optimization algorithms based on abstract interpretation. These algorithms are rather complex; their implementation is therefore a non-trivial task and error-prone. However, since they are based on a common theory, they have large similar parts. We conclude that analyzer writing better should be replaced with analyzer generation.</abstract></paper>
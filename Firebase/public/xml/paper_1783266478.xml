<paper id="1783266478"><title>On the Common Support of Workflow Type and Instance Changes under Correctness Constraints</title><year>2003</year><authors><author org="University of Ulm" id="2124900482">Manfred Reichert</author><author org="University of Ulm" id="2048013632">Stefanie Rinderle</author><author org="University of Ulm" id="153700510">Peter Dadam</author></authors><n_citation>63</n_citation><doc_type>Journal</doc_type><references><reference>1504210293</reference><reference>1521473511</reference><reference>1550942588</reference><reference>1570265525</reference><reference>2005083223</reference><reference>2027236907</reference><reference>2062756186</reference><reference>2085583673</reference><reference>2097583309</reference><reference>2099210377</reference><reference>2113457143</reference><reference>2164507889</reference><reference>2178686891</reference><reference>2913036292</reference></references><venue id="106296714" type="J">Lecture Notes in Computer Science</venue><doi>10.1007/978-3-540-39964-3_26</doi><keywords><keyword weight="0.45283">Adaptability</keyword><keyword weight="0.48258">Business process</keyword><keyword weight="0.45954">Computer science</keyword><keyword weight="0.45601">Collaborative software</keyword><keyword weight="0.51933">Correctness</keyword><keyword weight="0.42008">Integrated management</keyword><keyword weight="0.41321">Schema (psychology)</keyword><keyword weight="0.44655">Completeness (statistics)</keyword><keyword weight="0.49065">Workflow</keyword><keyword weight="0.45933">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The capability to rapidly adapt in-progress workflows (WF) is an essential requirement for any workflow system. Adaptations may concern single WF instances or a WF type as a whole. Especially for long-running business processes it is indispensable to propagate WF type changes to in-progress WF instances as well. Very challenging in this context is to correctly adapt a (potentially large) collection of WF instances, which may be in different states and to which various ad-hoc changes may have been previously applied. This paper presents a generic framework for the common support of both WF type and WF instance changes. We establish fundamental correctness principles, position formal theorems, and show how WF instances can be automatically and efficiently migrated to a modified WF schema. The adequate treatment of conflicting WF type and WF instance changes adds to the overall completeness of our approach. By offering more flexibility and adaptability the so promising WF technology will finally deliver.</abstract></paper>
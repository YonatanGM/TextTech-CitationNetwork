<paper id="1908950999"><title>Adding Structure to Unstructured Data</title><year>1997</year><authors><author org="University of Pennsylvania" id="2020138198">Peter Buneman</author><author org="University of Pennsylvania" id="2097328450">Susan B. Davidson</author><author org="AT&amp;T Labs — research" id="2137694142">Mary F. Fernandez</author><author org="AT&amp;T Labs — research" id="1986159374">Dan Suciu</author></authors><n_citation>420</n_citation><doc_type>Conference</doc_type><references><reference>1535992660</reference><reference>1565065452</reference><reference>1573331135</reference><reference>1593666219</reference><reference>1605802622</reference><reference>1971845537</reference><reference>1997520998</reference><reference>2068361557</reference><reference>2098817244</reference><reference>2109660182</reference><reference>2113397233</reference><reference>2117849706</reference><reference>2149532506</reference></references><venue id="1165285842" type="C">International Conference on Database Theory</venue><doi>10.1007/3-540-62222-5_55</doi><keywords><keyword weight="0.49307">Procedural programming</keyword><keyword weight="0.57677">Graph database</keyword><keyword weight="0.45821">Programming language</keyword><keyword weight="0.47299">Structured English</keyword><keyword weight="0.45427">Computer science</keyword><keyword weight="0.50236">Data control language</keyword><keyword weight="0.49894">Complex data type</keyword><keyword weight="0.5645">Unstructured data</keyword><keyword weight="0.47008">Theoretical computer science</keyword><keyword weight="0.51973">Data manipulation language</keyword><keyword weight="0.50703">Schema (psychology)</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>We develop a new schema for unstructured data. Traditional schemas resemble the type systems of programming languages. For unstructured data, however, the underlying type may be much less constrained and hence an alternative way of expressing constraints on the data is needed. Here, we propose that both data and schema be represented as edge-labeled graphs. We develop notions of conformance between a graph database and a graph schema and show that there is a natural and efficiently computable ordering on graph schemas. We then examine certain subclasses of schemas and show that schemas are closed under query applications. Finally, we discuss how they may be used in query decomposition and optimization.</abstract></paper>
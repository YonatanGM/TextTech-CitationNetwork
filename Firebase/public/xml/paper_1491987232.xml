<paper id="1491987232"><title>A type theoretic framework for formal metamodelling</title><year>2004</year><authors><author org="Dept. of Computer Science, King's College London, Strand, London#TAB#" id="2601012329">Iman Poernomo</author></authors><n_citation>19</n_citation><doc_type>Journal</doc_type><references><reference>1491165055</reference><reference>1544633123</reference><reference>1544646281</reference><reference>1546467530</reference><reference>1905292284</reference><reference>2001961486</reference><reference>2105528288</reference><reference>2113486906</reference><reference>2123632187</reference><reference>2123727486</reference><reference>2128057448</reference><reference>2128411489</reference><reference>2135625856</reference></references><venue id="106296714" type="J">Lecture Notes in Computer Science</venue><doi>10.1007/11786160_15</doi><keywords><keyword weight="0.46055">Programming language</keyword><keyword weight="0.48603">Object-oriented programming</keyword><keyword weight="0.45393">Computer science</keyword><keyword weight="0.48266">Type theory</keyword><keyword weight="0.52158">Formal specification</keyword><keyword weight="0.44828">Artificial intelligence</keyword><keyword weight="0.48867">Software architecture</keyword><keyword weight="0.51145">Formal methods</keyword><keyword weight="0.48915">Component-based software engineering</keyword><keyword weight="0.55689">Object Constraint Language</keyword><keyword weight="0.61672">Metamodeling</keyword><keyword weight="0.44342">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The Object Managment Groupu0027s Meta-Object Facility (MOF) [19] is a semiformal approach to writing models and metamodels (models of models). It works according to a model/metamodel hierarchy, where software is specified by models, models are defined as instances of metamodels, which are, in turn, defined as instances of the MOF meta-metamodel. By writing models and metamodels in a common framework, the MOF meta-metamodel, it is easier to perform systematic model/metamodel interchange and integration. However, the approach is only useful if metamodels are correctly specified â€“ a single error in a metamodel specification will result in the propagation of errors throughout instantiating models and final model implementations. An important open question is how to develop provably correct :[116],"paper applies constructive type theory to formalize the MOF metamodelling approach. The benefit of the formalization is that correct typing corresponds to provably correct metamodels and models. Because the MOF is the central technology behind the Model Driven Architecture initiative [18], our work is intended to lay a formal foundation for making Model Driven Architecture more trustworthy.</abstract></paper>
<paper id="1587127227"><title>Graph Grammars and Logic Programming</title><year>1990</year><authors><author org="Universita di Pisa" id="2024647070">Andrea Corradini</author><author org="Universita di Pisa" id="1970207042">Ugo Montanari</author><author org="Universita di Pisa" id="2252207586">Francesca Rossi</author><author org="Technische University Berlin" id="692045707">Hartmut Ehrig</author><author org="Technische University Berlin" id="2111814098">Michael LÃ¶we</author></authors><n_citation>16</n_citation><doc_type>Conference</doc_type><references><reference>36847213</reference><reference>116566670</reference><reference>1481536764</reference><reference>1534696515</reference><reference>1539163926</reference><reference>1546418577</reference><reference>1585801412</reference><reference>1997135344</reference><reference>2016113382</reference><reference>2089111669</reference><reference>2092445638</reference><reference>2120995755</reference><reference>2130238476</reference><reference>2231521611</reference><reference>2536118580</reference><reference>2911877972</reference></references><venue id="2756339047" type="C">International Workshop on Graph-Grammars and Their Application to Computer Science</venue><doi>10.1007/BFb0017392</doi><keywords><keyword weight="0.62577">Tree-adjoining grammar</keyword><keyword weight="0.623">Context-sensitive grammar</keyword><keyword weight="0.46663">Programming language</keyword><keyword weight="0.45429">Computer science</keyword><keyword weight="0.59377">Constraint graph</keyword><keyword weight="0.65881">Graph rewriting</keyword><keyword weight="0.63856">Logic programming</keyword><keyword weight="0.60481">Clique-width</keyword><keyword weight="0.61762">Abstract semantic graph</keyword><keyword weight="0.62594">Graph (abstract data type)</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>In this paper we investigate the relationship between the algebraic definition of graph grammars and logic programming. In particular, we show that the operational semantics of any logic program can be faithfully simulated by a particular context-free hypergraph grammar. In the process of doing that, we consider the issue of representing terms, formulas, and clauses as particular graphs or graph productions, by first evaluating the approaches already proposed for Term Rewriting Systems (TRS), and then by giving an original extension of those approaches, to be able to deal with the unique features of logic programming. Actually, not only does our representation of definite clauses by graph productions allow us to deal correctly with logical unification, but also it overcomes some of the problems encountered by other approaches for representing TRSu0027s as graph grammars. The main result of the paper states the soundness and completeness of the representation of clauses by productions, and this correspondence is extended to entire computations, showing how a context-free grammar (over a suitable category of graphs) can be associated with a logic program. The converse holds as well, i.e. given any context-free graph grammar (over that category), a logic program can be extracted from it.</abstract></paper>
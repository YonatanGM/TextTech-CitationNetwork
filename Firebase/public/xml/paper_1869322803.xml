<paper id="1869322803"><title>Constraint Programming and Database Query Languages</title><year>1994</year><authors><author org="Brown University" id="2035018311">Paris C. Kanellakis</author><author org="Brown University" id="2106673240">Dina Q. Goldin</author></authors><n_citation>88</n_citation><doc_type>Conference</doc_type><references><reference>5849942</reference><reference>15008848</reference><reference>25426087</reference><reference>65937437</reference><reference>116178176</reference><reference>1481001647</reference><reference>1490224653</reference><reference>1495387788</reference><reference>1498119955</reference><reference>1547414429</reference><reference>1591469816</reference><reference>1596887828</reference><reference>1779898155</reference><reference>1984890936</reference><reference>1986832527</reference><reference>1988095917</reference><reference>1988153384</reference><reference>1989783863</reference><reference>1990748731</reference><reference>1991813962</reference><reference>1994101999</reference><reference>1996240825</reference><reference>1999320791</reference><reference>2001255903</reference><reference>2004091282</reference><reference>2005314985</reference><reference>2021592352</reference><reference>2028864278</reference><reference>2035855976</reference><reference>2038247515</reference><reference>2042690606</reference><reference>2046615742</reference><reference>2046778764</reference><reference>2059144726</reference><reference>2066572564</reference><reference>2067573922</reference><reference>2071098839</reference><reference>2071859297</reference><reference>2072755230</reference><reference>2074429597</reference><reference>2075610180</reference><reference>2078404830</reference><reference>2083105191</reference><reference>2084202433</reference><reference>2088094394</reference><reference>2091631741</reference><reference>2092570032</reference><reference>2111313539</reference><reference>2114883263</reference><reference>2119456262</reference><reference>2132233302</reference><reference>2135432705</reference><reference>2142753649</reference><reference>2159808530</reference><reference>2161694911</reference><reference>2165467455</reference><reference>2295487311</reference><reference>2901126071</reference><reference>2901608006</reference></references><venue id="2756067413" type="C">International Conference on Theoretical Aspects of Computer Software</venue><doi>10.1007/3-540-57887-0_92</doi><keywords><keyword weight="0.62617">Codd's theorem</keyword><keyword weight="0.62668">Query optimization</keyword><keyword weight="0.6377">Fifth-generation programming language</keyword><keyword weight="0.62094">Data structure</keyword><keyword weight="0.66815">Query language</keyword><keyword weight="0.4748">Programming language</keyword><keyword weight="0.46511">Computer science</keyword><keyword weight="0.63036">Constraint programming</keyword><keyword weight="0.47455">Theoretical computer science</keyword><keyword weight="0.62084">Declarative programming</keyword><keyword weight="0.6244">Relational model</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The declarative programming paradigms used in constraint languages can lead to powerful extensions of Coddu0027u0027s relational data model. The development of constraint database query languages from logical database query languages has many similarities with the development of constraint logic programming from logic programming, but with the additional requirements of data efficient, set-at-a-time, and bottom-up evaluation. In this overview of constraint query languages (CQLs) we first present the framework of [KKR]. The principal idea is that: ``the k-tuple (or record) data type can be generalized by a conjunction of quantifier-free constraints over k variablesu0027u0027u0027u0027. The generalization must preserve various language properties of the relational data model, e.g., the calculus/algebra equivalence, and have time complexity polynomial in the size of the data. We next present an algebra for dense order constraints that is simpler to evaluate than the calculus described in [KKR], and we sharpen some of the related data complexity bounds. We note that CQLs are applicable to spatial databases. This is because these languages have ``spatial point setu0027u0027u0027u0027 as the semantics of their record data type and because existing multi-dimensional searching data structures can support I/O efficient access to sets of records. Finally, we observe that CQLs can be augmented with complex object data types, aggregate operations, and null-values, just like the relational data model. P. C. Kanellakis, G. M. Kuper, P. Z. Revesz, ``Constraint Query Languagesu0027u0027u0027u0027, Proc. 9th ACM PODS, 1990, pp. 299-313. Full version available as Brown Univ. Tech. Rep. CS-92-50; to appear in JCSS.</abstract></paper>
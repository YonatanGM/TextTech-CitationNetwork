<paper id="1485956171"><title>Reasoning with Aggregation Constraints</title><year>1996</year><authors><author org="AT&amp;T Bell Lab.#TAB#" id="2308649827">Alon Y. Levy</author><author org="AT&amp;T Bell Lab.#TAB#" id="112579409">Inderpal Singh Mumick</author></authors><n_citation>21</n_citation><doc_type>Conference</doc_type><references><reference>1538786304</reference><reference>1596887828</reference><reference>1761301028</reference><reference>1825341804</reference><reference>1976392306</reference><reference>1988504473</reference><reference>2008116177</reference><reference>2066572564</reference><reference>2087290458</reference><reference>2094806969</reference><reference>2096061310</reference><reference>2102387332</reference><reference>2136195851</reference><reference>2144829796</reference><reference>2160967997</reference><reference>2164219265</reference><reference>2165674271</reference></references><venue id="1132593990" type="C">Extending Database Technology</venue><doi>10.1007/BFb0014176</doi><keywords><keyword weight="0.51889">SQL</keyword><keyword weight="0.5704">Query optimization</keyword><keyword weight="0.45831">Data mining</keyword><keyword weight="0.49692">Disjunction introduction</keyword><keyword weight="0.54026">Inference</keyword><keyword weight="0.46416">Computer science</keyword><keyword weight="0.57996">Constraint programming</keyword><keyword weight="0.46887">Theoretical computer science</keyword><keyword weight="0.57202">Opportunistic reasoning</keyword><keyword weight="0.60148">Reasoning system</keyword><keyword weight="0.50818">Rule of inference</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Aggregation queries are becoming increasingly common as databases continue to grow and provide parallel execution engines to enable complex queries over larger and larger amounts of data. Consequently, optimization of aggregation queries is becoming very important. In this paper we present a framework for reasoning with constraints arising from the use of aggregations. The framework introduces a constraint language, three types of inference rules to derive constraints that must hold given a set of aggregations and constraints in the query, and a sound and tractable inference procedure. The constraint language and inference procedure can be used by any system that deals with aggregations â€” be it constraint programming, databases, or global information systems. However, the prime application of aggregation reasoning is in database query optimizers to optimize SQL (or object-SQL) queries with grouping and aggregation. Our framework allows aggregation reasoning to be incorporated into an optimizer in a modular fashion, and we illustrate this through a detailed example.</abstract></paper>
<paper id="1966207486"><title>Improved algorithms for distributed resource allocation</title><year>1988</year><authors><author org="School of Information and Computer Science, Georgia Institute of Technology, Atlanta, GA#TAB#" id="2974627050">Eugene Styer</author><author org="School of Information and Computer Science, Georgia Institute of Technology, Atlanta, GA#TAB#" id="2309813963">Gary L. Peterson</author></authors><n_citation>48</n_citation><doc_type>Conference</doc_type><references><reference>1590859087</reference><reference>1971153585</reference><reference>1985091167</reference><reference>2020447185</reference><reference>2047902293</reference><reference>2055454967</reference><reference>2057870640</reference></references><venue id="1140070953" type="C">Principles of Distributed Computing</venue><doi>10.1145/62546.62567</doi><keywords><keyword weight="0.53244">Permission</keyword><keyword weight="0.47447">Max-min fairness</keyword><keyword weight="0.44423">Computer science</keyword><keyword weight="0.50335">Copying</keyword><keyword weight="0.43098">Algorithm</keyword><keyword weight="0.4403">Theoretical computer science</keyword><keyword weight="0.56009">Distributed algorithm</keyword><keyword weight="0.49487">Resource allocation</keyword><keyword weight="0.4616">Notice</keyword><keyword weight="0.53371">Dining philosophers problem</keyword><keyword weight="0.47397">Information and Computer Science</keyword></keywords><publisher>ACM</publisher><abstract>Eugene St yer Gary L. Peterson School of Information and Computer Science Georgia Institute of Technology Atlanta, Ga. 30332 The problem of assigning resources to processes in a distributed system using only 10~81 communication is considered. The problem is a generalized form of Dining Philosophers as given by Lynch [S] and also considered by Chandy and Misra [2]. Those solutions, however, allowed a process to wait for relatively distant processes, and also to wait many times for the same process. Our algorithms, based in part on Lynch’s, have improved locality. That is, a process’s waiting time is a small function of the number and speed of nearby processes. The first algorithm prevents a process from being delayed by processes that are far away in the network. A process may delay another if its distance away is at most logarithmic in the number of colors used to edge-color the graph representing the network. (The previous algorithms are linear in edge-color.) A second algorithm restricts the neighboring processes so that they cannot repeatedly acquire and relesse resources ahead of other processes, each time causing an additional delay. The maximum waiting time is polynomially bounded by the number of processes within a distance limited by the number of colors. (As opposed to an exponential bound for the previous solutions.) The algorithms can be combined to give an overall improved algorithm. Much of the analysis of the algorithms is non-trivial. Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission.</abstract></paper>
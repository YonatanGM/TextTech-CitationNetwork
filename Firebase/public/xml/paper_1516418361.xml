<paper id="1516418361"><title>Deriving polymorphic type dependencies for logic programs using multiple incarnations of prop</title><year>1994</year><authors><author org="Ben-Gurion University" id="2084730817">Michael Codish</author><author org="K. U.Leuven" id="713720536">Bart Demoen</author></authors><n_citation>48</n_citation><doc_type>Conference</doc_type><references><reference>42890986</reference><reference>65123984</reference><reference>130711549</reference><reference>167307437</reference><reference>178958631</reference><reference>185683443</reference><reference>1502359129</reference><reference>1517292757</reference><reference>1544565902</reference><reference>1556018967</reference><reference>1579672261</reference><reference>1589787847</reference><reference>1966955252</reference><reference>1983385612</reference><reference>1987962669</reference><reference>2006668087</reference><reference>2043100293</reference><reference>2043827880</reference><reference>2059656088</reference><reference>2110916215</reference><reference>2150440003</reference></references><venue id="1137552346" type="C">Static Analysis Symposium</venue><doi>10.1007/3-540-58485-4_47</doi><keywords><keyword weight="0.0">Logic program</keyword><keyword weight="0.4502">Computer science</keyword><keyword weight="0.46764">Theoretical computer science</keyword><keyword weight="0.55312">Boolean algebra (structure)</keyword><keyword weight="0.53601">Propositional formula</keyword><keyword weight="0.4976">Universal algebra</keyword><keyword weight="0.45931">Semantics</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>This paper illustrates the application of abstract compilation using multiple incarnations of the domain Prop in deriving type dependencies for logic programs. We illustrate how dependencies can be derived in the presence of both monomorphic and polymorphic type information. Type dependencies generalize the recently proposed notion of directional types as well as the more common notion of groundness dependencies. Directional types have proven useful in a number of applications such as in proving termination. These applications, however, are based on type declarations. The main contribution of this paper is in the simplicity in which non-trivial type dependencies are inferred using abstract compilation and by associating each type with an incarnation of Prop. We illustrate the use of a semantics for open logic programs in maintaining space efficient analyses. Time efficiency is also maintained due to approximation of the type domain in a boolean lattice calling on results of universal algebra.</abstract></paper>
<paper id="1974190112"><title>A framework for defining logics</title><year>1993</year><authors><author org="" id="2147215243">Robert Harper</author><author org="" id="258792036">Furio Honsell</author><author org="" id="2076549375">Gordon Plotkin</author></authors><n_citation>942</n_citation><doc_type>Conference</doc_type><references><reference>1487166760</reference><reference>1829244603</reference><reference>1867436870</reference><reference>1986402635</reference><reference>1996404651</reference><reference>2010273585</reference><reference>2031307565</reference><reference>2047063760</reference><reference>2070577487</reference><reference>2088735483</reference><reference>2100738443</reference><reference>2114705282</reference><reference>2115610240</reference><reference>2128057448</reference><reference>2147482344</reference><reference>2178257282</reference></references><venue id="1150208541" type="C">Foundations of Computer Science</venue><doi>10.1145/138027.138060</doi><keywords><keyword weight="0.55486">Twelf</keyword><keyword weight="0.42465">Discrete mathematics</keyword><keyword weight="0.41548">Combinatorics</keyword><keyword weight="0.5309">Typed lambda calculus</keyword><keyword weight="0.43188">Computer science</keyword><keyword weight="0.52983">Calculus of constructions</keyword><keyword weight="0.57587">Mathematical proof</keyword><keyword weight="0.55048">Dependent type</keyword><keyword weight="0.56914">Higher-order abstract syntax</keyword><keyword weight="0.56997">Logical framework</keyword><keyword weight="0.63992">Proof assistant</keyword></keywords><publisher>ACM</publisher><abstract>The Edinburgh Logical Framework (LF) provides a means to define (or present) logics. It is based on a general treatment of syntax, rules, and proofs by means of a typed λ-calculus with dependent types. Syntax is treated in a style similar to, but more general than, Martin-Lo¨fu0027s system of arities. The treatment of rules and proofs focuses on his notion of a judgment . Logics are represented in LF via a new principle, the judgments as types principle, whereby each judgment is identified with the type of its proofs. This allows for a smooth treatment of discharge and variable occurence conditions and leads to a uniform treatment of rules and proofs whereby rules are viewed as proofs of higher-order judgments and proof checking is reduced to type checking. The practical benefit of our treatment of formal systems is that logic-independent tools, such as proof editors and proof checkers, can be constructed.</abstract></paper>
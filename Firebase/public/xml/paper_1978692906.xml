<paper id="1978692906"><title>Type inference in the presence of overloading, subtyping and recursive types</title><year>1992</year><authors><author org="" id="2656742573">Stefan Kaes</author></authors><n_citation>59</n_citation><doc_type>Conference</doc_type><references><reference>1549804464</reference><reference>1554432400</reference><reference>1562611359</reference><reference>1703087989</reference><reference>1783314273</reference><reference>1968889995</reference><reference>1969093922</reference><reference>1973576343</reference><reference>2034609032</reference><reference>2059895047</reference><reference>2121038016</reference><reference>2123727486</reference><reference>2147130609</reference><reference>2153895433</reference><reference>2163976959</reference><reference>2166822586</reference><reference>2914314632</reference></references><venue id="1162793720" type="C">International Conference on Functional Programming</venue><doi>10.1145/141471.141540</doi><keywords><keyword weight="0.44788">Computer science</keyword><keyword weight="0.45834">Algorithm</keyword><keyword weight="0.46824">Theoretical computer science</keyword><keyword weight="0.50109">Decidability</keyword><keyword weight="0.51235">Canonical form</keyword><keyword weight="0.60437">Type inference</keyword><keyword weight="0.42189">Predicate (grammar)</keyword><keyword weight="0.44234">SIMPLE algorithm</keyword><keyword weight="0.49945">Subtyping</keyword><keyword weight="0.66064">Recursive data type</keyword><keyword weight="0.52205">Recursion</keyword></keywords><publisher>ACM</publisher><abstract>We present a unified approach to type inference in the presence of overloading and coercions based on the concept of constrained types . We define a generic inference system, show that subtyping and overloading can be treated as a special instance of this system and develop a simple algorithm to compute principal types. We prove the decidability of type inference for the class of decomposable predicates and develop a canonical representation for principal types based on most accurate simplifications of constraint sets. Finally, we investigate the extension of our techniques to recursive types .</abstract></paper>
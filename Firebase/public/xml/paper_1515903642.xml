<paper id="1515903642"><title>An Execution Model for Distributed Database Transactions and Its Implementation in VPL</title><year>1992</year><authors><author org="University of Technology Vienna" id="2165770595">eva KÃ¼hn</author><author org="University of Technology Vienna" id="2045428471">Franz Puntigam</author><author org="Purdue University" id="2057816297">Ahmed K. Elmagarmid</author></authors><n_citation>13</n_citation><doc_type>Conference</doc_type><references><reference>107377316</reference><reference>1545155892</reference><reference>1563849906</reference><reference>2014257213</reference><reference>2053384008</reference><reference>2155541789</reference></references><venue id="1132593990" type="C">Extending Database Technology</venue><doi>10.1007/BFb0032450</doi><keywords><keyword weight="0.60923">Serializability</keyword><keyword weight="0.47185">Programming language</keyword><keyword weight="0.45958">Computer science</keyword><keyword weight="0.50884">Prolog</keyword><keyword weight="0.57591">Execution model</keyword><keyword weight="0.51702">Distributed concurrency control</keyword><keyword weight="0.51995">Distributed database</keyword><keyword weight="0.56227">Database transaction</keyword><keyword weight="0.67161">Distributed transaction</keyword><keyword weight="0.44856">Database</keyword><keyword weight="0.52259">Executable</keyword><keyword weight="0.46108">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We present an execution model for distributed transactions that can be employed for multidatabase systems. We use the Flex Transaction model that has been proposed as a highly general and flexible tool for the specification of distributed transactions and extend it by allowing nested and possibly recursive transaction specifications. We show how a given transaction specification and its execution model can be mapped into a representation in a new concurrent Prolog language, the VPL (Vienna Parallel Logic) language. The representation in VPL can be considered as an executable specification. We show some optimizations concerning this mapping and define a significant subclass of Flex Transactions with a declarative representation in VPL that can be modeled by AND/OR structures. We argue that it is more advantageous to use VPL directly for the transaction specification because it provides more flexibility and more control aspects than the Flex Transaction model.</abstract></paper>
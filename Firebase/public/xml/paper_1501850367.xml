<paper id="1501850367"><title>On logical foundations of active databases</title><year>1998</year><authors><author org="" id="91862343">Georg Lausen</author><author org="" id="2239188769">Bertram Lud√§scher</author><author org="" id="2118015496">Wolfgang May</author></authors><n_citation>22</n_citation><doc_type /><references><reference>35271428</reference><reference>35767954</reference><reference>67142770</reference><reference>148128572</reference><reference>190570906</reference><reference>270081759</reference><reference>1482193060</reference><reference>1487307096</reference><reference>1487646593</reference><reference>1496528554</reference><reference>1496689342</reference><reference>1509153766</reference><reference>1514432042</reference><reference>1515061642</reference><reference>1519893275</reference><reference>1529543011</reference><reference>1533063365</reference><reference>1537130665</reference><reference>1548186255</reference><reference>1550995397</reference><reference>1555331700</reference><reference>1555797260</reference><reference>1556545571</reference><reference>1557571809</reference><reference>1558832481</reference><reference>1561130787</reference><reference>1561948638</reference><reference>1579145134</reference><reference>1579330263</reference><reference>1581060203</reference><reference>1585132271</reference><reference>1604345466</reference><reference>1672891595</reference><reference>1832596789</reference><reference>1835072459</reference><reference>1835762651</reference><reference>1839937676</reference><reference>1842205666</reference><reference>1843708379</reference><reference>1966276082</reference><reference>1968386702</reference><reference>1969966990</reference><reference>1979452588</reference><reference>1990406816</reference><reference>1991245451</reference><reference>1991247646</reference><reference>1993512664</reference><reference>1995080554</reference><reference>2016580249</reference><reference>2025315843</reference><reference>2035762642</reference><reference>2038726607</reference><reference>2040277185</reference><reference>2042690606</reference><reference>2056947248</reference><reference>2076853127</reference><reference>2081413227</reference><reference>2086906616</reference><reference>2089616458</reference><reference>2096524171</reference><reference>2105592131</reference><reference>2108911687</reference><reference>2111353076</reference><reference>2122211300</reference><reference>2128770734</reference><reference>2132745831</reference><reference>2146861402</reference><reference>2150346598</reference><reference>2160805792</reference><reference>2165063953</reference><reference>2294081347</reference></references><venue id="" type="">Logics for databases and information systems</venue><doi>10.1007/978-1-4615-5643-5_12</doi><keywords><keyword weight="0.0">Logical approach</keyword><keyword weight="0.45845">Programming language</keyword><keyword weight="0.47573">Terminology</keyword><keyword weight="0.45045">Computer science</keyword><keyword weight="0.49231">Execution model</keyword><keyword weight="0.53456">Database theory</keyword><keyword weight="0.57338">Datalog</keyword><keyword weight="0.0">Expressive power</keyword><keyword weight="0.42176">Database</keyword><keyword weight="0.0">Fixpoint semantics</keyword><keyword weight="0.50389">Semantics</keyword></keywords><publisher>Springer, Boston, MA</publisher><abstract>In this chapter, we present work on logical foundations of active databases. After introducing the basic notions and terminology, we give a short overview of research on foundations of active rules. Subsequently, we present a specific state-oriented logical approach to active rules which aims at combining the declarative semantics of deductive rules with the possibility to define updates in the style of production rules. The resulting language Statelog models (flat) transactions as a sequence of intermediate transitions, where each transition is defined using deductive rules. Since Statelog programs correspond to a specific class of locally stratified logic programs, they have a unique intended model. Finally, after studying further fundamental properties like expressive power and termination behavior, a Statelog framework for active rules is presented. Although the framework is surprisingly simple, it allows to model many essential features of active rules, including immediate and deferred rule execution, and composite events. Different alternatives for enforcing termination are proposed leading to tractable subclasses of the language. Finally, we show that certain classes of Statelog programs correspond to Datalog programs with production rule semantics (i.e., with inflationary or noninflationary fixpoint semantics).</abstract></paper>
<paper id="1973828066"><title>Identifying the semantic and textual differences between two versions of a program</title><year>1990</year><authors><author org="University of Wisconsin-Madison" id="1974504312">Susan Horwitz</author></authors><n_citation>198</n_citation><doc_type>Conference</doc_type><references><reference>330880626</reference><reference>1491178396</reference><reference>1655990431</reference><reference>1970026646</reference><reference>1975009259</reference><reference>1976373002</reference><reference>1997493115</reference><reference>2010452422</reference><reference>2021487990</reference><reference>2041650430</reference><reference>2043555680</reference><reference>2048001624</reference><reference>2064625489</reference><reference>2076090418</reference><reference>2101811680</reference><reference>2144344516</reference><reference>2147088720</reference><reference>2151325537</reference><reference>2293624369</reference></references><venue id="1127352206" type="C">Programming Language Design and Implementation</venue><doi>10.1145/93542.93574</doi><keywords><keyword weight="0.47308">Programming language</keyword><keyword weight="0.47068">Computer science</keyword><keyword weight="0.0">Program behavior</keyword><keyword weight="0.56989">Unix</keyword><keyword weight="0.44667">Technical report</keyword></keywords><publisher>ACM</publisher><abstract>Text-based file comparators ( e.g. , the Unix utility diff ), are very general tools that can be applied to arbitrary files. However, using such tools to compare programs can be unsatisfactory because their only notion of change is based on program text rather than program behavior . This paper describes a technique for comparing two versions of a program, determining which program components represents changes, and classifying each changed component as representing either a semantic or a textual change.</abstract></paper>
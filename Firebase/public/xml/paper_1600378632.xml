<paper id="1600378632"><title>Design Overview of the NAIL! System</title><year>1986</year><authors><author org="Stanford, University" id="2102435307">Katherine A. Morris</author><author org="Stanford, University" id="2289364316">Jeffrey D. Ullman</author><author org="Stanford, University" id="2155530763">Allen Van Gelder</author></authors><n_citation>117</n_citation><doc_type>Conference</doc_type><references><reference>52405575</reference><reference>1570025952</reference><reference>1582573023</reference><reference>1590937195</reference><reference>1970637119</reference><reference>1988600452</reference><reference>2027276583</reference><reference>2036335723</reference><reference>2058952316</reference><reference>2072843304</reference><reference>2108911687</reference><reference>2128248543</reference><reference>2132063146</reference><reference>2143382644</reference></references><venue id="1201110412" type="C">International Conference on Logic Programming</venue><doi>10.1007/3-540-16492-8_104</doi><keywords><keyword weight="0.52627">Horn clause</keyword><keyword weight="0.52026">Deductive database</keyword><keyword weight="0.45867">Computer science</keyword><keyword weight="0.44771">Systems design</keyword><keyword weight="0.45909">Theoretical computer science</keyword><keyword weight="0.51186">Prolog</keyword><keyword weight="0.44894">Computational model</keyword><keyword weight="0.4853">Strongly connected component</keyword><keyword weight="0.48886">Recursion</keyword><keyword weight="0.47161">Semantics</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We describe the design decisions made for the NAIL! (not another implementation of logic!) system, an advanced form of DBMS where queries may involve a large collection of Prolog-like rules used for query interpretation. A discussion of the ways NAIL! semantics differs from Prolog is followed by an exposition of the principal ideas in the system design. These points include the partition of predicates into strongly connected components to represent the structure of recursions and the “capture rule” organization for selecting query processing strategies. Other ideas include the way distinctions between bound and free arguments are capitalized upon and the persistence of previously discovered facts about the way to handle certain queries. We also survey the recent work on the processing of recursively defined queries conducted by the NAIL! group and others with similar computational models.</abstract></paper>
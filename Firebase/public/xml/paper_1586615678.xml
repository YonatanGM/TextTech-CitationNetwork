<paper id="1586615678"><title>On the semantics of rules in database programming languages</title><year>1990</year><authors><author org="University of Southern California" id="2157269769">Richard Hull</author><author org="University of Southern California" id="2103612445">Dean Jacobs</author></authors><n_citation>9</n_citation><doc_type /><references><reference>63505646</reference><reference>187080888</reference><reference>318253468</reference><reference>1502024545</reference><reference>1543582855</reference><reference>1561130787</reference><reference>1601530196</reference><reference>1985470198</reference><reference>2035762642</reference><reference>2042690606</reference><reference>2056947248</reference><reference>2060849841</reference><reference>2062851028</reference><reference>2078783169</reference><reference>2091631741</reference><reference>2120052337</reference><reference>2146861402</reference><reference>2153320798</reference><reference>2156266415</reference><reference>2157221482</reference><reference>2173808493</reference><reference>2295562782</reference></references><venue id="" type="">International East/West Database Workshop</venue><doi>10.1007/3-540-54141-1_5</doi><keywords><keyword weight="0.61279">Functional logic programming</keyword><keyword weight="0.6058">Fifth-generation programming language</keyword><keyword weight="0.59795">Second-generation programming language</keyword><keyword weight="0.63513">Comparison of multi-paradigm programming languages</keyword><keyword weight="0.46332">Programming language</keyword><keyword weight="0.60696">Programming paradigm</keyword><keyword weight="0.45029">Computer science</keyword><keyword weight="0.5963">Very high-level programming language</keyword><keyword weight="0.60674">Declarative programming</keyword><keyword weight="0.61539">Programming language theory</keyword><keyword weight="0.42372">Database</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The tension between the notion of ‘type’ as found in programming languages and ‘class’ as found in semantic and object-oriented database models is examined. A class includes structural and behavioral information as does a type, and also an extent, i.e., set of members, associated with the class by the current database state. The membership of extents can change over time, but they are nevertheless used in a manner analogous to programming language types. As a result, verifying “type correctness” in this realm is centered around integrity constraints rather than traditional typing paradigms. The notion of dytype (‘dynamic type’) is introduced to capture this phenomenon of using mutable sets as types.</abstract></paper>
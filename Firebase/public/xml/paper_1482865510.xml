<paper id="1482865510"><title>Model bus: towards the interoperability of modelling tools</title><year>2003</year><authors><author org="Laboratoire d'Informatique de Paris 6 (LIP6), University Paris VI, Paris, France#TAB#" id="2590659746">Xavier Blanc</author><author org="Laboratoire d'Informatique de Paris 6 (LIP6), University Paris VI, Paris, France#TAB#" id="2023363942">Marie-Pierre Gervais</author><author org="Laboratoire d'Informatique de Paris 6 (LIP6), University Paris VI, Paris, France#TAB#" id="54892511">Prawee Sriplakich</author></authors><n_citation>53</n_citation><doc_type>Conference</doc_type><references><reference>2012435944</reference><reference>2101842544</reference><reference>2165255864</reference></references><venue id="2755158973" type="C">European conference on Model driven architecture-foundations and applications</venue><doi>10.1007/11538097_2</doi><keywords><keyword weight="0.64406">Services computing</keyword><keyword weight="0.48033">Software engineering</keyword><keyword weight="0.68138">Interoperability</keyword><keyword weight="0.42729">Simulation</keyword><keyword weight="0.46209">Computer science</keyword><keyword weight="0.70152">Cross-domain interoperability</keyword><keyword weight="0.69912">WS-I Basic Profile</keyword><keyword weight="0.70334">Semantic interoperability</keyword><keyword weight="0.56327">Systems development life cycle</keyword><keyword weight="0.5884">Computer-aided software engineering</keyword><keyword weight="0.58242">Software development</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>MDA software development requires the interoperability of a wide range of modelling services (operations taking models as inputs and outputs), such as model edition, model transformation, and code generation. In particular, software development life cycle requires the interoperability of different modelling services. In particular, this interoperability concerns how to “connect” services (how to send an output model produced by one service as an input to another service). Today, the notion of modelling services is not yet well defined. Moreover, CASE tools, which implements different services, have heterogeneous interfaces. For this reason, the service connection is costly and cannot be automated. Currently, there are few works addressing this problem. Therefore, we propose an architecture and a prototype enabling the services of different tools to be connected.</abstract></paper>
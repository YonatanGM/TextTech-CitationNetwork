<paper id="1642278851"><title>Analysing dynamic change in software architectures: a case study</title><year>1998</year><authors><author org="Dept. of Comput., Imperial Coll. of Sci., Technol. &amp; Medicine, London, UK" id="2095806276">J. Kramer</author><author org="Imperial College London" id="2097290386">J. Magee</author></authors><n_citation>94</n_citation><doc_type>Conference</doc_type><references><reference>1489800325</reference><reference>1548316536</reference><reference>1592347886</reference><reference>1593450699</reference><reference>1985136467</reference><reference>1986926875</reference><reference>1990758343</reference><reference>2009345683</reference><reference>2013658284</reference><reference>2050185963</reference><reference>2059496390</reference><reference>2096870603</reference><reference>2096910097</reference><reference>2096973649</reference><reference>2101534265</reference><reference>2102549447</reference><reference>2113025639</reference><reference>2119016176</reference><reference>2120521925</reference><reference>2122824813</reference><reference>2122976174</reference><reference>2125294767</reference><reference>2135670602</reference><reference>2136909762</reference><reference>2139248375</reference><reference>2146082668</reference><reference>2491671410</reference></references><venue id="1187089339" type="C">Cooperative Distributed Systems</venue><doi>10.1109/CDS.1998.675762</doi><keywords><keyword weight="0.44289">Read-only memory</keyword><keyword weight="0.45197">Computer science</keyword><keyword weight="0.44054">Real-time computing</keyword><keyword weight="0.48192">Reachability</keyword><keyword weight="0.61341">Software system</keyword><keyword weight="0.50401">Software</keyword><keyword weight="0.53576">Computer-aided software engineering</keyword><keyword weight="0.57202">Software architecture</keyword><keyword weight="0.59733">Systems architecture</keyword><keyword weight="0.50231">Configuration management</keyword><keyword weight="0.45846">Distributed computing</keyword></keywords><publisher>IEEE Computer Society</publisher><abstract>The software architecture of a system is the overall structure of the system in terms of its constituent components and their interconnections. Dynamic changes to the instantiated system architecture-to the components and/or interconnections-may take place while it is running. In order that these changes do not violate the integrity of the system, we adopt a general model of dynamic configuration which only permits change to occur when the affected portions of the system are quiescent. In this paper we investigate the ability to perform behaviour analysis on systems which conform to the change model. Our analysis approach associates behavioural specifications with the components of a software architecture and analyses the behaviour of systems composed from these components. We use Labelled Transition Systems to specify behaviour and Compositional Reachability Analysis to check composite system models. We model the changes that can occur and use analysis to check that the architecture satisfies the properties required of it: before, during and after the change. The paper uses an example to illustrate the approach and discusses some issues arising from the work.</abstract></paper>
<paper id="1526124194"><title>Single table access using multiple indexes: optimization, execution, and concurrency control techniques</title><year>1990</year><authors><author org="IBM Almaden Research Center" id="2411984561">C. Mohan</author><author org="IBM Almaden Research Center" id="2973570506">Don Haderle</author><author org="IBM Santa Teresa Laboratory" id="2916141123">Yun Wang</author><author org="IBM Santa Teresa Laboratory" id="2146753901">Josephine Cheng</author></authors><n_citation>88</n_citation><doc_type>Conference</doc_type><references><reference>85898013</reference><reference>1501548698</reference><reference>1569583874</reference><reference>1581906976</reference><reference>1608665031</reference><reference>1825341804</reference><reference>1975433309</reference><reference>1976607278</reference><reference>1991199257</reference><reference>2012802704</reference><reference>2095562348</reference><reference>2104699792</reference><reference>2106887953</reference><reference>2153329411</reference></references><venue id="1132593990" type="C">Extending Database Technology</venue><doi>10.1007/BFb0022162</doi><keywords><keyword weight="0.61709">Query optimization</keyword><keyword weight="0.5229">Timestamp-based concurrency control</keyword><keyword weight="0.55113">Isolation (database systems)</keyword><keyword weight="0.52839">Concurrency control</keyword><keyword weight="0.4722">Computer science</keyword><keyword weight="0.55422">Multiversion concurrency control</keyword><keyword weight="0.54125">Distributed concurrency control</keyword><keyword weight="0.55547">Non-lock concurrency control</keyword><keyword weight="0.56457">Optimistic concurrency control</keyword><keyword weight="0.46167">Database</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Many data base management systemsu0027 query optimizers choose at most one index for accessing the records of a table in a given query, even though many indexes may exist on the table. In spite of the fact that there are some systems which use multiple indexes, very little has been published about the concurrency control or query optimization implications (e.g., deciding how many indexes to use) of using multiple indexes. This paper addresses these issues and presents solutions to the associated problems. Techniques are presented for the efficient handling of record ID lists, elimination of some locking, and determination of how many and which indexes to use. The techniques are adaptive in the sense that the execution strategies may be modified at run-time (e.g., not use some indexes which were to have been used), if the assumptions made at optimization-time (e.g., about selectivities) turn out to be wrong. Opportunities for exploiting parallelism are also identified. A subset of our ideas have been implemented in IBMu0027s DB2 V2R2 relational data base management system.</abstract></paper>
<paper id="1841581133"><title>Disjoint and Overlapping Process Changes: Challenges, Solutions, Applications</title><year>2004</year><authors><author org="University of Ulm" id="2048013632">Stefanie Rinderle</author><author org="University of Ulm" id="2124900482">Manfred Reichert</author><author org="University of Ulm" id="153700510">Peter Dadam</author></authors><n_citation>63</n_citation><doc_type>Conference</doc_type><references><reference>1503663442</reference><reference>1561323240</reference><reference>1570265525</reference><reference>1783266478</reference><reference>1984801861</reference><reference>2062756186</reference><reference>2097583309</reference><reference>2107271943</reference><reference>2113457143</reference><reference>2140232700</reference><reference>2140876280</reference><reference>2147984485</reference><reference>2160548641</reference><reference>2164507889</reference><reference>2178686891</reference><reference>2913036292</reference></references><venue id="1147734270" type="C">Cooperative Information Systems</venue><doi>10.1007/978-3-540-30468-5_9</doi><keywords><keyword weight="0.52025">Information system</keyword><keyword weight="0.50839">Disjoint sets</keyword><keyword weight="0.47138">Computer science</keyword><keyword weight="0.49253">Canonical form</keyword><keyword weight="0.47769">Theoretical computer science</keyword><keyword weight="0.46568">Artificial intelligence</keyword><keyword weight="0.48828">Schema (psychology)</keyword><keyword weight="0.46165">Distributed computing</keyword></keywords><publisher>Springer Verlag</publisher><abstract>Adaptive process–aware information systems must be able to support ad–hoc changes of single process instances as well as schema modifications at the process type level and their propagation to a collection of related process instances. So far these two kinds of (dynamic) process changes have been mainly considered in an isolated fashion. Especially for long-running processes, however, it must be possible to adequately handle the interplay between type and instance changes as well. One challenge in this context is to determine whether concurrent process type and process instance changes have the same or overlapping effects on the original process schema or not. Information about the degree of overlap is needed, for example, to determine whether and – if yes – how a process type change can be propagated to individually modified process instances as well. This paper provides a formal framework for dealing with overlapping and disjoint process changes and presents adequate migration strategies depending on the particular degree of overlap. In order to obtain a canonical representation of changes an algorithm is introduced which purges change logs from noisy information. Finally, a powerful proof-of-concept prototype exists.</abstract></paper>
<paper id="1581769579"><title>The Use of Explicit Plans to Guide Inductive Proofs</title><year>1988</year><authors><author org="University of Edinburgh," id="2000084407">Alan Bundy</author></authors><n_citation>278</n_citation><doc_type>Conference</doc_type><references><reference>87851535</reference><reference>1574235946</reference><reference>1590828018</reference><reference>2068374759</reference><reference>2128057448</reference><reference>2137144916</reference></references><venue id="1134440762" type="C">Conference on Automated Deduction</venue><doi>10.1007/BFb0012826</doi><keywords><keyword weight="0.43415">Discrete mathematics</keyword><keyword weight="0.4577">Computer science</keyword><keyword weight="0.58969">Automated theorem proving</keyword><keyword weight="0.43637">Algorithm</keyword><keyword weight="0.53642">Rippling</keyword><keyword weight="0.67301">Mathematical proof</keyword><keyword weight="0.68337">Proof complexity</keyword><keyword weight="0.53467">Formal methods</keyword><keyword weight="0.47495">Generality</keyword><keyword weight="0.48926">Automatic programming</keyword><keyword weight="0.69824">Proof assistant</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We propose the use of explicit proof plans to guide the search for a proof in automatic theorem proving. By representing proof plans as the specifications of LCF-like tactics, [Gordon et al 79], and by recording these specifications in a sorted meta-logic, we are able to reason about the conjectures to be proved and the methods available to prove them. In this way we can build proof plans of wide generality, formally account for and predict their successes and failures, apply them flexibly, recover from their failures, and learn them from example proofs.</abstract></paper>
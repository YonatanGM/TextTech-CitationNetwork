<paper id="1518169998"><title>Points-to Analysis by Type Inference of Programs with Structures and Unions</title><year>1996</year><authors><author org="Microsoft Research,#TAB#" id="203879161">Bjarne Steensgaard</author></authors><n_citation>92</n_citation><doc_type>Conference</doc_type><references><reference>85177704</reference><reference>1491178396</reference><reference>1797940162</reference><reference>1971388424</reference><reference>1975914482</reference><reference>1980468060</reference><reference>2002771912</reference><reference>2077102566</reference><reference>2087612811</reference><reference>2131135493</reference><reference>2142174207</reference><reference>2151360539</reference></references><venue id="1162239172" type="C">Compiler Construction</venue><doi>10.1007/3-540-61053-7_58</doi><keywords><keyword weight="0.61095">Pointer (computer programming)</keyword><keyword weight="0.0">Graph</keyword><keyword weight="0.46843">Programming language</keyword><keyword weight="0.45982">Computer science</keyword><keyword weight="0.61906">Type inference</keyword><keyword weight="0.52295">Language model</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We present an interprocedural flow-insensitive points-to analysis algorithm based on monomorphic type inference. The source language model the important features of C including pointers, pointer arithmetic, pointers to functions, structured objects, and unions. The algorithm is based on a non-standard type system where types represent nodes and edges in a storage shape graph.</abstract></paper>
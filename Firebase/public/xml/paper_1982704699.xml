<paper id="1982704699"><title>Computational Work and Time on Finite Machines</title><year>1972</year><authors><author org="Brown University, Division of Engineering, Providence, Rhode Island" id="2128411992">J. E. Savage</author></authors><n_citation>65</n_citation><doc_type>Journal</doc_type><references><reference>1964869680</reference><reference>1970961429</reference><reference>2003020124</reference><reference>2003159415</reference><reference>2008399088</reference></references><venue id="118992489" type="J">Journal of the ACM</venue><doi>10.1145/321724.321731</doi><keywords><keyword weight="0.45632">Discrete mathematics</keyword><keyword weight="0.61673">Asymptotic computational complexity</keyword><keyword weight="0.44228">Combinatorics</keyword><keyword weight="0.58105">Automata theory</keyword><keyword weight="0.51204">Access time</keyword><keyword weight="0.46283">Computer science</keyword><keyword weight="0.47708">Theoretical computer science</keyword><keyword weight="0.63875">Descriptive complexity theory</keyword><keyword weight="0.52644">Turing machine</keyword><keyword weight="0.61906">Model of computation</keyword><keyword weight="0.61352">Time complexity</keyword><keyword weight="0.6072">Computational resource</keyword></keywords><publisher>ACM</publisher><abstract>ABSTRACT. Measures of the computational work and computational delay required by ms chines to compute functions are given. Exchange inequalities are developed for random acces~ tape, and drum machines to show that product inequalities between storage and time, numbe of drum tracks and time, number of bits in an address and time, etc., must be satisfied to corn pute finite functions on bounded machines. KEY WORDS AND PHRASES: computational work, finite machines, automata, memor: hierarchies, general purpose computer, computational efficiency, functional complexity CR CATEGORIES: 5.22, 5.30, 6.1, 6.2 1. Introduction It is a fact, as Minsky notes [1], that very little is known about "possible exchange between time and memory, tradeoffs between time and program complexity, and other important parameters of computation. While exchange relations are nc the only form in which basic information about computational processes could b expressed, they could be one important representation of such information. I fact, Minsky has said that "the recognition of exchanges is often the conceptio of a science, if quantifying them is its birth" [1]. In this setting, this paper contribute to the conception and quantification of computer science by developing many e~ change inequalities involving storage, time, and other important parameters ( computation. In this paper we examine the computation of finite flmctions (functions whos domain and range are finite) on finite machines. In Section 2 we examine machin models in which sequential machines play a central role. Two complexity measure are defined in Section 3 for finite functions, namely, combinational complexity an time complexity, and these are defined for "straight line" algorithms, that is, al gorithms with no loops or branching. Two sets of basic inequalities are developed, relating the combinational complexit and time complexity of sequential machines and the number of cycles which the execute to the combinational complexity and time complexity of the function</abstract></paper>
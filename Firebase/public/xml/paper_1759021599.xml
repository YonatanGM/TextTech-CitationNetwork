<paper id="1759021599"><title>Contextual Occurence Nets and Concurrent Constraint Programming</title><year>1993</year><authors><author org="University of Pisa" id="1970207042">Ugo Montanari</author><author org="University of Pisa" id="2602895354">Francesca Rossi</author></authors><n_citation>35</n_citation><doc_type /><references><reference>18076284</reference><reference>1496459411</reference><reference>1544564247</reference><reference>1561059489</reference><reference>1574796876</reference><reference>2008511866</reference><reference>2113355185</reference><reference>2142423074</reference><reference>2914421362</reference></references><venue id="" type="">Proceedings of the International Workshop on Graph Transformations in Computer Science</venue><doi>10.1007/3-540-57787-4_18</doi><keywords><keyword weight="0.70006">Constraint satisfaction</keyword><keyword weight="0.46318">Programming language</keyword><keyword weight="0.45748">Computer science</keyword><keyword weight="0.71128">Constraint programming</keyword><keyword weight="0.66045">Inductive programming</keyword><keyword weight="0.76357">Concurrent constraint logic programming</keyword><keyword weight="0.64072">Reactive programming</keyword><keyword weight="0.66">Concurrent object-oriented programming</keyword><keyword weight="0.70667">Constraint logic programming</keyword><keyword weight="0.57558">Mutual exclusion</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>This paper proposes a new semantics for concurrent constraint programs. The meaning of each program is defined as a contextual net, which is just a usual net where context conditions, besides pre- and post-conditions, are allowed. Context conditions are just items which have to be present in order for an event to take place, but which are not affected by the event. They are very useful for describing situations where different events share a common resource and want to read it simultaneously. In fact, such events are concurrent in the net. The causal dependency relation of the net induces a partial order among objects in the same computation, while its mutual exclusion relation provides a way of expressing nondeterministic information. Such information can be of great help to a scheduler while trying to find an efficient execution of the program, or also to a compile-time optimizer.</abstract></paper>
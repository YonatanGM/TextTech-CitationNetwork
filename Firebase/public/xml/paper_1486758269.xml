<paper id="1486758269"><title>Architecture virtualization with mobile threads</title><year>1998</year><authors><author org="Laboratoire d’Informatique Fondamentale de Lille Université des Sciences et Technologies de Lille 59655 Villeneuve d’Ascq, France" id="2573807691">Yves Denneulin</author><author org="Laboratoire de l’Informatique du Parallélisme, École Normale Supérieure de Lyon 69364 Lyon, France" id="118112312">Raymond Namyst</author><author org="Laboratoire d’Informatique Fondamentale de Lille Université des Sciences et Technologies de Lille 59655 Villeneuve d’Ascq, France" id="2760936769">Jean-François Méhaut</author></authors><n_citation>3</n_citation><doc_type>Conference</doc_type><references><reference>22448193</reference><reference>1482030660</reference><reference>2098228070</reference><reference>2155066383</reference><reference>2170584807</reference></references><venue id="1195800536" type="C">Parallel Computing</venue><doi>10.1016/S0927-5452(98)80062-2</doi><keywords><keyword weight="0.5323">Virtualization</keyword><keyword weight="0.495">Programmer</keyword><keyword weight="0.5382">Programming paradigm</keyword><keyword weight="0.45817">Computer science</keyword><keyword weight="0.45453">Parallel computing</keyword><keyword weight="0.62562">Java concurrency</keyword><keyword weight="0.59722">Thread (computing)</keyword><keyword weight="0.46586">Software</keyword><keyword weight="0.61226">Thread safety</keyword><keyword weight="0.62705">Green threads</keyword><keyword weight="0.45827">Operating system</keyword><keyword weight="0.4673">Distributed computing</keyword></keywords><publisher>North-Holland</publisher><abstract>It is now widely acknowledged that distributed multithreaded environments are of great help when building complex software which may involve unpredictable irregular communication patterns. In this paper, we show the thread concept can bring much more than a simple “overlap of communications by computations”. With an efficient programming model that allows dynamic thread migration, threads play the role of “mobile virtual processes” whose mapping may change at runtime. The programmer can focus on the parallel decomposition of his algorithm while the execution support will take care of keeping the work fairly distributed during execution.</abstract></paper>
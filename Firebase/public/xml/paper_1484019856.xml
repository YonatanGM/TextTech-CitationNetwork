<paper id="1484019856"><title>Solving Demand Versions of Interprocedural Analysis Problems</title><year>1994</year><authors><author org="University of copenhagen" id="341386833">Thomas W. Reps</author></authors><n_citation>64</n_citation><doc_type>Conference</doc_type><references><reference>110734221</reference><reference>1570025952</reference><reference>1573631856</reference><reference>1593165330</reference><reference>1964583443</reference><reference>1966449927</reference><reference>1997189447</reference><reference>2006084860</reference><reference>2013041359</reference><reference>2016558072</reference><reference>2023222549</reference><reference>2025554746</reference><reference>2029722359</reference><reference>2036240164</reference><reference>2039207168</reference><reference>2070553391</reference><reference>2086457189</reference><reference>2145913834</reference><reference>2151328120</reference><reference>2293624369</reference><reference>2885877860</reference></references><venue id="1162239172" type="C">Compiler Construction</venue><doi>10.1007/3-540-57877-3_26</doi><keywords><keyword weight="0.42395">Small number</keyword><keyword weight="0.0">Logic program</keyword><keyword weight="0.47376">Programming language</keyword><keyword weight="0.55777">Deductive database</keyword><keyword weight="0.47627">Computer science</keyword><keyword weight="0.51416">Call site</keyword><keyword weight="0.55314">Dataflow</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>This paper concerns the solution of demand versions of interprocedural analysis problems. In a demand version of a program-analysis problem, some piece of summary information (e.g., the dataflow facts holding at a given point) is to be reported only for a single program element of interest (or a small number of elements of interest). Because the summary information at one program point typically depends on summary information from other points, an important issue is to minimize the number of other points for which (transient) summary information is computed and/or the amount of information computed at those points. The paper describes how algorithms for demand versions of program-analysis problems can be obtained from their exhaustive counterparts essentially for free, by applying the so-called “magic-sets” transformation that was developed in the logic-programming and deductive-database communities.</abstract></paper>
<paper id="1555397629"><title>CHASE: A Static Checker for JML's Assignable Clause</title><year>2002</year><authors><author org="Inria - Sophia Antipolis" id="1989248398">Néstor Cataño</author><author org="Inria - Sophia Antipolis" id="2148094435">Marieke Huisman</author></authors><n_citation>3</n_citation><doc_type>Conference</doc_type><references><reference>1551782231</reference><reference>1995008247</reference><reference>1998490923</reference><reference>2091089602</reference><reference>2094160561</reference><reference>2147421365</reference><reference>2158376721</reference><reference>2161825580</reference><reference>2164810907</reference></references><venue id="1180547793" type="C">Verification, Model Checking and Abstract Interpretation</venue><doi>10.1007/3-540-36384-X_6</doi><keywords><keyword weight="0.48535">Specification language</keyword><keyword weight="0.44846">Programming language</keyword><keyword weight="0.45351">Object-oriented programming</keyword><keyword weight="0.43664">Computer science</keyword><keyword weight="0.50913">Correctness</keyword><keyword weight="0.47142">Static analysis</keyword><keyword weight="0.43625">Theoretical computer science</keyword><keyword weight="0.41491">Aliasing</keyword><keyword weight="0.45884">Syntax</keyword><keyword weight="0.43938">Java</keyword><keyword weight="0.47872">Formal verification</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>This paper presents a syntactic method to check so-called assignable clauses of annotated JAVA programs. Assignable clauses describe which variables may be assigned by a method. Their correctness is crucial for reasoning about class specifications. The method that we propose is incomplete, as it only makes a syntactic check and it does not take aliasing or expression evaluation into account, but it provides efficient means to find the most common errors in assignable clauses. This is demonstrated by applying the method to the specification of an industrial case study.</abstract></paper>
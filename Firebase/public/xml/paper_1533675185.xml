<paper id="1533675185"><title>Paraconsistent logic programming</title><year>1987</year><authors><author org="Syracuse Univ., Syracuse NY" id="2156482915">Howard A. Blair</author><author org="Syracuse Univ., Syracuse NY" id="2261167843">V. S. Subrahmanian</author></authors><n_citation>6</n_citation><doc_type>Conference</doc_type><references><reference>35631723</reference><reference>1481320527</reference><reference>1489133937</reference><reference>1514620164</reference><reference>1552837293</reference><reference>2003531456</reference><reference>2011189621</reference><reference>2029753048</reference><reference>2061490938</reference><reference>2108911687</reference><reference>2111353076</reference><reference>2129802691</reference><reference>2142616542</reference></references><venue id="1123496967" type="C">Foundations of Software Technology and Theoretical Computer Science</venue><doi>10.1007/3-540-18625-5_59</doi><keywords><keyword weight="0.47069">Of the form</keyword><keyword weight="0.60926">Horn-satisfiability</keyword><keyword weight="0.43817">Computer science</keyword><keyword weight="0.44528">Theoretical computer science</keyword><keyword weight="0.58673">Prolog</keyword><keyword weight="0.43857">Natural language processing</keyword><keyword weight="0.0">Artificial intelligence</keyword><keyword weight="0.60443">Logic programming</keyword><keyword weight="0.45868">Contradiction</keyword><keyword weight="0.42555">Discrete mathematics</keyword><keyword weight="0.59624">Horn clause</keyword><keyword weight="0.5983">Paraconsistent logic</keyword><keyword weight="0.49375">Semantics</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>This paper makes two contributions. Firstly, we give a semantics for sets of clauses of the form L0 ⇐ L1u0026 ... u0026L n where each L i is a literal. We call such clauses generally-Horn clauses. Any such endeavour has to give a coherent, formal treatment of inconsistency (in the sense of two-valued logic). Thus, as a second contribution, we give a robust semantics for generally-Horn programs that allows us to “make sense” of sets of generally-Horn clauses that are inconsistent (in the two-valued logic sense). This applies to the design of very large knowledge bases where inconsistent information is often present.</abstract></paper>
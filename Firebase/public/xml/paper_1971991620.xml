<paper id="1971991620"><title>An experimental evaluation of the assumption of independence in multiversion programming</title><year>1986</year><authors><author org="Dept of Comput. Sci., Virginia Univ., Charlottesville, VA, USA" id="2178599376">J. C. Knight</author><author org="Department of Computer Science University of California, Irvine, CA" id="2150992688">N. G. Leveson</author></authors><n_citation>656</n_citation><doc_type>Journal</doc_type><references><reference>1714865987</reference><reference>2065816933</reference></references><venue id="8351582" type="J">IEEE Transactions on Software Engineering</venue><doi>10.1109/TSE.1986.6312924</doi><keywords><keyword weight="0.44047">Programming language</keyword><keyword weight="0.44782">Axiom</keyword><keyword weight="0.6281">N-version programming</keyword><keyword weight="0.44342">Computer science</keyword><keyword weight="0.52314">Software fault tolerance</keyword><keyword weight="0.41805">Real-time computing</keyword><keyword weight="0.0">Design diversity</keyword><keyword weight="0.46673">Software</keyword><keyword weight="0.4675">Fault tolerance</keyword><keyword weight="0.47314">Software quality</keyword></keywords><publisher>IEEE</publisher><abstract>N-version programming has been proposed as a method of incorporating fault tolerance into software. Multiple versions of a program (i.e. `Nu0027) are prepared and executed in parallel. Their outputs are collected and examined by a voter, and, if they are not identical, it is assumed that the majority is correct. This method depends for its reliability improvement on the assumption that programs that have been developed independently will fail independently. An experiment is described in which the fundamental axiom is tested. In all, 27 versions of a program were prepared independently from the same specification at two universities and then subjected to one million tests. The results of the tests revealed that the programs were individually extremely reliable but that the number of tests in which more than one program failed was substantially more than expected. The results of these tests are presented along with an analysis of some of the faults that were found in the programs. Background information on the programmers used is also summarized.</abstract></paper>
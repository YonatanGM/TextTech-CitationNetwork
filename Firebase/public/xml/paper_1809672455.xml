<paper id="1809672455"><title>Validation of Synchronous Reactive Systems: From Formal Verification to Automatic Testing</title><year>1999</year><authors><author org="Verimag" id="2257050880">Nicolas Halbwachs</author><author org="Verimag" id="2127406978">Pascal Raymond</author></authors><n_citation>40</n_citation><doc_type>Journal</doc_type><references><reference>1502028089</reference><reference>1511336169</reference><reference>1526092505</reference><reference>1553233117</reference><reference>1591643794</reference><reference>1593428110</reference><reference>1875492031</reference><reference>1884521777</reference><reference>1992006255</reference><reference>2068896853</reference><reference>2081938726</reference><reference>2117189826</reference></references><venue id="106296714" type="J">Lecture Notes in Computer Science</venue><doi>10.1007/3-540-46674-6_1</doi><keywords><keyword weight="0.47724">Programming language</keyword><keyword weight="0.44727">Abstraction</keyword><keyword weight="0.47255">Computer science</keyword><keyword weight="0.45597">Algorithm</keyword><keyword weight="0.0">Automatic testing</keyword><keyword weight="0.61334">Formal specification</keyword><keyword weight="0.48241">Real-time operating system</keyword><keyword weight="0.0">Finite state</keyword><keyword weight="0.44808">Lustre (mineralogy)</keyword><keyword weight="0.55606">Reactive system</keyword><keyword weight="0.46465">Distributed computing</keyword><keyword weight="0.61432">Formal verification</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>This paper surveys the techniques and tools developped for the validation of reactive systems described in the synchronous data-flow language Lustre [HCRP91]. These techniques are based on the specification of safety properties, by means of synchronous observers. The modelchecker Lesar [RHR91] takes a Lustre program, and two observers -- respectively describing the expected properties of the program, and the assumptions about the system environment under which these properties are intended to hold --, and performs the verification on a finite state (Boolean) abstraction of the system. Recent work concerns extensions towards simple numerical aspects, which are ignored in the basic tool. Provided with the same kind of observers, the tool Lurette [RWNH98] is able to automatically generate test sequences satisfying the environment assumptions, and to run the test while checking the satisfaction of the specified properties.</abstract></paper>
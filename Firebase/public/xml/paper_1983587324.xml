<paper id="1983587324"><title>MULTILISP: a language for concurrent symbolic computation</title><year>1985</year><authors><author org="Massachusetts Institute of Technology, Cambridge" id="2663971751">Robert H. Halstead</author></authors><n_citation>891</n_citation><doc_type>Journal</doc_type><references><reference>195346541</reference><reference>1525140360</reference><reference>1555673550</reference><reference>1595852746</reference><reference>1770006921</reference><reference>1870063920</reference><reference>1964602554</reference><reference>1971181882</reference><reference>1993621349</reference><reference>2017586706</reference><reference>2018885404</reference><reference>2026879022</reference><reference>2047332639</reference><reference>2047434043</reference><reference>2063068243</reference><reference>2067911767</reference><reference>2104055277</reference><reference>2110425399</reference><reference>2114876342</reference><reference>2122633355</reference><reference>2123914565</reference><reference>2131791649</reference><reference>2144481293</reference><reference>2157598146</reference><reference>2172307690</reference></references><venue id="41449414" type="J">ACM Transactions on Programming Languages and Systems</venue><doi>10.1145/4472.4478</doi><keywords><keyword weight="0.92551">MultiLisp</keyword><keyword weight="0.48823">Abstract data type</keyword><keyword weight="0.4672">Programming language</keyword><keyword weight="0.45381">Computer science</keyword><keyword weight="0.48004">Scheduling (computing)</keyword><keyword weight="0.51222">Lisp</keyword><keyword weight="0.46211">Parallel computing</keyword><keyword weight="0.48868">Programming style</keyword><keyword weight="0.47841">Multiprocessing</keyword><keyword weight="0.50891">Compiler</keyword><keyword weight="0.55304">Garbage collection</keyword></keywords><publisher>ACM</publisher><abstract>Multilisp is a version of the Lisp dialect Scheme extended with constructs for parallel execution. Like Scheme, Multilisp is oriented toward symbolic computation. Unlike some parallel programming languages, Multilisp incorporates constructs for causing side effects and for explicitly introducing parallelism. The potential complexity of dealing with side effects in a parallel context is mitigated by the nature of the parallelism constructs and by support for abstract data types: a recommended Multilisp programming style is presented which, if followed, should lead to highly parallel, easily understandable programs. Multilisp is being implemented on the 32-processor Concert multiprocessor; however, it is ultimately intended for use on larger multiprocessors. The current implementation, called Concert Multilisp , is complete enough to run the Multilisp compiler itself and has been run on Concert prototypes including up to eight processors. Concert Multilisp uses novel techniques for task scheduling and garbage collection. The task scheduler helps control excessive resource utilization by means of an unfair scheduling policy; the garbage collector uses a multiprocessor algorithm based on the incremental garbage collector of Baker.</abstract></paper>
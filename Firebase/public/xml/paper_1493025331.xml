<paper id="1493025331"><title>Compiling constraint solving using projection</title><year>1997</year><authors><author org="Department of Computer Science, University of Melbourne, Parkville, Victoria, Australia#TAB#" id="2100156535">Warwick Harvey</author><author org="Department of Computer Science, University of Melbourne, Parkville, Victoria, Australia#TAB#" id="2079669046">Peter J. Stuckey</author><author org="Department of Computer Science, University of Melbourne, Parkville, Victoria, Australia and Dept. of Computer Science &amp; Engineering, University of Washington, Seattle, Washington#TAB#" id="2020136591">Alan Borning</author></authors><n_citation>11</n_citation><doc_type>Conference</doc_type><references><reference>1507843538</reference><reference>1937590229</reference><reference>1994650182</reference><reference>2016321606</reference><reference>2044344198</reference><reference>2078328646</reference><reference>2078404830</reference><reference>2088407946</reference><reference>2132233302</reference><reference>2160796062</reference><reference>2913477984</reference></references><venue id="1201491352" type="C">Principles and Practice of Constraint Programming</venue><doi>10.1007/BFb0017462</doi><keywords><keyword weight="0.45648">Mathematical optimization</keyword><keyword weight="0.46832">Computer science</keyword><keyword weight="0.48973">sort</keyword><keyword weight="0.54478">Constraint graph</keyword><keyword weight="0.51182">Compiler</keyword><keyword weight="0.55957">Constraint satisfaction problem</keyword><keyword weight="0.56257">Solver</keyword><keyword weight="0.52694">Java applet</keyword><keyword weight="0.52812">User interface</keyword><keyword weight="0.49394">Input device</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Linear equality and inequality constraints arise naturally in specifying many aspects of user interfaces, such as requiring that one window be to the left of another, requiring that a pane occupy the leftmost of a window, or preferring that an object be contained within a rectangle if possible. For interactive use, we need to solve similar constraint satisfaction problems repeatedly for each screen refresh, with each successive problem differing from the previous one only in the position of an input device and the previous state of the system. We present an algorithm for solving such systems of constraints using projection. The solution is compiled into very efficient, constraint-free code, which is parameterized by the new inputs. Producing straight-line, constraint-free code of this sort is important in a number of applications: for example, to provide predictable performance in real-time systems, to allow companies to ship products without including a runtime constraint solver, to compile Java applets that can be downloaded and run remotely (again without having to include a runtime solver), or for applications where runtime efficiency is particularly important. Even for less time-critical user interface applications, the smooth performance of the resulting code is more pleasing than that of code produced using other current techniques.</abstract></paper>
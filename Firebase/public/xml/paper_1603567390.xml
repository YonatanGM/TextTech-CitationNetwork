<paper id="1603567390"><title>Generic Techniques for Source-Level Debugging and Dynamic Program Slicing</title><year>1995</year><authors><author org="CWI" id="2164566402">Frank Tip</author></authors><n_citation>20</n_citation><doc_type>Conference</doc_type><references><reference>343537745</reference><reference>1483546659</reference><reference>1483919527</reference><reference>1494096444</reference><reference>1548088954</reference><reference>1575308494</reference><reference>1975807602</reference><reference>1984248430</reference><reference>2051504145</reference><reference>2071352490</reference><reference>2079055089</reference><reference>2128916862</reference><reference>2154940799</reference><reference>2912858146</reference><reference>2913158420</reference></references><venue id="2756386172" type="C">Colloquium on trees in Algebra and Programming</venue><doi>10.1007/3-540-59293-8_217</doi><keywords><keyword weight="0.7373">Program slicing</keyword><keyword weight="0.63561">Algebraic specification</keyword><keyword weight="0.44304">Algebraic number</keyword><keyword weight="0.48563">Programming language</keyword><keyword weight="0.46542">Computer science</keyword><keyword weight="0.56386">Abstract syntax tree</keyword><keyword weight="0.47272">Interpreter</keyword><keyword weight="0.55253">Software development</keyword><keyword weight="0.70649">Algorithmic program debugging</keyword><keyword weight="0.60531">Debugging</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Algebraic specifications have been used successfully as a formal basis for software development. This paper discusses how the origin and dynamic dependence relations implicitly defined by an algebraic specification can be used to define powerful language-specific tools. In particular, the generation of tools for source-level debugging and dynamic program slicing from specifications of interpreters will be addressed.</abstract></paper>
<paper id="1566371091"><title>Solving Systems of Set Constraints using Tree Automata</title><year>1993</year><authors><author org="IEEA Université de Lille I" id="1217769045">Rémi Gilleron</author><author org="IEEA Université de Lille I" id="1876121579">Sophie Tison</author><author org="IEEA Université de Lille I" id="2086670939">Marc Tommasi</author></authors><n_citation>44</n_citation><doc_type>Conference</doc_type><references><reference>171682210</reference><reference>1503204116</reference><reference>1532420827</reference><reference>1581551064</reference><reference>2076696436</reference><reference>2088126145</reference><reference>2115656500</reference></references><venue id="1178070762" type="C">Symposium on Theoretical Aspects of Computer Science</venue><doi>10.1007/3-540-56503-5_50</doi><keywords><keyword weight="0.47405">Discrete mathematics</keyword><keyword weight="0.47063">Combinatorics</keyword><keyword weight="0.63825">Nondeterministic finite automaton</keyword><keyword weight="0.43796">Computer science</keyword><keyword weight="0.63851">K-ary tree</keyword><keyword weight="0.63562">Binary tree</keyword><keyword weight="0.61408">Tree structure</keyword><keyword weight="0.64981">Solution set</keyword><keyword weight="0.63906">Tree (set theory)</keyword><keyword weight="0.61563">Interval tree</keyword><keyword weight="0.6328">ω-automaton</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>A set constraint is of the form exp1\(\subseteq\)exp2 where exp1 and exp2 are set expressions constructed using variables, function symbols, and the set union, intersection and complement symbols. An algorithm for solving such systems of set constraints was proposed by Aiken and Wimmers [1]. We present a new algorithm for solving this problem. Indeed, we define a new class of tree automata called Tree Set Automata. We prove that, given a system of set constraints, we can associate a tree set automaton such that the set of tuples of tree languages recognized by this automaton is the set of tuples of solutions of the system. We also prove the converse property. Furthermore, if the system has a solution, we prove, in a constructive way, that there is a regular solution (i.e. a tuple of regular tree languages) and a minimal solution and a maximal solution which are actually regular.</abstract></paper>
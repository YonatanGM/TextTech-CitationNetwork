<paper id="1557270615"><title>Automatic test generation from communicating extended finite state machine (CEFSM)-based models</title><year>2002</year><authors><author org="Avaya Research Labs, Basking Ridge, NJ, USA" id="2462094061">J.J. Li</author><author org="*University of Texas at Dallas," id="2711041881">W.E. Wong</author></authors><n_citation>39</n_citation><doc_type>Conference</doc_type><references><reference>1590462283</reference><reference>2122796178</reference><reference>2160504889</reference></references><venue id="1174688487" type="C">International Symposium on Object/Component/Service-Oriented Real-Time Distributed Computing</venue><doi>10.1109/ISORC.2002.1003693</doi><keywords><keyword weight="0.47007">Computer science</keyword><keyword weight="0.48675">Automaton</keyword><keyword weight="0.4621">Communication channel</keyword><keyword weight="0.58594">Extended finite-state machine</keyword><keyword weight="0.56738">Finite-state machine</keyword><keyword weight="0.51038">Formal specification</keyword><keyword weight="0.47098">Theoretical computer science</keyword><keyword weight="0.57399">Model-based testing</keyword><keyword weight="0.55068">Test case</keyword><keyword weight="0.49481">Dominator</keyword></keywords><publisher>IEEE</publisher><abstract>We present a methodology based on communicating extended finite state machines (CEFSM) to generate tests automatically from system specifications. Unlike other model-based methods, it does not require the creation of any new models. Rather, it uses the existing available system models including both data and behavioral information. Our CEFSM-based test generation uses FSMs (finite state machines) to model behavior and events, their extension with variables to model data, and their interaction channels to model communication. Our method generates tests based on a combination of behavior, data, and communication specifications. Another important difference is that our method addresses branching coverage not only for data-related decision coverage, but also behavioral transition coverage. Sophisticated "priority" and "dominator" analysis is applied to generate efficient test cases to increase, as much as possible with as few tests as possible, the branching coverage of the system being tested.</abstract></paper>
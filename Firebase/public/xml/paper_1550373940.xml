<paper id="1550373940"><title>Dynamic object evolution without name collisions</title><year>1997</year><authors><author org="(University of Siegen)" id="93690356">Mira Mezini</author></authors><n_citation>42</n_citation><doc_type>Conference</doc_type><references><reference>53067792</reference><reference>196036100</reference><reference>1502457987</reference><reference>1547109844</reference><reference>1587140871</reference><reference>1606263019</reference><reference>1609546211</reference><reference>1621403853</reference><reference>1770006921</reference><reference>1822389052</reference><reference>1965695377</reference><reference>1987454317</reference><reference>1998735458</reference><reference>2035082615</reference><reference>2037755932</reference><reference>2043493366</reference><reference>2045723688</reference><reference>2048853312</reference><reference>2055691648</reference><reference>2082514774</reference><reference>2094282293</reference><reference>2103060214</reference><reference>2115680394</reference><reference>2120668987</reference><reference>2138659327</reference><reference>2161825580</reference><reference>2914317223</reference></references><venue id="1177184315" type="C">European Conference on Object-Oriented Programming</venue><doi>10.1007/BFb0053380</doi><keywords><keyword weight="0.60895">Object-oriented design</keyword><keyword weight="0.47999">Metaprogramming</keyword><keyword weight="0.45057">Programming language</keyword><keyword weight="0.44861">Computer science</keyword><keyword weight="0.52264">Object model</keyword><keyword weight="0.42395">Collision</keyword><keyword weight="0.45173">Theoretical computer science</keyword><keyword weight="0.46231">Modular design</keyword><keyword weight="0.50459">Abstraction layer</keyword><keyword weight="0.45532">Software development</keyword><keyword weight="0.55161">Multiple inheritance</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Support for modular evolution of objects is required in many application areas. However, existing mechanisms for incremental behavior composition either do not support evolving objects at all, or do not satisfactorily solve the encapsulation and name collision problems associated with them. In this paper, a new approach to behavior composition in a class-based environment is presented. It is based on the encapsulated object model of class-based inheritance, but introduces an additional abstraction layer between objects and classes. By being responsible for the compositional aspects of the behavior of objects, this layer provides support for the evolution of behavior while at the same time solving the name conflicts that may occur. A formal description of the approach is provided and its feasibility is demonstrated by implementing it as a metalevel extension of Smalltalk-80.</abstract></paper>
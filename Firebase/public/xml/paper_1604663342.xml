<paper id="1604663342"><title>A superimposed codeword indexing scheme for very large Prolog databases</title><year>1986</year><authors><author org="(University of Melbourne)" id="123309386">Kotagiri Ramamohanarao</author><author org="(University of Melbourne)" id="2168643077">John Shepherd</author></authors><n_citation>50</n_citation><doc_type>Conference</doc_type><references><reference>1966189009</reference><reference>1968915437</reference><reference>2012286840</reference></references><venue id="1201110412" type="C">International Conference on Logic Programming</venue><doi>10.1007/3-540-16492-8_105</doi><keywords><keyword weight="0.40342">Small number</keyword><keyword weight="0.45839">Information retrieval</keyword><keyword weight="0.45427">Computer science</keyword><keyword weight="0.52929">Search engine indexing</keyword><keyword weight="0.46278">Theoretical computer science</keyword><keyword weight="0.46638">Coding (social sciences)</keyword><keyword weight="0.42002">Functor</keyword><keyword weight="0.54453">Prolog</keyword><keyword weight="0.46855">Code word</keyword><keyword weight="0.49496">Hash function</keyword><keyword weight="0.5399">Database index</keyword><keyword weight="0.43989">Database</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>This paper describes a database indexing scheme, based on the method of superimposed codewords, which is suitable for dealing with very large databases of Prolog clauses. Superimposed codeword schemes provide a very efficient method of retrieving records from large databases in only a small number of disk accesses. The scheme described in this paper extends the standard techniques of superimposed coding to handle general Prolog terms, including functors and variables, thus making it simple to store Prolog rules in the database.</abstract></paper>
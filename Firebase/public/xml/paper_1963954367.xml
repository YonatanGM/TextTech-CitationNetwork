<paper id="1963954367"><title>Soft typing with conditional types</title><year>1994</year><authors><author org="Computer Science Division, University of California at Berkeley, Berkeley, CA and IBM Almaden Research Center 650 Harry Rd., San Jose, CA" id="2067453598">Alexander Aiken</author><author org="IBM Almaden Research Center, 650 Harry Rd., San Jose, CA" id="2035704235">Edward L. Wimmers</author><author org="Department of Computer Science, University of Illinois at Urbana-Champaign, 1304 W. Springfield Ave, Urbana, IL" id="1828262200">T. K. Lakshman</author></authors><n_citation>176</n_citation><doc_type>Conference</doc_type><references><reference>1581551064</reference><reference>1703087989</reference><reference>1775921724</reference><reference>1969093922</reference><reference>1971344734</reference><reference>1992520783</reference><reference>2001507716</reference><reference>2001744589</reference><reference>2007313703</reference><reference>2022443117</reference><reference>2032851831</reference><reference>2057085278</reference><reference>2088126145</reference><reference>2101085206</reference><reference>2139966078</reference><reference>2161100976</reference><reference>2163976959</reference><reference>2166822586</reference><reference>2172307690</reference><reference>2293770661</reference><reference>2912351643</reference></references><venue id="1160032607" type="C">Symposium on Principles of Programming Languages</venue><doi>10.1145/174675.177847</doi><keywords><keyword weight="0.65062">Type system</keyword><keyword weight="0.45856">Programming language</keyword><keyword weight="0.45532">Computer science</keyword><keyword weight="0.67606">Algebraic data type</keyword><keyword weight="0.46553">Theoretical computer science</keyword><keyword weight="0.65162">Type inference</keyword><keyword weight="0.64677">Generalized algebraic data type</keyword><keyword weight="0.68387">Type family</keyword><keyword weight="0.6711">Recursive data type</keyword><keyword weight="0.71136">Type constructor</keyword><keyword weight="0.64053">Abstract type</keyword></keywords><publisher>ACM</publisher><abstract>We present a simple and powerful type inference method for dynamically typed languages where no type information is supplied by the user. Type inference is reduced to the problem of solvability of a system of type inclusion constraints over a type language that includes function types, constructor types, union, intersection, and recursive types, and conditional types. Conditional types enable us to analyze control flow using type inference, thus facilitating computation of accurate types. We demonstrate the power and practicality of the method with examples and performance results from an implementation.</abstract></paper>
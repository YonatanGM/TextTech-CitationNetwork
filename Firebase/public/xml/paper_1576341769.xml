<paper id="1576341769"><title>FT-MPI: Fault Tolerant MPI, Supporting Dynamic Applications in a Dynamic World</title><year>2000</year><authors><author org="University of Tennessee‡" id="2021370764">Graham E. Fagg</author><author org="University of Tennessee‡" id="288512535">Jack Dongarra</author></authors><n_citation>278</n_citation><doc_type>Conference</doc_type><references><reference>1759783712</reference><reference>2039088133</reference><reference>2126071114</reference><reference>2158479991</reference><reference>2171453084</reference></references><venue id="2756308493" type="C">European PVM/MPI Users Group Meeting on Recent Advances in Parallel Virtual Machine and Message Passing Interface</venue><doi>10.1007/3-540-45255-9_47</doi><keywords><keyword weight="0.45281">Mean time between failures</keyword><keyword weight="0.45915">Virtual machine</keyword><keyword weight="0.45048">Computer science</keyword><keyword weight="0.46549">Parallel computing</keyword><keyword weight="0.45659">Process modeling</keyword><keyword weight="0.53214">Fault tolerance</keyword><keyword weight="0.47173">Distributed algorithm</keyword><keyword weight="0.47253">Message queue</keyword><keyword weight="0.42754">Semantics</keyword><keyword weight="0.48831">Message passing</keyword><keyword weight="0.46896">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Initial versions of MPI were designed to work efficiently on multiprocessors which had very little job control and thus static process models, subsequently forcing them to support dynamic process operations would have effected their performance. As current HPC systems increase in size with higher potential levels of individual node failure, the need rises for new fault tolerant systems to be developed. Here we present a new implementation of MPI called FT-MPI that allows the semantics and associated failure modes to be completely controlled by the application. Given is an overview of the FT-MPI semantics, design and some performance issues as well as the HARNESS g_hcore implementation it is built upon.</abstract></paper>
<paper id="1980468060"><title>A safe approximate algorithm for interprocedural pointer aliasing</title><year>2004</year><authors><author org="Siemens Corporate Research Princeton, NJ#TAB#" id="2033631000">William Landi</author><author org="Rutgers Univ.,Piscataway, NJ#TAB#" id="2139647612">Barbara G. Ryder</author></authors><n_citation>284</n_citation><doc_type>Conference</doc_type><references><reference>1543471126</reference><reference>1577294234</reference><reference>1602885681</reference><reference>1964583443</reference><reference>1966449927</reference><reference>1970061809</reference><reference>1972427803</reference><reference>1975514564</reference><reference>1975914482</reference><reference>2003011196</reference><reference>2004419599</reference><reference>2009911326</reference><reference>2016558072</reference><reference>2019709986</reference><reference>2021986357</reference><reference>2030697178</reference><reference>2036555984</reference><reference>2043100293</reference><reference>2044354349</reference><reference>2046699259</reference><reference>2048683749</reference><reference>2054120966</reference><reference>2069476565</reference><reference>2074954052</reference><reference>2075055870</reference><reference>2077102566</reference><reference>2087612811</reference><reference>2088126145</reference><reference>2092003307</reference><reference>2095115578</reference><reference>2096139068</reference><reference>2096587139</reference><reference>2102440514</reference><reference>2105046722</reference><reference>2111695742</reference><reference>2113238444</reference><reference>2117426803</reference><reference>2124153277</reference><reference>2131135493</reference><reference>2132685964</reference><reference>2135697103</reference><reference>2138986001</reference><reference>2145913834</reference><reference>2151360539</reference></references><venue id="1127352206" type="C">Programming Language Design and Implementation</venue><doi>10.1145/989393.989440</doi><keywords><keyword weight="0.51876">Program optimization</keyword><keyword weight="0.55048">Pointer (computer programming)</keyword><keyword weight="0.6007">Pointer analysis</keyword><keyword weight="0.5947">Alias</keyword><keyword weight="0.44556">Programming language</keyword><keyword weight="0.44114">Computer science</keyword><keyword weight="0.62409">Pointer aliasing</keyword><keyword weight="0.45219">Algorithm</keyword><keyword weight="0.50846">Data-flow analysis</keyword><keyword weight="0.44402">Theoretical computer science</keyword><keyword weight="0.66307">Alias analysis</keyword><keyword weight="0.52061">Program analysis</keyword></keywords><publisher>ACM</publisher><abstract>During execution, when two or more names exist for the same location at some program point, we call them aliases. In a language which allows arbitrary pointers, the problem of determining aliases at a program point is P-space-hard [Lan92]. We present an algorithm for the Conditional May Alias problem, which can be used to safely approximate Interprocedural May Alias in the presence of pointers. This algorithm is as precise as possible in the worst case and has been implemented in a prototype analysis tool for C programs. Preliminary speed and precision results are presented.</abstract></paper>
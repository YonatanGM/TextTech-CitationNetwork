<paper id="1938177792"><title>Cost and imprecision in modeling the position of moving objects</title><year>1998</year><authors><author org="Dept. of Electr. Eng &amp; Comput. Sci., Illinois Univ., Chicago, IL, USA" id="2175821055">O. Wolfson</author><author org="" id="2951012093">S. Chamberlain</author><author org="" id="2951348251">Son Dao</author><author org="" id="2153144595">Liqin Jiang</author><author org="" id="2655942748">G. Mendez</author></authors><n_citation>158</n_citation><doc_type>Conference</doc_type><references><reference>1869322803</reference><reference>1987965750</reference><reference>2099397891</reference><reference>2294081347</reference></references><venue id="1163988186" type="C">International Conference on Data Engineering</venue><doi>10.1109/ICDE.1998.655822</doi><keywords><keyword weight="0.46367">Mile</keyword><keyword weight="0.4534">Data mining</keyword><keyword weight="0.45823">Information retrieval</keyword><keyword weight="0.45523">Computer science</keyword><keyword weight="0.60628">View</keyword><keyword weight="0.57777">Database design</keyword><keyword weight="0.54696">Temporal database</keyword><keyword weight="0.4551">Database</keyword></keywords><publisher>IEEE</publisher><abstract>Consider a database that represents the location of moving objects, such as taxi-cabs (typical query: "retrieve the cabs that are currently within 1 mile of 33 Michigan Ave., Chicago"), or objects in a battle-field. Existing database management systems (DBMSs) are not well equipped to handle continuously changing data, such as the position of moving objects, since data is assumed to be constant unless it is explicitly modified. In this paper, we address position-update policies and imprecision. Assuming that the actual position of a moving object m deviates from the position computed by the DBMS, when should m update its position in the database in order to eliminate the deviation? Furthermore, how can the DBMS provide a bound on the error (i.e. the deviation) when it replies to a query, such as: "what is the current position of m?" We propose a cost-based approach to update policies that answers both questions. We develop several update policies and analyze them theoretically and experimentally.</abstract></paper>
<paper id="1480371907"><title>Optimizing Active Database Transactions: A New Perspective</title><year>1996</year><authors><author org="Inria, Le Chesnay, France" id="241925390">Francois Llirbat</author><author org="Inria, Le Chesnay, France" id="2108660490">Eric Simon</author></authors><n_citation>2</n_citation><doc_type /><references><reference>35271428</reference><reference>1555797260</reference><reference>1557571809</reference><reference>1946651464</reference><reference>2010053008</reference><reference>2035762642</reference><reference>2054086422</reference><reference>2057472517</reference><reference>2075131751</reference><reference>2079364869</reference><reference>2108313869</reference><reference>2116502002</reference><reference>2133752438</reference><reference>2134600551</reference><reference>2137627189</reference><reference>2462855588</reference></references><venue id="" type="">ARTDB</venue><doi>10.1007/978-1-4471-3080-2_2</doi><keywords><keyword weight="0.64388">Transaction processing</keyword><keyword weight="0.68929">Compensating transaction</keyword><keyword weight="0.66779">Serializability</keyword><keyword weight="0.46647">Computer science</keyword><keyword weight="0.66852">Online transaction processing</keyword><keyword weight="0.63939">Schedule (computer science)</keyword><keyword weight="0.6288">Consistency (database systems)</keyword><keyword weight="0.67078">Database transaction</keyword><keyword weight="0.70695">Distributed transaction</keyword><keyword weight="0.4578">Database</keyword></keywords><publisher>Springer, London</publisher><abstract>In this paper, we argue that in an active database system, the optimization of user transactions requires that rule and transaction optimization be considered together as a global problem. We propose a simple, yet general, way to model active database transactions. The execution of a user transaction, called a job, is represented as an external task (the user-submitted commands), and a set of condition and action tasks resulting from the triggering of active rules. The proposed model focuses on two essential aspects. At a first level, it describes the order in which the tasks have to be processed. At a next level, it describes where transaction boundaries occur in a job, and how transactions are synchronized. Several other aspects that define the semantics of an active rule system are intentionally left out of the model. Using this model, we actually show how (i) the processing of Event-Condition-Action rules can be made more efficient by taking advantage of the structure of user transactions, and (ii) the concurrency of user transactions can be improved if we know the kinds of triggers executed by the transactions and the points at which they are executed within a transaction.</abstract></paper>
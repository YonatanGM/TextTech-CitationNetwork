<paper id="1481320527"><title>Gracefully adding negation and disjunction to Prolog</title><year>1986</year><authors><author org="Logic Programming and Artificial Intelligence Group Department of Computer Science, University of Waterloo, Waterloo, Canada" id="2066970836">David L Poole</author><author org="Logic Programming and Artificial Intelligence Group Department of Computer Science, University of Waterloo, Waterloo, Canada" id="2127323036">Randy Goebel</author></authors><n_citation>23</n_citation><doc_type>Conference</doc_type><references><reference>144460285</reference><reference>1514729613</reference><reference>1530765221</reference><reference>1558779675</reference><reference>1983382292</reference><reference>2100738443</reference></references><venue id="1201110412" type="C">International Conference on Logic Programming</venue><doi>10.1007/3-540-16492-8_112</doi><keywords><keyword weight="0.0">Logic program</keyword><keyword weight="0.58844">Horn clause</keyword><keyword weight="0.44595">Programming language</keyword><keyword weight="0.58548">Negation</keyword><keyword weight="0.42526">Computer science</keyword><keyword weight="0.41843">Algorithm</keyword><keyword weight="0.63095">Negation as failure</keyword><keyword weight="0.58999">Prolog</keyword><keyword weight="0.57751">Proof procedure</keyword><keyword weight="0.45673">Generality</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We show how one can add negation and disjunction to Prolog, with the property that there is no overhead in run time if we do not use the negation, and we only pay for the negation when we actually use it. The extension is based on Lovelandu0027s MESON proof procedure, which requires that a negative ancestor search and availability of contrapostive forms of formulae be added to Prolog. We identify a property of literals that can be statically determined, in order to avoid using the full generality of the full clausal proof procedure when not required.</abstract></paper>
<paper id="1588666994"><title>A prolog Technology Theorem Prover: Implementation by an Extended Prolog Compiler</title><year>1986</year><authors><author org="Artificial Intelligence Center, SRI International," id="2022442184">Mark E. Stickel</author></authors><n_citation>51</n_citation><doc_type>Conference</doc_type><references><reference>144460285</reference><reference>159165748</reference><reference>177650123</reference><reference>1511227906</reference><reference>1514729613</reference><reference>1519434182</reference><reference>1525644138</reference><reference>1529621920</reference><reference>1530765221</reference><reference>1584374742</reference><reference>1587968455</reference><reference>1588745704</reference><reference>1766062603</reference><reference>1974299393</reference><reference>1979811304</reference><reference>2018221833</reference><reference>2021473914</reference><reference>2042551813</reference><reference>2046511504</reference><reference>2062032114</reference><reference>2079874801</reference><reference>2081092823</reference><reference>2085193930</reference><reference>2150470619</reference><reference>2152475379</reference><reference>2740900434</reference><reference>2914936697</reference></references><venue id="1134440762" type="C">Conference on Automated Deduction</venue><doi>10.1007/3-540-16780-3_122</doi><keywords><keyword weight="0.46035">Programming language</keyword><keyword weight="0.43078">Computer science</keyword><keyword weight="0.48757">Unification</keyword><keyword weight="0.53674">Automated theorem proving</keyword><keyword weight="0.42088">Algorithm</keyword><keyword weight="0.43729">Theoretical computer science</keyword><keyword weight="0.49977">Compiler</keyword><keyword weight="0.53332">First-order logic</keyword><keyword weight="0.56753">Prolog</keyword><keyword weight="0.50439">Soundness</keyword><keyword weight="0.57953">Occurs check</keyword><keyword weight="0.43643">Bounded function</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>A Prolog technology theorem prover (PTTP) is an extension of Prolog that is complete for the full first-order predicate calculus. It differs from Prolog in its use of unification with the occurs check for soundness, the model-elimination reduction rule that is added to Prolog inferences to make the inference system complete, and consecutively bounded depth-first search instead of unbounded depth-first search to make the search strategy complete. A Prolog technology theorem prover has been implemented by an extended Prolog-to-Lisp compiler that supports these additional features. It is capable of proving theorems in the full first-order predicate calculus at a rate of thousands of inferences per second.</abstract></paper>
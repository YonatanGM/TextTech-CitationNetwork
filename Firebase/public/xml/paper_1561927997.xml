<paper id="1561927997"><title>Managing Schema Changes in Object-Relationship Databases</title><year>1995</year><authors><author org="Centre de Recherche en Informatique de Nancy (CRIN-CNRS)" id="2577644401">Mohammed Bouneffa</author><author org="Centre de Recherche en Informatique de Nancy (CRIN-CNRS)" id="2276319873">Nacer Boudjlida</author></authors><n_citation>6</n_citation><doc_type>Conference</doc_type><references><reference>1512552654</reference><reference>1596416272</reference><reference>1603379605</reference><reference>1977647614</reference><reference>1982486379</reference><reference>1982731949</reference><reference>1992752048</reference><reference>2087257109</reference><reference>2132610455</reference><reference>2215315499</reference></references><venue id="1176514135" type="C">International Conference on Conceptual Modeling</venue><doi>10.1007/BFb0020525</doi><keywords><keyword weight="0.72073">Schema migration</keyword><keyword weight="0.45872">Computer science</keyword><keyword weight="0.64938">Document Structure Description</keyword><keyword weight="0.77709">Database schema</keyword><keyword weight="0.53883">Data redundancy</keyword><keyword weight="0.48655">Emulation</keyword><keyword weight="0.40068">Facet (geometry)</keyword><keyword weight="0.59369">Schema (psychology)</keyword><keyword weight="0.45524">Database</keyword><keyword weight="0.41913">Restructuring</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Changing a database schema may affect existing data and application programs. Immediate data restructuring is a first usual strategy that transforms the existing database to render it conform to the modified schema, but it does not deal with program adaptation to the changes. An other approach allows the existence of several schema versions for a single database: emulation mechanisms are then used to achieve program adaptation but they cannot avoid data redundancy. Furthermore, both the approaches only considered atomic schema changes. This paper proposes a combination of both the approaches: several facets of the database are virtually maintained: every facet represents the database in conformance to a schema version and only one “reference facet” may be physically stored. Mapping functions among the facets are also maintained: they deliver data items (to a user or to an application program) according to their definitions in a given version of the database schema.</abstract></paper>
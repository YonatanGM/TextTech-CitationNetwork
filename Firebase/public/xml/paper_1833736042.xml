<paper id="1833736042"><title>Polynomial Algorithms for the Synthesis of Bounded Nets</title><year>1995</year><authors><author org="Campus de Beaulieu" id="278497419">Eric Badouel</author><author org="Campus de Beaulieu" id="686889575">Luca Bernardinello</author><author org="Campus de Beaulieu" id="2194520597">Philippe Darondeau</author></authors><n_citation>104</n_citation><doc_type>Conference</doc_type><references><reference>179692292</reference><reference>237151715</reference><reference>1544836592</reference><reference>1978994556</reference><reference>2027775564</reference><reference>2048775824</reference><reference>2071923519</reference><reference>2083948648</reference></references><venue id="2756386172" type="C">Colloquium on trees in Algebra and Programming</venue><doi>10.1007/3-540-59293-8_207</doi><keywords><keyword weight="0.46938">Discrete mathematics</keyword><keyword weight="0.46471">Combinatorics</keyword><keyword weight="0.48863">Regular expression</keyword><keyword weight="0.62134">Petri net</keyword><keyword weight="0.43129">Computer science</keyword><keyword weight="0.56853">Stochastic Petri net</keyword><keyword weight="0.49637">Finite-state machine</keyword><keyword weight="0.47417">Isomorphism</keyword><keyword weight="0.4971">Regular language</keyword><keyword weight="0.5238">Time complexity</keyword><keyword weight="0.53164">Bounded function</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The so-called synthesis problem for nets, which consists in deciding whether a given graph is isomorphic to the case graph of some net, and then constructing the net, has been solved in the litterature for various types of nets, ranging from elementary nets to Petri nets. The common principle for the synthesis is the idea of regions in graphs, representing possible extensions of places in nets. However, no practical algorithm has been defined so far for the synthesis. We give here explicit algorithms solving in polynomial time the synthesis problem for bounded nets from regular languages or from finite automata.</abstract></paper>
<paper id="1573154295"><title>The KeY tool</title><year>2005</year><authors><author org="Department of Computing Science, Chalmers University of Technology, Gothenburg, Sweden#TAB#" id="2055881405">Wolfgang Ahrendt</author><author org="Software Engineering Laboratory, Swiss Federal Institute of Technology in Lausanne, Lausanne EPFL, Switzerland" id="2053272057">Thomas Baar</author><author org="Institute for Computer Science, University of Koblenz-Landau, Koblenz, Germany#TAB#" id="2038785220">Bernhard Beckert</author><author org="Dept. of Computer Science, Univ. of Karlsruhe, Karlsruhe, Germany" id="2042340454">Richard Bubel</author><author org="Department of Computing Science, Chalmers University of Technology, Gothenburg, Sweden#TAB#" id="2987263607">Martin Giese</author><author org="Department of Computing Science, Chalmers University of Technology, Gothenburg, Sweden#TAB#" id="2627263793">Reiner HÃ¤hnle</author><author org="Dept. of Computer Science, Univ. of Karlsruhe, Karlsruhe, Germany" id="2173120123">Wolfram Menzel</author><author org="Department of Computing Science, Chalmers University of Technology, Gothenburg, Sweden#TAB#" id="2043879878">Wojciech Mostowski</author><author org="Dept. of Computer Science, Univ. of Karlsruhe, Karlsruhe, Germany" id="2114916585">Andreas Roth</author><author org="Dept. of Computer Science, Univ. of Karlsruhe, Karlsruhe, Germany" id="2130515345">Steffen Schlager</author><author org="Dept. of Computer Science, Univ. of Karlsruhe, Karlsruhe, Germany" id="2124643958">Peter H. Schmitt</author></authors><n_citation>229</n_citation><doc_type>Journal</doc_type><references><reference>45009287</reference><reference>47653352</reference><reference>582263236</reference><reference>1481362792</reference><reference>1496748331</reference><reference>1499168760</reference><reference>1506722517</reference><reference>1508903366</reference><reference>1510723842</reference><reference>1515803040</reference><reference>1523962105</reference><reference>1574129634</reference><reference>1586448612</reference><reference>1589905862</reference><reference>1594663616</reference><reference>1597013636</reference><reference>1598319336</reference><reference>1659048632</reference><reference>1748251377</reference><reference>1838289520</reference><reference>1841089713</reference><reference>1921371332</reference><reference>1971333026</reference><reference>1987693120</reference><reference>2015255691</reference><reference>2088488063</reference><reference>2107978050</reference><reference>2113848838</reference><reference>2125814171</reference><reference>2129809495</reference><reference>2131733299</reference><reference>2142346010</reference><reference>2157194005</reference><reference>2161825580</reference><reference>2336123333</reference><reference>2568086802</reference></references><venue id="64245694" type="J">Software and Systems Modeling</venue><doi>10.1007/s10270-004-0058-x</doi><keywords><keyword weight="0.47715">Programming language</keyword><keyword weight="0.46183">Computer science</keyword><keyword weight="0.54511">Smart card</keyword><keyword weight="0.66398">Formal specification</keyword><keyword weight="0.64276">Applications of UML</keyword><keyword weight="0.62868">Java Card</keyword><keyword weight="0.66452">Formal methods</keyword><keyword weight="0.66177">Object Constraint Language</keyword><keyword weight="0.54493">Software development</keyword><keyword weight="0.64435">Formal verification</keyword></keywords><publisher>Springer Berlin Heidelberg</publisher><abstract>KeY is a tool that provides facilities for formal specification and verification of programs within a commercial platform for UML based software development. Using the KeY tool, formal methods and object-oriented development techniques are applied in an integrated manner. Formal specification is performed using the Object Constraint Language (OCL), which is part of the UML standard. KeY provides support for the authoring and formal analysis of OCL constraints. The target language of KeY based development is Java Card DL, a proper subset of Java for smart card applications and embedded systems. KeY uses a dynamic logic for Java Card DL to express proof obligations, and provides a state-of-the-art theorem prover for interactive and automated verification. Apart from its integration into UML based software development, a characteristic feature of KeY is that formal specification and verification can be introduced incrementally.</abstract></paper>
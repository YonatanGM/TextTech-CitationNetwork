<paper id="1965765328"><title>An assertion language for data structures</title><year>1975</year><authors><author org="University of Toronto,#TAB#" id="2098910421">Stephen A. Cook</author><author org="University of Toronto,#TAB#" id="2345134772">Derek C. Oppen</author></authors><n_citation>20</n_citation><doc_type>Conference</doc_type><references><reference>1973270254</reference><reference>2111706174</reference></references><venue id="1160032607" type="C">Symposium on Principles of Programming Languages</venue><doi>10.1145/512976.512993</doi><keywords><keyword weight="0.48881">Program optimization</keyword><keyword weight="0.57542">Data structure</keyword><keyword weight="0.0">Correctness proofs</keyword><keyword weight="0.47215">Programming language</keyword><keyword weight="0.0">Complex data structures</keyword><keyword weight="0.46248">Computer science</keyword><keyword weight="0.50687">Axiom</keyword><keyword weight="0.52553">Assertion</keyword><keyword weight="0.46372">Theoretical computer science</keyword><keyword weight="0.56134">High-level programming language</keyword><keyword weight="0.51564">Automatic programming</keyword></keywords><publisher>ACM</publisher><abstract>In this paper we wish to consider the problem of proving assertions about programs that construct and alter arbitrarily complex data structures. In recent years several papers have been written on the subject of proving assertions about such programs; however, the class of data structures considered has generally been a proper sub-class of the class of all data structures, such as the classes of linear lists or trees. [Burstall 1972] discusses the problem of what he calls Distinct Non-repeating Lists and Distinct Non-repeating Trees. [Kowaltowski 1973] extends Burstallu0027s approach. His approach is likewise basically tree-oriented but is applicable to more general data structures. [Laventhal 1974] restricts his attention to u0027simple singly-linked listsu0027, noting the problem of providing u0027a complete framework for correctness proofsu0027 if one attempts to handle very general data structures. [Morris 1972] discusses the question of designing a programming language for general data structures in order to facilitate verification of programs written in such a language. [Standish 1973] provides a set of axioms for the class of data structures in which, for instance, two data structures are equal iff they are component-wise equal.</abstract></paper>
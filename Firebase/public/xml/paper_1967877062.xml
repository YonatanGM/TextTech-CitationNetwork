<paper id="1967877062"><title>Initialization problems for Java</title><year>2000</year><authors><author org="Universita di Pisa" id="2026252948">Egon Börger</author><author org="Universität Ulm" id="2115070196">Wolfram Schulte</author></authors><n_citation>17</n_citation><doc_type /><references><reference>1489990994</reference><reference>1522088162</reference><reference>1578369239</reference><reference>2105360973</reference><reference>2154978557</reference></references><venue id="" type="">Software - Concepts and Tools</venue><doi>10.1007/s003789900003</doi><keywords><keyword weight="0.47239">Programming language</keyword><keyword weight="0.72939">Java annotation</keyword><keyword weight="0.45631">Computer science</keyword><keyword weight="0.69008">Java concurrency</keyword><keyword weight="0.715">Real time Java</keyword><keyword weight="0.69565">Generics in Java</keyword><keyword weight="0.71307">strictfp</keyword><keyword weight="0.69795">Java Modeling Language</keyword><keyword weight="0.67713">Java applet</keyword><keyword weight="0.68925">Java</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>We reveal a grey area in the specification of Java and of its implementation through the Java Virtual Machine (JVM): the treatment of initialization of classes and interfaces. We report the results of our experiments with different implementations of Java, which confirm the theoretical prediction of our work on mathematical models for Java [4] and the JVM [3], namely that the designers of Java and the JVM have used notions of initialization which do not match and which afflict the portability of Java programs. We also show that concurrent initialization may deadlock and that various current Java compilers violate the initialization semantics through standard optimization techniques.</abstract></paper>
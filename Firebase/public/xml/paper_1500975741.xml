<paper id="1500975741"><title>Event-Driven FRP</title><year>2002</year><authors><author org="Yale University" id="2109058210">Zhanyong Wan</author><author org="Yale University" id="2663121153">Walid Taha</author><author org="Yale University" id="2159432867">Paul Hudak</author></authors><n_citation>65</n_citation><doc_type>Conference</doc_type><references><reference>1509606339</reference><reference>1574949544</reference><reference>1576648414</reference><reference>1595351489</reference><reference>1663179985</reference><reference>1771890704</reference><reference>1817199704</reference><reference>1897405783</reference><reference>2005976511</reference><reference>2014932497</reference><reference>2079512738</reference><reference>2089589666</reference><reference>2095343326</reference><reference>2096314727</reference></references><venue id="1124147936" type="C">Practical Aspects of Declarative Languages</venue><doi>10.1007/3-540-45587-6_11</doi><keywords><keyword weight="0.62672">Functional reactive programming</keyword><keyword weight="0.58595">Operational semantics</keyword><keyword weight="0.48129">Programming language</keyword><keyword weight="0.47345">Computer science</keyword><keyword weight="0.55185">Denotational semantics</keyword><keyword weight="0.5594">Imperative programming</keyword><keyword weight="0.46548">Theoretical computer science</keyword><keyword weight="0.59221">Compiler</keyword><keyword weight="0.5508">Formal specification</keyword><keyword weight="0.59433">High-level programming language</keyword><keyword weight="0.54474">Declarative programming</keyword><keyword weight="0.46708">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Functional Reactive Programming (FRP) is a high-level declarative language for programming reactive systems. Previous work on FRP has demonstrated its utility in a wide range of application domains, including animation, graphical user interfaces, and robotics. FRP has an elegant continuous-time denotational semantics. However, it guarantees no bounds on execution time or space, thus making it unsuitable for many embedded real-time applications. To alleviate this problem, we recently developed Real-Time FRP(RT-FRP), whose operational semantics permits us to formally guarantee bounds on both execution time and space.In this paper we present a formally verifiable compilation strategy from a new language based on RT-FRP into imperative code. The new language, called Event-Driven FRP (E-FRP), is more tuned to the paradigm of having multiple external events. While it is smaller than RT-FRP, it features a key construct that allows us to compile the language into efficient code. We have used this language and its compiler to generate code for a small robot controller that runs on a PIC16C66 micro-controller. Because the formal specification of compilation was crafted more for clarity and for technical convenience, we describe an implementation that produces more efficient code.</abstract></paper>
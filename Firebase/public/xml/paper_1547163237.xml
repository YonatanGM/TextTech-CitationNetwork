<paper id="1547163237"><title>Explaining and justifying expert consulting programs</title><year>1981</year><authors><author org="Information Sciences Institute, USC and Laboratory for Computer Science, Massachusetts Institute of Technology#TAB#" id="2427898676">William R. Swartout</author></authors><n_citation>82</n_citation><doc_type>Conference</doc_type><references><reference>1123419</reference><reference>1484314604</reference><reference>1539937695</reference><reference>1604647650</reference><reference>1607892560</reference><reference>1895928490</reference><reference>1966506925</reference><reference>2004765822</reference><reference>2113277794</reference></references><venue id="1203999783" type="C">International Joint Conference on Artificial Intelligence</venue><doi>10.1007/978-1-4612-5108-8_15</doi><keywords><keyword weight="0.47548">Programming language</keyword><keyword weight="0.58191">Programmer</keyword><keyword weight="0.47234">Computer science</keyword><keyword weight="0.5661">Application domain</keyword><keyword weight="0.54904">Domain model</keyword></keywords><publisher>Springer, New York, NY</publisher><abstract>Traditional methods for explaining programs provide explanations by converting to English the code of the program or traces of the execution of that code While such methods can provide adequate explanations of what the program does or did, they typically cannot provide justifications of the code without resorting to canned-text explanations. That is, such systems cannot tell why what the system is doing is a reasonable thing to be doing. The problem is that the knowledge required to provide these justifications is needed only when the program is being written and does not appear in the code :[97],"XPLAIN system uses an automatic programmer to generate the consulting program by refinement from abstract goals. The automatic programmer uses a domain model, consisting of facts about the application domain, and a set of domain principles which drive the refinement process forward. By examining the refinement structure created by the automatic programmer it is possible to provide justifications of the code. This paper discusses the system described above and outlines additional advantages this approach has for explanation.</abstract></paper>
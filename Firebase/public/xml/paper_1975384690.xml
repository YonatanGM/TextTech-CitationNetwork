<paper id="1975384690"><title>Sequential debugging at a high level of abstraction</title><year>1991</year><authors><author org="Div. of Comput. Sci., California Univ., Davis, CA, USA#TAB#" id="2128399538">R.A. Olsson</author><author org="Div. of Comput. Sci., California Univ., Davis, CA, USA#TAB#" id="2645981692">R.H. Crawford</author><author org="Div. of Comput. Sci., California Univ., Davis, CA, USA#TAB#" id="2097104547">W.W. Ho</author><author org="Div. of Comput. Sci., California Univ., Davis, CA, USA#TAB#" id="2151059704">C.E. Wee</author></authors><n_citation>17</n_citation><doc_type>Journal</doc_type><references><reference>1966897630</reference><reference>2015607366</reference><reference>2057304880</reference><reference>2149843953</reference></references><venue id="6725529" type="J">IEEE Software</venue><doi>10.1109/52.88941</doi><keywords><keyword weight="0.0">Human memory</keyword><keyword weight="0.42912">Scratch</keyword><keyword weight="0.54058">Query language</keyword><keyword weight="0.47812">Programming language</keyword><keyword weight="0.44709">Abstraction</keyword><keyword weight="0.46838">Software engineering</keyword><keyword weight="0.46219">Computer science</keyword><keyword weight="0.59817">Debugger</keyword><keyword weight="0.61137">Debugging</keyword></keywords><publisher>IEEE Computer Society Press</publisher><abstract>Efforts to build a better mousetrap for bugs in sequential programs are described. The resulting debugger, called Dalek, is intended to remedy limitations in conventional execution harnesses. Beyond the simple u0027stop and looku0027 features offered by typical breakpoint debuggers, Dalek offers a rich control and query language. Daleku0027s linguistic capabilities for treating sequences of program events offer an improvement over scratch paper as a compensatory technology for human memory limitations. Example applications are given. The very interactive, dynamic style of debugging encouraged by Dalek is discussed. u003e</abstract></paper>
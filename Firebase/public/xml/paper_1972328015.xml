<paper id="1972328015"><title>Just-in-time aspects: efficient dynamic weaving for Java</title><year>2003</year><authors><author org="Swiss Federal Institut of Technology Zürich, Zürich, Switzerland" id="2010227090">Andrei Popovici</author><author org="Swiss Federal Institut of Technology Zürich, Zürich, Switzerland" id="2122271048">Gustavo Alonso</author><author org="Swiss Federal Institut of Technology Zürich, Zürich, Switzerland" id="2112219004">Thomas Gross</author></authors><n_citation>160</n_citation><doc_type>Conference</doc_type><references><reference>9866176</reference><reference>42348403</reference><reference>179743955</reference><reference>1526385399</reference><reference>1541066169</reference><reference>1556226926</reference><reference>1560203588</reference><reference>1602234301</reference><reference>1615603009</reference><reference>1970558557</reference><reference>1991604845</reference><reference>2054943246</reference><reference>2099016869</reference><reference>2102839400</reference><reference>2103297229</reference><reference>2138363365</reference></references><venue id="1194005070" type="C">Aspect-Oriented Software Development</venue><doi>10.1145/643603.643614</doi><keywords><keyword weight="0.54197">Weaving</keyword><keyword weight="0.44392">Architecture</keyword><keyword weight="0.47232">Programming language</keyword><keyword weight="0.54011">Aspect-oriented programming</keyword><keyword weight="0.45777">Computer science</keyword><keyword weight="0.51137">Software design pattern</keyword><keyword weight="0.43269">Real-time computing</keyword><keyword weight="0.61511">Compiler</keyword><keyword weight="0.54268">Just-in-time compilation</keyword><keyword weight="0.53497">Java</keyword></keywords><publisher>ACM</publisher><abstract>Recent developments in service architectures suggest that run-time adaptations could be implemented with dynamic AOP. In this paper we discuss application requirements on run-time AOP support and present a system that addresses these requirements. We provide basic support for weaving using the Just-In-Time compiler, while the AOP system is treated as an exchangeable module on top of the basic support. This approach allows us to provide low run-time overhead, AOP system flexibility, and secure weaving. We provide an extensive empirical evaluation and discuss the tradeoffs resulting from using the JIT compiler and a modularized architecture.</abstract></paper>
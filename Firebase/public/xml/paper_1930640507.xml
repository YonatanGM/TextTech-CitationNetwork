<paper id="1930640507"><title>Freedom, weakness, and determinism: from linear-time to branching-time</title><year>1998</year><authors><author org="California Univ., Berkeley, CA, USA" id="312154185">O. Kupferman</author><author org="" id="2085320119">M.Y. Vardit</author></authors><n_citation>71</n_citation><doc_type>Conference</doc_type><references><reference>117768600</reference><reference>1501731334</reference><reference>1541799124</reference><reference>1554850964</reference><reference>1567730556</reference><reference>1570288637</reference><reference>1593428110</reference><reference>1640973035</reference><reference>1753324106</reference><reference>1755189310</reference><reference>1822320350</reference><reference>1970603830</reference><reference>1988808695</reference><reference>1990609140</reference><reference>1996207810</reference><reference>2007464118</reference><reference>2015640848</reference><reference>2059045337</reference><reference>2072887965</reference><reference>2080267935</reference><reference>2090398333</reference><reference>2100229833</reference><reference>2103475464</reference><reference>2115309705</reference><reference>2117189826</reference></references><venue id="1171002971" type="C">Logic in Computer Science</venue><doi>10.1109/LICS.1998.705645</doi><keywords><keyword weight="0.45479">Discrete mathematics</keyword><keyword weight="0.49059">Automata theory</keyword><keyword weight="0.5628">Model checking</keyword><keyword weight="0.49669">Expression (mathematics)</keyword><keyword weight="0.43343">Computer science</keyword><keyword weight="0.4858">Automaton</keyword><keyword weight="0.52813">Temporal logic</keyword><keyword weight="0.51256">Time complexity</keyword><keyword weight="0.49106">Rotation formalisms in three dimensions</keyword><keyword weight="0.5264">Process calculus</keyword></keywords><publisher>IEEE</publisher><abstract>Model checking is a method for the verification of systems with respect to their specifications. Symbolic model-checking, which enables the verification of large systems, proceeds by calculating fixed-point expressions over the systemu0027s set of states. The /spl mu/-calculus is a branching-time temporal logic with fixed-point operators. As such, it is a convenient logic for symbolic model-checking tools. In particular, the alternation-free fragment of /spl mu/-calculus has a restricted syntax, making the symbolic evaluation of its formulas computationally easy. Formally, it takes time that is linear in the size of the system. On the other hand, specifiers find the /spl mu/-calculus inconvenient. In addition, specifiers often prefer to use Linear-time formalisms. Such formalisms, however, cannot in general be translated to the alternation-free CL-calculus, and their symbolic evaluation involves nesting of fixed-points, resulting in time complexity that is quadratic in the size of the system. In this paper we characterize linear-time properties that can be specified in the alternation-free /spl mu/-calculus. We show that a linear-time property can be specified in the alternation-free /spl mu/-calculus if it can be recognized by a deterministic Buchi automation. We study the problem of deciding whether a linear-time property, specified by either an automaton or an LTL formula, can be translated to an alternation-free /spl mu/-calculus formula, and describe the translation, when exists.</abstract></paper>
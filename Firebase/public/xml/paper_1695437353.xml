<paper id="1695437353"><title>Deductive Model Checking</title><year>1999</year><authors><author org="Computer Science Department, Stanford University, Stanford, CA 94305. sipma@CS.Stanford.EDU#TAB#" id="5168973">Henny B. Sipma</author><author org="Computer Science Department, Stanford University, Stanford, CA 94305. uribe@CS.Stanford.EDU#TAB#" id="1998231181">Tom√°s E. Uribe</author><author org="Computer Science Department, Stanford University, Stanford, CA 94305. manna@CS.Stanford.EDU#TAB#" id="2146370811">Zohar Manna</author></authors><n_citation>75</n_citation><doc_type>Conference</doc_type><references><reference>1479891561</reference><reference>1497571013</reference><reference>1498414460</reference><reference>1501731334</reference><reference>1506013480</reference><reference>1517157359</reference><reference>1525623009</reference><reference>1535168632</reference><reference>1540180001</reference><reference>1543208154</reference><reference>1544197810</reference><reference>1550110278</reference><reference>1551406732</reference><reference>1558647152</reference><reference>1559397325</reference><reference>1575118279</reference><reference>1582320864</reference><reference>1582986256</reference><reference>1593428110</reference><reference>1602383075</reference><reference>1602995535</reference><reference>1605381479</reference><reference>1627776297</reference><reference>1659048632</reference><reference>1699259381</reference><reference>1798280647</reference><reference>1987073197</reference><reference>2043100293</reference><reference>2045112813</reference><reference>2065353132</reference><reference>2070908350</reference><reference>2080267935</reference><reference>2090106217</reference><reference>2098283416</reference><reference>2102548669</reference><reference>2137939231</reference><reference>2142423074</reference><reference>2570289169</reference><reference>2579953882</reference></references><venue id="1169806927" type="C">Formal Methods</venue><doi>10.1023/A:1008791913551</doi><keywords><keyword weight="0.0">Graph</keyword><keyword weight="0.69403">Abstraction model checking</keyword><keyword weight="0.47594">Programming language</keyword><keyword weight="0.61695">Model checking</keyword><keyword weight="0.47772">Abstraction</keyword><keyword weight="0.47025">Computer science</keyword><keyword weight="0.48025">Theoretical computer science</keyword><keyword weight="0.50724">Infinite set</keyword><keyword weight="0.55075">Counterexample</keyword><keyword weight="0.49162">Reactive system</keyword><keyword weight="0.49232">Computation</keyword></keywords><publisher>Kluwer Academic Publishers</publisher><abstract>We present an extension of classical tableau-based model checking procedures to the case of infinite-state systems, using deductive methods in an incremental construction of the behavior graph. Logical formulas are used to represent infinite sets of states in an abstraction of this graph, which is repeatedly refined in the search for a counterexample computation, ruling out large portions of the graph before they are expanded to the state-level. This can lead to large savings, even in the case of finite-state systems. Only local conditions need to be checked at each step, and previously proven properties can be used to further constrain the search. Although the resulting method is not always automatic, it provides a flexible, general and complete framework that can integrate a diverse number of other verification tools.</abstract></paper>
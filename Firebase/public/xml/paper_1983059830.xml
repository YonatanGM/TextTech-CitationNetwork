<paper id="1983059830"><title>Design of Analyzers for Selective Program Analysis</title><year>1981</year><authors><author org="Dept of Computer Science, Purdue University" id="2101839160">J. Arthur</author><author org="" id="2300878252">J. Ramanathan</author></authors><n_citation>9</n_citation><doc_type>Journal</doc_type><references><reference>1594275893</reference><reference>1964071625</reference><reference>1988097631</reference><reference>1991133357</reference><reference>2003587861</reference><reference>2032926330</reference><reference>2068717467</reference><reference>2092492242</reference><reference>2100917927</reference><reference>2102495716</reference><reference>2103411350</reference><reference>2108557864</reference><reference>2123301443</reference><reference>2162436812</reference><reference>2786406250</reference><reference>2885877860</reference></references><venue id="8351582" type="J">IEEE Transactions on Software Engineering</venue><doi>10.1109/TSE.1981.230818</doi><keywords><keyword weight="0.51236">Attribute grammar</keyword><keyword weight="0.45959">Programming language</keyword><keyword weight="0.50574">Programmer</keyword><keyword weight="0.4657">Software engineering</keyword><keyword weight="0.45723">Computer science</keyword><keyword weight="0.52988">Static analysis</keyword><keyword weight="0.0">Program development</keyword><keyword weight="0.51593">Software development process</keyword><keyword weight="0.62952">Program analysis</keyword><keyword weight="0.43525">Spectrum analyzer</keyword><keyword weight="0.63585">Dynamic program analysis</keyword></keywords><publisher>IEEE</publisher><abstract>The need for programming environments which support different phases of the software life cycle using responsive tools is well established. This paper presents a method for developing automatic analyzers which analyze programs and provide programmers with a variety of messages for the purpose of validating these programs in the early stages of program development. We show using an example, that such analyzers can be systematically constructed using an extension of the Attribute Grammar model which reflects the fact that a program analyzer should perform a static analysis of the program as well as monitor its dynamic behavior efficiently. One of the advantages of the model is that a systematic interaction is allowed between the static and dynamic attributes of the program. We illustrate that an advantage of this interaction is selective program instrumentation. That is, the analyzer is responsive to the programmeru0027s needs by providing a selective analysis of the programu0027s behavior rather than an exhaustive analysis which is difficult to comprehend.</abstract></paper>
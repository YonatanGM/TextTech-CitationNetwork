<paper id="1553263010"><title>AutoPA: automatic prototyping from requirements</title><year>2010</year><authors><author org="Faculty of Science and Technology,University of Macau" id="2164105355">Xiaoshan Li</author><author org="United Nations University International Institute for Software Technology, Macao," id="2159399964">Zhiming Liu</author><author org="United Nations University International Institute for Software Technology, Macao," id="2085044985">Martin Sch√§f</author><author org="United Nations University, International Institute for Software Technology, Macao and Institute of Software, East China Normal University#TAB#" id="2466963818">Ling Yin</author></authors><n_citation>7</n_citation><doc_type>Conference</doc_type><references><reference>175157178</reference><reference>1482962177</reference><reference>1593874741</reference><reference>2024034783</reference><reference>2111445678</reference><reference>2123130867</reference><reference>2142812159</reference><reference>2158641382</reference><reference>2159181605</reference><reference>2159765281</reference><reference>2161825580</reference></references><venue id="2757049256" type="C">Leveraging Applications of Formal Methods</venue><doi>10.1007/978-3-642-16558-0_49</doi><keywords><keyword weight="0.4784">Programming language</keyword><keyword weight="0.51913">Unified Modeling Language</keyword><keyword weight="0.0">Requirements model</keyword><keyword weight="0.46155">Computer science</keyword><keyword weight="0.56108">Correctness</keyword><keyword weight="0.0">Semantic consistency</keyword><keyword weight="0.60808">Requirements analysis</keyword><keyword weight="0.45937">Syntax</keyword><keyword weight="0.58836">Executable</keyword><keyword weight="0.0">Semantics of logic</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We present AutoPA, a tool to analyze and validate the consistency and functional correctness of use case designs. The tool directly generates an executable prototype from the requirements. The requirements are captured from different views of the application. Each view is constructed as UML diagram annotated with OCL specifications. Based on a formal semantics, the tool is implemented so that both syntactic and semantic consistency among the provided views can be guaranteed. Afterwards the requirements are analyzed and translated into an executable prototype, allowing the user to interactively validate the functional properties of the requirements model. We illustrate the benefits of the tool using a real-world sized example.</abstract></paper>
<paper id="1974716894"><title>CustoMalloc: efficient synthesized memory allocators</title><year>1993</year><authors><author org="Department of Computer Science, Campus Box 430, University of Colorado, Boulder 80309‐0430, U.S.A." id="2310158707">Dirk Grunwald</author><author org="Department of Computer Science, Campus Box 430, University of Colorado, Boulder 80309‐0430, U.S.A." id="2406631840">Benjamin Zorn</author></authors><n_citation>61</n_citation><doc_type>Journal</doc_type><references><reference>1965699975</reference><reference>1967121117</reference><reference>1970854199</reference><reference>2016909415</reference><reference>2027547531</reference><reference>2034958805</reference><reference>2060331194</reference><reference>2061511578</reference><reference>2081626749</reference><reference>2088787213</reference><reference>2091933514</reference><reference>2103913570</reference></references><venue id="122199241" type="J">Software - Practice and Experience</venue><doi>10.1002/spe.4380230804</doi><keywords><keyword weight="0.45155">Programming language</keyword><keyword weight="0.48912">Programmer</keyword><keyword weight="0.48559">Berkeley Software Distribution</keyword><keyword weight="0.44407">Computer science</keyword><keyword weight="0.57191">Memory management</keyword><keyword weight="0.65874">Allocator</keyword><keyword weight="0.0">Memory allocator</keyword><keyword weight="0.459">Operating system</keyword></keywords><publisher>John Wiley &amp; Sons, Inc.</publisher><abstract>The allocation and disposal of memory is a ubiquitous operation in most programs. Rarely do programmers concern themselves with details of memory allocators; most assume that memory allocators provided by the system perform well. Yet, in some applications, programmers use domain-specific knowledge in an attempt to improve the speed or memory utilization of memory :[54],"this paper, we describe a program (CustoMalloc) that synthesizes a memory allocator customized for a specific application. Our experiments show that the synthesized allocators are uniformly faster and more space efficient than the Berkeley UNIX allocator. Constructing a custom allocator requires little programmer effort, usually taking only a few minutes. Experience has shown that the synthesized allocators are not overly sensitive to properties of input sets and the resulting allocators are superior even to domain-specific allocators designed by programmers. Measurements show that synthesized allocators are from two to ten times faster than widely-used allocators.</abstract></paper>
<paper id="1984342415"><title>Abstract interpretation by dynamic partitioning</title><year>1992</year><authors><author org="DIGITAL Paris Research Laboratory" id="2720887342">François Bourdoncle</author></authors><n_citation>75</n_citation><doc_type>Journal</doc_type><references><reference>1536268328</reference><reference>1585404558</reference><reference>1605063794</reference><reference>1994180237</reference><reference>2004419599</reference><reference>2020530016</reference><reference>2025554746</reference><reference>2043100293</reference></references><venue id="12266929" type="J">Journal of Functional Programming</venue><doi>10.1017/S0956796800000496</doi><keywords><keyword weight="0.54569">Data structure</keyword><keyword weight="0.0">Graph</keyword><keyword weight="0.56829">Abstract interpretation</keyword><keyword weight="0.46201">Computer science</keyword><keyword weight="0.49028">A priori and a posteriori</keyword><keyword weight="0.41967">Approximations of π</keyword><keyword weight="0.47611">Theoretical computer science</keyword><keyword weight="0.49598">Computation</keyword></keywords><publisher>Cambridge University Press (CUP)</publisher><abstract>The essential part of abstract interpretation is to build a machine-representable abstract domain expressing interesting properties about the possible states reached by a program at runtime. Many techniques have been developed which assume that one knows in advance the class of properties that are of interest. There are cases however when there are no a priori indications about the u0027bestu0027 abstract properties to use. We introduce a new framework that enables non-unique representations of abstract program properties to be used, and expose a method, called dynamic partitioning, that allows the dynamic determination of interesting abstract domains using data structures built over simpler domains. Finally, we show how dynamic partitioning can be used to compute non-trivial approximations of functions over infinite domains and give an application to the computation of minimal function graphs.</abstract></paper>
<paper id="1972064644"><title>Automated assistance for program restructuring</title><year>1993</year><authors><author org="University of California‐San Diego" id="2112220066">William G. Griswold</author><author org="University of Washington-Seattle," id="477007165">David Notkin</author></authors><n_citation>166</n_citation><doc_type>Journal</doc_type><references><reference>1491178396</reference><reference>1508357244</reference><reference>1975033347</reference><reference>1983992202</reference><reference>1984248430</reference><reference>1985236007</reference><reference>1986591122</reference><reference>1988503504</reference><reference>1988901815</reference><reference>1988905793</reference><reference>2001847301</reference><reference>2012131382</reference><reference>2023299380</reference><reference>2026597794</reference><reference>2043555680</reference><reference>2057085278</reference><reference>2059518671</reference><reference>2064625489</reference><reference>2076090418</reference><reference>2077265102</reference><reference>2102075452</reference><reference>2107165145</reference><reference>2107232214</reference><reference>2110846749</reference><reference>2112221331</reference><reference>2122539696</reference><reference>2131684123</reference><reference>2134119432</reference><reference>2135988257</reference><reference>2143232930</reference><reference>2144344516</reference><reference>2149244483</reference><reference>2162046779</reference><reference>2162310108</reference><reference>2168826696</reference><reference>2293624369</reference><reference>2913217271</reference></references><venue id="142627899" type="J">ACM Transactions on Software Engineering and Methodology</venue><doi>10.1145/152388.152389</doi><keywords><keyword weight="0.44613">Systems engineering</keyword><keyword weight="0.45528">Software engineering</keyword><keyword weight="0.44274">Computer science</keyword><keyword weight="0.45884">Control flow</keyword><keyword weight="0.45015">Exploit</keyword><keyword weight="0.44314">Software</keyword><keyword weight="0.54403">Software maintenance</keyword><keyword weight="0.4799">Software evolution</keyword><keyword weight="0.42507">Semantics</keyword><keyword weight="0.48437">Data flow diagram</keyword><keyword weight="0.61957">Restructuring</keyword></keywords><publisher>ACM</publisher><abstract>Maintenance tends to degrade the structure of software, ultimately making maintenance more costly. At times, then, it is worthwhile to manipulate the structure of a system to make changes easier. However, manual restructuring is an error-prone and expensive activity. By separating structural manipulations from other maintenance activities, the semantics of a system can be held constant by a tool, assuring that no errors are introduced by restructuring. To allow the maintenance team to focus on the aspects of restructuring and maintenance requiring human judgment, a transformation-based tool can be provided—based on a model that exploits preserving data flow dependence and control flow dependence—to automate the repetitive, error-prone, and computationally demanding aspects of restructuring. A set of automatable transformations is introduced; their impact on structure is described, and their usefulness is demonstrated in examples. A model to aid building meaning-preserving restructuring transformations is described, and its realization in a functioning prototype tool for restructuring Scheme programs is discussed.</abstract></paper>
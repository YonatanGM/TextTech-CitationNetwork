<paper id="1550599698"><title>System Compositions and Shared Dependencies</title><year>1996</year><authors><author org="Bell-Labs" id="2150944631">Dewayne E. Perry</author></authors><n_citation>16</n_citation><doc_type>Conference</doc_type><references><reference>1514616618</reference><reference>1990244497</reference><reference>2011779753</reference><reference>2026348832</reference><reference>2100036797</reference><reference>2104182286</reference><reference>2109411754</reference><reference>2113623490</reference><reference>2148238464</reference><reference>2166227371</reference><reference>2166667085</reference><reference>2245403960</reference></references><venue id="2626107884" type="C">Software Configuration Management Workshop</venue><doi>10.1007/BFb0023086</doi><keywords><keyword weight="0.43145">Interdependence</keyword><keyword weight="0.44111">Systems engineering</keyword><keyword weight="0.46547">Computer science</keyword><keyword weight="0.46565">Theoretical computer science</keyword><keyword weight="0.51145">Configuration management</keyword><keyword weight="0.0">Version history</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>Much of the work in configuration management has addressed the problems of version history and derivation. Little has been done to address the problems of reasoning about the consistency of composed components or the effects of substituting one version for another. In my paper, “Version Control in the Inscape Environment” [13], I defined a number of concepts to be used in reasoning about substituting one component for another. In this paper, I discuss the problem of shared dependencies (that is, substituting one of more interdependent components in a context), propose an approach for specifying such dependencies, and show how this approach can be used to reason about the substitution in the context of interdependent components in a configuration.</abstract></paper>
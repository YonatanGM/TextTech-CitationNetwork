<paper id="1979629275"><title>Dependable software needs pervasive debugging</title><year>2002</year><authors><author org="University of Cambridge, Computer Laboratory, Cambridge/UK" id="2148618254">Timothy L. Harris</author></authors><n_citation>10</n_citation><doc_type>Conference</doc_type><references><reference>1870540744</reference><reference>1877496576</reference><reference>1966508340</reference><reference>1969550081</reference><reference>1972544179</reference><reference>1987238172</reference><reference>2029601347</reference><reference>2050353731</reference><reference>2079029390</reference><reference>2085343920</reference><reference>2100792372</reference><reference>2108112890</reference><reference>2154612074</reference><reference>2170389900</reference><reference>2466096069</reference><reference>2509041609</reference></references><venue id="2625581541" type="C">ACM SIGOPS European Workshop</venue><doi>10.1145/1133373.1133380</doi><keywords><keyword weight="0.52943">System under test</keyword><keyword weight="0.46157">Computer science</keyword><keyword weight="0.44793">Real-time computing</keyword><keyword weight="0.47629">Thread (computing)</keyword><keyword weight="0.47887">Robustness (computer science)</keyword><keyword weight="0.48887">Software</keyword><keyword weight="0.58915">Context-aware pervasive systems</keyword><keyword weight="0.51158">Ubiquitous computing</keyword><keyword weight="0.5858">Debugging</keyword><keyword weight="0.46814">Distributed computing</keyword><keyword weight="0.4911">Network performance</keyword></keywords><publisher>ACM</publisher><abstract>Nobody would claim that debugging computer software is easy: all too often it proceeds by trial-and-error experiments in which programmers examine the behaviour of the system and form hypotheses that could explain what they see. These problems are exacerbated when developing distributed, peer-to-peer or multi-processor applications, or when unreliable network links form part of the system under test. Environments for pervasive computing take this to an extreme, allowing user-supplied code to run or migrate within and around the network.In this paper we show how to perform pervasive debugging, enabling complex multi-process applications to be debugged and controlled as single entities and their robustness to changes in network performance to be evaluated. We do this by virtualizing the resources used by the system, allowing the threads that it involves and the network links that it uses to be modelled within a single controllable process.</abstract></paper>
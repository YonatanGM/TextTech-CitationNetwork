<paper id="1484059545"><title>SLWV - A Theorem Prover for Logic Programming</title><year>1992</year><authors><author org="U.Nova de Lisboa" id="2104852094">Luís Moniz Pereira</author><author org="U.Nova de Lisboa" id="2001121806">Luís Caires</author><author org="U.Nova de Lisboa" id="2304619042">José Júlio Alferes</author></authors><n_citation>8</n_citation><doc_type>Conference</doc_type><references><reference>138572563</reference><reference>177650123</reference><reference>1530765221</reference><reference>1588666994</reference><reference>1924552249</reference><reference>1995908030</reference><reference>1998330152</reference><reference>2021473914</reference><reference>2126583599</reference></references><venue id="2755545065" type="C">International Workshop on Extensions of Logic Programming</venue><doi>10.1007/3-540-56454-3_1</doi><keywords><keyword weight="0.46085">Programming language</keyword><keyword weight="0.67113">Horn clause</keyword><keyword weight="0.63714">Definite clause grammar</keyword><keyword weight="0.56046">Second-order logic</keyword><keyword weight="0.44235">Computer science</keyword><keyword weight="0.54568">Automated theorem proving</keyword><keyword weight="0.43395">Algorithm</keyword><keyword weight="0.56409">First-order logic</keyword><keyword weight="0.62015">Prolog</keyword><keyword weight="0.63077">Logic programming</keyword><keyword weight="0.58364">Skolem normal form</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The purpose of this work is to define a theorem prover that retains the procedural aspects of logic programing. The proof system we propose (SLWV-resolution. for Selected Linear Without contrapositive clause Variants)) is defined for a set of clauses in the implicational form (keeping to the form of logic programs). not requiring contrapositives, and has an execution method that respects the execution order of literals in a clause, preserving the procedural flavor of logic programming. SLWV-resolution can be seen as a combination of SL-resolution and case-analysis, which admits a form of linear derivation. We show its soundness and completeness by establishing a one-to-one mapping between SLWV and SL derivations which also clarifies the motivation and the method.Our work can be seen as an extension to logic programs that goes beyond normal programs, and thus beyond (positive) definite clause programming. by allowing also definite negative heads. Thus we admit program clauses with both positive and (classically) negated atoms conjoined in the body, and at most one literal as its head (clauses with disjunctions of literals in the head are transformed into a single clause of that form). As this approach does not require clause contrapositives and admits a leftmost selection function, the implementation can and does preserve the pragmatic procedural reading explicitly provided by the programmer. The implementation. not described here. relies on the source program being preprocessed into directly executable Prolog. Preprocessing keeps the overall program structure untouched. and thus a directly recognizable execution pattern that mimics Prolog is obtained: this is useful in debugging. Additionally. the preprocessing is such that Prolog programs run with negligible overhead. Various program examples and attending derivations are proffered.</abstract></paper>
<paper id="1578878051"><title>Type-Based Decompilation (or Program Reconstruction via Type Reconstruction)</title><year>1999</year><authors><author org="Cambridge Univ." id="163000670">Alan Mycroft</author></authors><n_citation>44</n_citation><doc_type>Conference</doc_type><references><reference>1480108576</reference><reference>1982205631</reference><reference>2051632385</reference><reference>2064922053</reference><reference>2097166325</reference><reference>2166822586</reference><reference>2487105447</reference></references><venue id="1136861413" type="C">European Symposium on Programming</venue><doi>10.1007/3-540-49099-X_14</doi><keywords><keyword weight="0.44859">Converse</keyword><keyword weight="0.46534">Programming language</keyword><keyword weight="0.45308">Computer science</keyword><keyword weight="0.52515">Assembly language</keyword><keyword weight="0.4563">Theoretical computer science</keyword><keyword weight="0.48594">Heuristics</keyword><keyword weight="0.5393">Machine code</keyword><keyword weight="0.49885">Legacy code</keyword><keyword weight="0.49978">Program analysis</keyword><keyword weight="0.51674">Static single assignment form</keyword><keyword weight="0.51537">Recursion</keyword><keyword weight="0.43621">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We describe a system which decompiles (reverse engineers) C programs from target machine code by type-inference techniques. This extends recent trends in the converse process of compiling high-level languages whereby type information is preserved during compilation. The algorithms remain independent of the particular architecture by virtue of treating target instructions as register-transfer specifications. Target code expressed in such RTL form is then transformed into SSA form (undoing register colouring etc.); this then generates a set of type constraints. Iteration and recursion over data-structures causes synthesis of appropriate recursive C structs; this is triggered by and resolves occurs-check constraint violation. Other constraint violations are resolved by Cu0027s casts and unions. In the limit we use heuristics to select between equally suitable C code--a good GUI would clearly facilitate its professional use.</abstract></paper>
<paper id="1804076355"><title>A Formal Semantics of UML State Machines Based on Structured Graph Transformation</title><year>2001</year><authors><author org="University of Bremen" id="304074003">Sabine Kuske</author></authors><n_citation>80</n_citation><doc_type>Journal</doc_type><references><reference>143698982</reference><reference>1501342036</reference><reference>1506818785</reference><reference>1512007370</reference><reference>1531763790</reference><reference>1570069626</reference><reference>1571075905</reference><reference>1573909737</reference><reference>1758496109</reference><reference>1998017916</reference><reference>2059360015</reference><reference>2082530393</reference><reference>2116419508</reference><reference>2136523134</reference><reference>2159765281</reference><reference>2494896344</reference></references><venue id="106296714" type="J">Lecture Notes in Computer Science</venue><doi>10.1007/3-540-45441-1_19</doi><keywords><keyword weight="0.58674">Graph algebra</keyword><keyword weight="0.42628">Discrete mathematics</keyword><keyword weight="0.62489">Operational semantics</keyword><keyword weight="0.6511">UML state machine</keyword><keyword weight="0.63807">UML tool</keyword><keyword weight="0.46116">Computer science</keyword><keyword weight="0.57602">Finite-state machine</keyword><keyword weight="0.46854">Theoretical computer science</keyword><keyword weight="0.67504">Applications of UML</keyword><keyword weight="0.65711">Graph rewriting</keyword><keyword weight="0.62716">Graph (abstract data type)</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>UML state machines are quite popular and useful to specify dynamic components of software systems. They have a formal static semantics but their execution semantics is described only informally. Graph transformation, on the other hand, constitutes a well-studied area with many theoretical results and practical application domains. In this paper, an operational semantics for a subset of UML state machines is proposed which is based on graph transformation. In more detail, a UML state machine is described as a structured graph transformation system in such a way that the wellformedness rules of UML state machines are satisfied and the firing of a (maximum) set of enabled non-conflicting transitions corresponds to the application of a graph transformation rule. The presented approach uses the concept of transformation units, a recently developed modularization concept for graph transformation systems.</abstract></paper>
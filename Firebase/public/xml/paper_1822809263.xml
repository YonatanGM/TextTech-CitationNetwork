<paper id="1822809263"><title>How to Invent a Prolog Machine</title><year>1986</year><authors><author org="Forschungsstelle an der UniversitÃ¤t Karlsruhe" id="225437908">Peter Kursawe</author></authors><n_citation>29</n_citation><doc_type>Conference</doc_type><references><reference>140789701</reference><reference>160118684</reference><reference>272607959</reference><reference>1560895966</reference><reference>1566968514</reference><reference>1984097535</reference><reference>2067693540</reference><reference>2093264024</reference><reference>2098120938</reference><reference>2917970662</reference><reference>2989703932</reference></references><venue id="1201110412" type="C">International Conference on Logic Programming</venue><doi>10.1007/3-540-16492-8_70</doi><keywords><keyword weight="0.48352">Programming language</keyword><keyword weight="0.59385">Pointer machine</keyword><keyword weight="0.50581">Partial evaluation</keyword><keyword weight="0.45824">Computer science</keyword><keyword weight="0.54435">Unification</keyword><keyword weight="0.5926">SECD machine</keyword><keyword weight="0.43454">Algorithm</keyword><keyword weight="0.45286">Theoretical computer science</keyword><keyword weight="0.61751">Compiler</keyword><keyword weight="0.59471">Machine code</keyword><keyword weight="0.59288">Prolog</keyword><keyword weight="0.59732">Abstract machine</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>In this paper we study the compilation of Prolog by making visible hidden operations (especially unification), and then optimizing them using well-known partial evaluation techniques. Inspection of straight forward partially evaluated unification algorithms gives an idea how to design special abstract machine instructions which later form the target language of our compilation. We handle typical compiler problems like representation of terms explicitely. This work gives a logical reconstruction of abstract Prolog machine code, and represents an approach of constructing a correct compiler from Prolog to such a code. As an example, we are explaining the unification principles of Warrenu0027s New Prolog Engine within our framework.</abstract></paper>
<paper id="1496885683"><title>Effective Specialization of Realistic Programs via Use Sensitivity</title><year>1997</year><authors><author org="Irisa Campus Universitaire de Beaulieu" id="230507561">Luke Hornof</author><author org="Irisa Campus Universitaire de Beaulieu" id="171983298">Charles Consel</author><author org="Ecole des Mines de Nantes" id="1936487681">Jacques Noy√©</author></authors><n_citation>31</n_citation><doc_type>Conference</doc_type><references><reference>624678609</reference><reference>1480597667</reference><reference>1487472891</reference><reference>1530314659</reference><reference>1575308494</reference><reference>1577610794</reference><reference>1579170619</reference><reference>1581640735</reference><reference>1582532526</reference><reference>1797198873</reference><reference>1921315132</reference><reference>1967235059</reference><reference>1977606188</reference><reference>1994099276</reference><reference>2005685982</reference><reference>2021951417</reference><reference>2028175476</reference><reference>2038198320</reference><reference>2044549124</reference><reference>2045267561</reference><reference>2058958439</reference><reference>2062764376</reference><reference>2070047551</reference><reference>2077436409</reference><reference>2097145414</reference><reference>2105517037</reference><reference>2106861521</reference><reference>2107202938</reference><reference>2129419910</reference><reference>2159591963</reference><reference>2169415986</reference></references><venue id="1137552346" type="C">Static Analysis Symposium</venue><doi>10.1007/BFb0032749</doi><keywords><keyword weight="0.49821">Procedural programming</keyword><keyword weight="0.49534">Pointer (computer programming)</keyword><keyword weight="0.48382">Data structure</keyword><keyword weight="0.48858">Program transformation</keyword><keyword weight="0.56757">Partial evaluation</keyword><keyword weight="0.45759">Computer science</keyword><keyword weight="0.4507">Theoretical computer science</keyword><keyword weight="0.4565">Exploit</keyword><keyword weight="0.44278">Artificial intelligence</keyword><keyword weight="0.50285">Program analysis</keyword><keyword weight="0.4558">Computer engineering</keyword><keyword weight="0.46846">Empirical research</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>In order to exploit specialization opportunities that exist in programs written by researchers outside of the programming language community, a partial evaluator needs to effectively treat existing realistic applications. Our empirical studies have demonstrated that real-sized applications extensively use non-liftable values such as pointers and data structures. Therefore, it is essential that the binding-time analysis accurately treats nonliftable values. To achieve this accuracy, we introduce the notion of use sensitivity, and present a use-sensitive binding-time analysis for C programs which is obtained by a forward analysis followed by a backward analysis. This analysis has been implemented and integrated into our partial evaluator for C, called Tempo. To validate the effectiveness of our analysis and demonstrate that use sensitivity is critical to obtain highly-specialized programs, we have conducted experimental studies on various components of existing operating systems code. Our results clearly demonstrate that, as opposed to use insensitivity, use sensitivity drastically increases the static computations detected by the analysis which, in practice, leads to successful specialization.</abstract></paper>
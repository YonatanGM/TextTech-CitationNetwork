<paper id="1506868454"><title>Compiling Process Graphs into Executable Code</title><year>2004</year><authors><author org="IBM Zurich Research Laboratory," id="2148184573">Rainer Hauser</author><author org="IBM Zurich Research Laboratory," id="2132947874">Jana Koehler</author></authors><n_citation>44</n_citation><doc_type>Conference</doc_type><references><reference>1487672899</reference><reference>1566454408</reference><reference>1995405030</reference><reference>2017081644</reference><reference>2157527989</reference></references><venue id="1121553062" type="C">Generative Programming and Component Engineering</venue><doi>10.1007/978-3-540-30175-2_17</doi><keywords><keyword weight="0.54857">Metaprogramming</keyword><keyword weight="0.54334">Process graph</keyword><keyword weight="0.4817">Programming language</keyword><keyword weight="0.46517">Computer science</keyword><keyword weight="0.54599">Compiler</keyword><keyword weight="0.53259">High-level programming language</keyword><keyword weight="0.53398">Graph rewriting</keyword><keyword weight="0.55007">Business process modeling</keyword><keyword weight="0.54129">Software development</keyword><keyword weight="0.66473">Executable</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Model-driven architecture envisions a paradigm shift as dramatic as the one from low-level assembler languages to high-level programming languages. In order for this vision to become reality, algorithms are needed that compile models of software systems into deployable and executable implementations. This paper discusses two algorithms that provide such transformations for process graph models in a business process or workflow environment and produce executable programs based on Web services and orchestration languages. The reverse transformations back from executable programs to process graphs are also described.</abstract></paper>
<paper id="1970357395"><title>High-level data flow analysis</title><year>1977</year><authors><author org="IBM Thomas J. Watson, Res. Center, Yorktown Heights, NY#TAB#" id="2078595754">Barry K. Rosen</author></authors><n_citation>66</n_citation><doc_type>Journal</doc_type><references><reference>110734221</reference><reference>1519374584</reference><reference>1556425961</reference><reference>1969077685</reference><reference>2007123446</reference><reference>2022273990</reference><reference>2024332685</reference><reference>2036581868</reference><reference>2037654569</reference><reference>2047615655</reference><reference>2050464392</reference><reference>2072592376</reference><reference>2073788202</reference><reference>2077265102</reference><reference>2092576944</reference><reference>2116098983</reference><reference>2118382442</reference><reference>2123301443</reference><reference>2124153277</reference></references><venue id="103482838" type="J">Communications of The ACM</venue><doi>10.1145/359842.359849</doi><keywords><keyword weight="0.51546">Parse tree</keyword><keyword weight="0.45444">Programming language</keyword><keyword weight="0.5683">Control flow graph</keyword><keyword weight="0.46704">Computer science</keyword><keyword weight="0.54814">Compile time</keyword><keyword weight="0.51688">Control flow</keyword><keyword weight="0.56457">Data-flow analysis</keyword><keyword weight="0.46224">Theoretical computer science</keyword><keyword weight="0.60439">Control flow analysis</keyword><keyword weight="0.55222">Live variable analysis</keyword><keyword weight="0.57533">Data flow diagram</keyword></keywords><publisher>ACM</publisher><abstract>In contrast to the predominant use of low-level intermediate text, high-level data flow analysis deals with programs essentially at source level and exploits the control flow information implicit in the parse tree. The need for high-level flow analysis arises from several aspects of recent work on advanced methods of program certification and optimization. This paper proposes a simple general method of high-level data flow analysis that allows free use of escape and jump statements, avoids large graphs when compiling large programs, facilitates updating of data flow information to reflect program changes, and derives new global information helpful in solving many familiar global flow analysis problems. An illustrative application to live variable analysis is presented. Many of the graphs involved are constructed and analyzed before any programs are compiled, thus avoiding certain costs that low-level methods incur repeatedly at compile time.</abstract></paper>
<paper id="1843304713"><title>Design and Implementation Constructs for the Development of Flexible, Component-Oriented Software Architectures</title><year>2000</year><authors><author org="University of Essen" id="2250860430">Michael Goedicke</author><author org="Vienna University of Economics" id="2113115014">Gustaf Neumann</author><author org="Vienna University of Economics" id="2344120076">Uwe Zdun</author></authors><n_citation>10</n_citation><doc_type>Conference</doc_type><references><reference>46504127</reference><reference>369868522</reference><reference>1499332970</reference><reference>1502457987</reference><reference>1566312660</reference><reference>1581138707</reference><reference>1910673522</reference><reference>2021400450</reference><reference>2088520036</reference><reference>2094282293</reference><reference>2110001365</reference><reference>2128196951</reference><reference>2138363365</reference><reference>2167500728</reference></references><venue id="1190589269" type="C">Component-Based Software Engineering</venue><doi>10.1007/3-540-44815-2_9</doi><keywords><keyword weight="0.50239">USable</keyword><keyword weight="0.4569">Computer science</keyword><keyword weight="0.49328">Language construct</keyword><keyword weight="0.56868">Component-based software engineering</keyword><keyword weight="0.54332">Resource-oriented architecture</keyword><keyword weight="0.51678">Software architecture</keyword><keyword weight="0.53496">Software development</keyword><keyword weight="0.49557">Design pattern</keyword><keyword weight="0.46591">Distributed computing</keyword><keyword weight="0.51492">Scripting language</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Component-orientation is an emerging paradigm that promises components that are usable as prefabricated black-boxes. But components have the problem that they should be changeable and flexibly adaptable to a huge number of different application contexts and to changing requirements. We will argue, that sole parameterization - as the key variation technique of components - is not suitable to cope with all required change scenarios. A proper integration with multiple other paradigms, such as object-orientation, the usage of a scripting language as a flexible component glue, and the exploitation of high-level interception techniques can make components be easier (ex)-changeable and adaptable. These techniques can be applied without interfering with the componentu0027s internals.</abstract></paper>
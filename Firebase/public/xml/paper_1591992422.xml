<paper id="1591992422"><title>Notes on Type Abstraction</title><year>1978</year><authors><author org="University of Southern California" id="120651226">John V. Guttag</author></authors><n_citation>56</n_citation><doc_type /><references><reference>1596025003</reference><reference>2008395018</reference><reference>2015874281</reference><reference>2029126323</reference><reference>2051871492</reference><reference>2054164849</reference><reference>2087828835</reference><reference>2103953153</reference><reference>2110050316</reference><reference>2111706174</reference><reference>2134338128</reference><reference>2148620491</reference><reference>2165121897</reference></references><venue id="" type="">Program Construction, International Summer Schoo</venue><doi>10.1007/BFb0014684</doi><keywords><keyword weight="0.5484">Specification language</keyword><keyword weight="0.5573">Abstract data type</keyword><keyword weight="0.45839">Programming language</keyword><keyword weight="0.54335">Programming language specification</keyword><keyword weight="0.44685">Computer science</keyword><keyword weight="0.54309">Correctness</keyword><keyword weight="0.53919">Formal specification</keyword><keyword weight="0.55901">Generalized algebraic data type</keyword><keyword weight="0.52692">Abstract type</keyword><keyword weight="0.53733">Formal verification</keyword></keywords><publisher>Springer Berlin Heidelberg</publisher><abstract>This paper, which was prepared to accompany a series of lectures given at the 1978 NATO International Summer School on Program Construction, is primarily tutorial in nature. It begins by discussing in a general setting the role of type abstraction and the need for formal specifications of type abstractions. It then proceeds to examine in some detail two approaches to the construction of such specifications: that proposed by Hoare in his 1972 paper "Proofs of Correctness of Data Representations," and the authoru0027s own version of algebraic specifications. The Hoare approach is presented via a discussion of its embodiment in the programming language Euclid. The discussion of the algebraic approach includes material abstracted from earlier papers as well as some new material that has yet to appear. This new material deals with parameterized types and the specification of restrictions. The paper concludes with a brief discussion of the relative merits of the two approaches to type abstraction.</abstract></paper>
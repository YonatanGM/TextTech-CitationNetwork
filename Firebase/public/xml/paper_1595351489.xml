<paper id="1595351489"><title>SCR*: A Toolset for Specifying and Analyzing Software Requirements</title><year>1998</year><authors><author org="Naval Research Laboratory" id="2138945749">Constance L. Heitmeyer</author><author org="Naval Research Laboratory" id="2316429834">James Kirby</author><author org="Naval Research Laboratory" id="2017452263">Bruce G. Labaw</author><author org="Naval Research Laboratory" id="2098528877">Ramesh Bharadwaj</author></authors><n_citation>127</n_citation><doc_type>Conference</doc_type><references><reference>1507959092</reference><reference>1968978437</reference><reference>1985566198</reference><reference>1995362218</reference><reference>2052547909</reference><reference>2125708466</reference><reference>2151056896</reference><reference>2155891457</reference><reference>2163380638</reference></references><venue id="1162450063" type="C">Computer Aided Verification</venue><doi>10.1007/BFb0028775</doi><keywords><keyword weight="0.47532">Notation</keyword><keyword weight="0.53442">Model checking</keyword><keyword weight="0.47146">Computer science</keyword><keyword weight="0.52736">Automated theorem proving</keyword><keyword weight="0.4277">Algorithm</keyword><keyword weight="0.51063">Software</keyword><keyword weight="0.62298">Formal methods</keyword><keyword weight="0.55537">Software development</keyword><keyword weight="0.5636">Software requirements</keyword><keyword weight="0.63189">Formal verification</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>A controversial issue in the formal methods community is the degree to which mathematical sophistication and theorem proving skills should be needed to apply a formal method and its support tools. This paper describes the SCR (Software Cost Reduction) tools, part of a “practical” formal method—a. method with a solid mathematical foundation that software developers can apply without theorem proving skills, knowledge of temporal and higher order logics, or consultation with formal methods experts. The SCR method provides a tabular notation for specifying requirements and a set of “light-weight” tools that detect several classes of errors automatically. The method also provides support for more “heavy-duty” tools, such as a model checker. To make model checking feasible, users can automatically apply one or more abstraction methods.</abstract></paper>
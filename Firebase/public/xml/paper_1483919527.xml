<paper id="1483919527"><title>Type-Checking Revisited: Modular Error-Handling</title><year>1993</year><authors><author org="CWI" id="2677392057">T. B. Dinesh</author></authors><n_citation>10</n_citation><doc_type /><references><reference>128259622</reference><reference>1538991291</reference><reference>1740437405</reference><reference>1938179439</reference><reference>2013399578</reference><reference>2154940799</reference><reference>2912858146</reference></references><venue id="" type="">Proceedings of the International Workshop on Semantics of Specification Languages (SoSL)</venue><doi>10.1007/978-1-4471-3229-5_12</doi><keywords><keyword weight="0.47884">Programming language</keyword><keyword weight="0.0">Type checking</keyword><keyword weight="0.46595">Computer science</keyword><keyword weight="0.54651">Partial algebra</keyword><keyword weight="0.51967">Modular design</keyword><keyword weight="0.51089">Semantics</keyword></keywords><publisher>Springer, London</publisher><abstract>Static-semantics determines the validity of a program, while a type-checker provides more specific type error information. Type-checkers are specified based on the static semantics specification, for the purpose of identifying and presenting type errors in invalid programs.</abstract></paper>
<paper id="1495459135"><title>Validating UML models and OCL constraints</title><year>2000</year><authors><author org="University of Bremen, Computer Science Department, Bremen, Germany#TAB#" id="1736775477">Mark Richters</author><author org="University of Bremen, Computer Science Department, Bremen, Germany#TAB#" id="2162885025">Martin Gogolla</author></authors><n_citation>145</n_citation><doc_type>Journal</doc_type><references><reference>1495380017</reference><reference>1509485343</reference><reference>1573083166</reference><reference>1574057703</reference><reference>2099106391</reference></references><venue id="106296714" type="J">Lecture Notes in Computer Science</venue><doi>10.1007/3-540-40011-7_19</doi><keywords><keyword weight="0.50777">Specification language</keyword><keyword weight="0.46115">Programming language</keyword><keyword weight="0.53337">Unified Modeling Language</keyword><keyword weight="0.71982">UML tool</keyword><keyword weight="0.4414">Computer science</keyword><keyword weight="0.78923">Applications of UML</keyword><keyword weight="0.50785">Computer-aided software engineering</keyword><keyword weight="0.7317">Object Constraint Language</keyword><keyword weight="0.59728">Metamodeling</keyword><keyword weight="0.59911">Class diagram</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The UML has been widely accepted as a standard for modeling software systems and is supported by a great number of CASE tools. However, UML tools often provide only little support for validating models early during the design stage. Also, there is generally no substantial support for constraints written in the Object Constraint Language (OCL). We present an approach for the validation of UML models and OCL constraints that is based on animation. The USE tool (UML-based Specification Environment) supports developers in this process. It has an animator for simulating UML models and an OCL interpreter for constraint checking. Snapshots of a running system can be created, inspected, and checked for conformance with the model. As a special case study, we have applied the tool to parts of the UML 1.3 metamodel and its well-formedness rules. The tool enabled a thorough and systematic check of the OCL well-formedness rules in the UML standard.</abstract></paper>
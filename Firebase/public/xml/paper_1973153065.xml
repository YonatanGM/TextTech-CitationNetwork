<paper id="1973153065"><title>Robustness testing for software components</title><year>2010</year><authors><author org="Department of Computer Science and Technology, Nanjing University, China and International Institute for Software Technology, United Nations University, Macao#TAB#" id="2676449808">Bin Lei</author><author org="Department of Computer Science and Technology, Nanjing University, China#TAB#" id="2918851877">Xuandong Li</author><author org="International Institute for Software Technology, United Nations University, Macao," id="2159399964">Zhiming Liu</author><author org="International Institute for Software Technology, United Nations University, Macao," id="1842579178">Charles Morisset</author><author org="International Institute for Software Technology, United Nations University, Macao," id="1925871413">Volker Stolz</author></authors><n_citation>21</n_citation><doc_type>Journal</doc_type><references><reference>68130004</reference><reference>175157178</reference><reference>1503281761</reference><reference>1545978847</reference><reference>1985213702</reference><reference>1998455310</reference><reference>2002934700</reference><reference>2012211446</reference><reference>2012522051</reference><reference>2052363833</reference><reference>2079929441</reference><reference>2105123292</reference><reference>2107709519</reference><reference>2112640524</reference><reference>2115105266</reference><reference>2121059325</reference><reference>2121775703</reference><reference>2123130867</reference><reference>2123482495</reference><reference>2129718707</reference><reference>2142806284</reference><reference>2142812159</reference><reference>2167500728</reference><reference>2169630048</reference><reference>2172260321</reference><reference>2199154280</reference></references><venue id="21029587" type="J">Science of Computer Programming</venue><doi>10.1016/j.scico.2010.02.005</doi><keywords><keyword weight="0.69032">Robustness testing</keyword><keyword weight="0.46715">Computer science</keyword><keyword weight="0.64854">Manual testing</keyword><keyword weight="0.65212">Non-regression testing</keyword><keyword weight="0.63947">Regression testing</keyword><keyword weight="0.67666">White-box testing</keyword><keyword weight="0.63666">Software performance testing</keyword><keyword weight="0.64551">Software reliability testing</keyword><keyword weight="0.64735">Stress testing (software)</keyword><keyword weight="0.46895">Distributed computing</keyword></keywords><publisher>Elsevier North-Holland, Inc.</publisher><abstract>Component-based development allows one to build software from existing components and promises to improve software reuse and reduce costs. For critical applications, the user of a component must ensure that it fits the requirements of the application. To achieve this, testing is a well-suited means when the source code of the components is not available. Robustness testing is a testing methodology to detect the vulnerabilities of a component under unexpected inputs or in a stressful environment. As components may fail differently in different states, we use a state machine based approach to robustness testing. First, a set of paths is generated to cover transitions of the state machine, and it is used by the test cases to bring the component into a specific control state. Second, method calls with invalid inputs are fed to the component in different states to test the robustness. By traversing the paths, the test cases cover more states and transitions compared to stateless API testing. We apply our approach to several components, including open source software, and compare our results with existing approaches.</abstract></paper>
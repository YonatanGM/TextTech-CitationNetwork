<paper id="1591964257"><title>Three Tactic Theorem Proving</title><year>1999</year><authors><author org="Microsoft Research Limited" id="2136386745">Don Syme</author></authors><n_citation>38</n_citation><doc_type>Conference</doc_type><references><reference>1488189293</reference></references><venue id="2538859667" type="C">Theorem Proving in Higher Order Logics</venue><doi>10.1007/3-540-48256-3_14</doi><keywords><keyword weight="0.61516">Mizar system</keyword><keyword weight="0.59959">Computer-assisted proof</keyword><keyword weight="0.5623">Logical consequence</keyword><keyword weight="0.46164">Programming language</keyword><keyword weight="0.44949">Computer science</keyword><keyword weight="0.58182">Automated theorem proving</keyword><keyword weight="0.62606">Automated proof checking</keyword><keyword weight="0.42339">Algorithm</keyword><keyword weight="0.6033">Proof theory</keyword><keyword weight="0.60196">Mathematical proof</keyword><keyword weight="0.63393">Proof assistant</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We describe the key features of the proof description language of Declare, an experimental theorem prover for higher order logic. We take a somewhat radical approach to proof description: proofs are not described with tactics but by using just three expressive outlining constructs. The language is "declarative" because each step specifies its logical consequences, i.e. the constants and formulae that are introduced, independently of the justification of that step. Logical constants and facts are lexically scoped in a style reminiscent of structured programming. The style is also heavily "inferential", because Declare relies on an automated prover to eliminate much of the detail normally made explicit in tactic proofs. Declare has been partly inspired by Mizar, but provides better automation. The proof language has been designed to take advantage of this, allowing proof steps to be both large and controlled. We assess the costs and benefits of this approach, and describe its impact on three areas of theorem prover design: Specification, automated reasoning and interaction.</abstract></paper>
<paper id="1581640735"><title>Automatic Construction of Special Purpose Programs</title><year>1982</year><authors><author org="Stanford, University" id="2128472480">Chris Goad</author></authors><n_citation>14</n_citation><doc_type>Conference</doc_type><references><reference>194256761</reference><reference>1484314604</reference><reference>1655990431</reference><reference>1991651582</reference><reference>1996081324</reference><reference>2012436850</reference><reference>2023299380</reference></references><venue id="1134440762" type="C">Conference on Automated Deduction</venue><doi>10.1007/BFb0000060</doi><keywords><keyword weight="0.58214">Functional reactive programming</keyword><keyword weight="0.59087">Procedural programming</keyword><keyword weight="0.59505">Programming paradigm</keyword><keyword weight="0.46096">Computer science</keyword><keyword weight="0.61542">Inductive programming</keyword><keyword weight="0.46011">Algorithm</keyword><keyword weight="0.46978">Theoretical computer science</keyword><keyword weight="0.60491">Symbolic programming</keyword><keyword weight="0.58679">Reactive programming</keyword><keyword weight="0.57582">Computer programming</keyword><keyword weight="0.58302">Automatic programming</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Abstract : According to the usual formulation of the automatic programming task, one starts with a specification of a programming problem, and seeks to automatically construct a program satisfying that specification. This paper concerns a different style of automatic programming. Rather than defining the class of programming problems to be dealt with by the language in which those problems are formulated, we instead consider classes of problems defined in ordinary mathematical terms. Also, our aims are different from the traditional aims of automatic programming in that we are interested primarily in increasing the efficiency of computations, rather than in transferring the burden of programming from human to computer. Let alpha(p, x, y) be a ternary predicate. Suppose that in the course of some large computation we are obliged to repeatedly compute values of y with alpha(p, x, y) from given values of p and x. Suppose further that in the sequence of pu0027s and xu0027s to be treated, p changes slowly and x rapidly. Then we seek to automatically synthesize a fast special purpose program A sub p for each p; A sub p is expected to compute a y with alpha(p, x, y) when given x as input. We present one example of special purpose automatic programming in detail, namely, a method for synthesizing special purpose programs for eliminating the hidden surfaces from displays of three dimensional scenes. (Hidden surface elimination is one of the central problems in three dimensional computer graphics). In a test of the method, a synthetic program specialized to treating a particular scene - but from an arbitrary point of view - proved to be an order of magnitude faster than the best available general purpose algorithm. (Author)</abstract></paper>
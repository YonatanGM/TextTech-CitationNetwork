<paper id="1514680377"><title>TIMES - A Tool for Modelling and Implementation of Embedded Systems</title><year>2002</year><authors><author org=", Uppsala University," id="2074806300">Tobias Amnell</author><author org=", Uppsala University," id="2669774865">Elena Fersman</author><author org=", Uppsala University," id="1560229206">Leonid Mokrushin</author><author org=", Uppsala University," id="2011261465">Paul Pettersson</author><author org=", Uppsala University," id="2124415778">Wang Yi</author></authors><n_citation>119</n_citation><doc_type>Conference</doc_type><references><reference>1482831602</reference><reference>2000947342</reference></references><venue id="1159071770" type="C">Tools and Algorithms for Construction and Analysis of Systems</venue><doi>10.1007/3-540-46002-0_32</doi><keywords><keyword weight="0.46392">Unified Modeling Language</keyword><keyword weight="0.49955">Scheduling (computing)</keyword><keyword weight="0.46214">Computer science</keyword><keyword weight="0.4882">Automaton</keyword><keyword weight="0.51998">Real-time operating system</keyword><keyword weight="0.46509">Real-time computing</keyword><keyword weight="0.51291">Graphical user interface</keyword><keyword weight="0.50048">Reachability problem</keyword><keyword weight="0.46638">Code (cryptography)</keyword><keyword weight="0.46431">Information and Computer Science</keyword><keyword weight="0.46389">Embedded system</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>Times is a modelling and schedulability analysis tool for embedded real-time systems, developed at Uppsala University in 2001. It is appropriate for systems that can be described as a set of preemptive or non-preemptive tasks which are triggered periodically or sporadically by time or external events. It provides a graphical interface for editing and simulation, and an engine for schedulability analysis. The main features of Times are: graphical :[67],"editor for timed automata extended with tasks [1], which allows the user to model a system and the abstract behaviour of its environment In addition the user may specify a set of preemptive or non-preemtive tasks with parameters such as (relative) deadline, execution time, priority, :[114],"simulator, in which the user can validate the dynamic behaviour of the system and see how the tasks execute according to the task parameters and a given scheduling policy. The simulator shows a graphical representation of the generated trace showing the time points when the tasks are released, invoked, suspended, resumed, and :[167],"verifier for schedulability analysis, which is used to check if all reachable states of the complete system are schedulable that is, all task instances meet their deadlines. A symbolic algorithm has been developed based on the DBM techniques and implemented based on the :[167],"verifier of the Uppaal tool :[216],"code generator for automatic synthesis of C-code on LegoOS platform from the model. If the automata model is schedulable according to the schedulability analyser the execution of the generated :[216],"code will meet all the timing constraints specified in the model and the tasks.</abstract></paper>
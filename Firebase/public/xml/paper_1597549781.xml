<paper id="1597549781"><title>Playing Detective: Reconstructing Software Architecture from Available Evidence</title><year>1999</year><authors><author org="Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA 15213, USA. kazman@sei.cmu.edu#TAB#" id="1185439314">Rick Kazman</author><author org="Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA 15213, USA. [email protected]#TAB#" id="2142757084">S. Jeromy Carrière</author></authors><n_citation>221</n_citation><doc_type>Conference</doc_type><references><reference>1533471782</reference><reference>1853117120</reference><reference>1992910442</reference><reference>2021481978</reference><reference>2021672791</reference><reference>2077318760</reference><reference>2096331040</reference><reference>2112486798</reference><reference>2119452943</reference><reference>2136475162</reference><reference>2136688433</reference><reference>2146082668</reference><reference>2153464794</reference><reference>2157130167</reference><reference>2162064942</reference><reference>2164070935</reference><reference>2176490758</reference></references><venue id="1166511975" type="C">Automated Software Engineering</venue><doi>10.1023/A:1008781513258</doi><keywords><keyword weight="0.59261">Database-centric architecture</keyword><keyword weight="0.47483">Software engineering</keyword><keyword weight="0.57486">Multilayered architecture</keyword><keyword weight="0.46592">Computer science</keyword><keyword weight="0.60375">Software architecture description</keyword><keyword weight="0.57634">Software system</keyword><keyword weight="0.60207">Reference architecture</keyword><keyword weight="0.60277">Software architecture</keyword><keyword weight="0.68671">Software architecture recovery</keyword><keyword weight="0.66349">Architectural pattern</keyword></keywords><publisher>Kluwer Academic Publishers</publisher><abstract>Because a system‘s software architecture strongly influences its quality attributes such as modifiability, performance, and security, it is important to analyze and reason about that architecture. However, architectural documentation frequently does not exist, and when it does, it is often “out of sync” with the implemented system. In addition, it is rare that software development begins with a clean slates systems are almost always constrained by existing legacy code. As a consequence, we need to be able to extract information from existing system implementations and utilize this information for architectural reasoning. This paper presents Dali, an open, lightweight workbench that aids an analyst in extracting, manipulating, and interpreting architectural information. By assisting in the reconstruction of architectures from extracted information, Dali helps an analyst redocument architectures, discover the relationship between “as-implemented” and “as-designed” architectures, analyze architectural quality attributes and plan for architectural change.</abstract></paper>
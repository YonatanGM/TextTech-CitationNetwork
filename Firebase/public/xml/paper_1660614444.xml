<paper id="1660614444"><title>Object-Oriented Frameworks and Product Lines</title><year>2000</year><authors><author org="#N#        The University Of Texas" id="2030271208">Don S. Batory</author><author org="#N#        The University Of Texas" id="2776884516">Richard Cardone</author><author org="Georgia Institute of technology;" id="197016611">Yannis Smaragdakis</author></authors><n_citation>69</n_citation><doc_type>Conference</doc_type><references><reference>55072962</reference><reference>1490656280</reference><reference>1560808444</reference><reference>1594638244</reference><reference>1825724634</reference><reference>1939467000</reference><reference>2022373880</reference><reference>2023546887</reference><reference>2030150828</reference><reference>2054481902</reference><reference>2065046873</reference><reference>2077271799</reference><reference>2097083192</reference><reference>2102846053</reference><reference>2115680394</reference><reference>2115703981</reference><reference>2116844130</reference><reference>2123979746</reference><reference>2128419413</reference><reference>2133546079</reference><reference>2137417304</reference><reference>2146645075</reference><reference>2169934995</reference></references><venue id="1190643002" type="C">Software Product Lines</venue><doi>10.1007/978-1-4615-4339-8_13</doi><keywords><keyword weight="0.47156">Programming language</keyword><keyword weight="0.45189">Engineering drawing</keyword><keyword weight="0.54136">Object-oriented programming</keyword><keyword weight="0.48814">Reuse</keyword><keyword weight="0.46616">Computer science</keyword><keyword weight="0.45945">Theoretical computer science</keyword><keyword weight="0.0">Product line</keyword><keyword weight="0.57001">Executable</keyword></keywords><publisher>Springer, Boston, MA</publisher><abstract>Frameworks are a common object-oriented code-structuring technique that is used in application product lines. A framework is a set of abstract classes that embody an abstract design; a framework instance is a set of concrete classes that subclass abstract classes to provide an executable subsystem. Frameworks are designed for reuse: abstract classes encapsulate common code and concrete classes encapsulate instance-specific code. Unfortunately, this delineation of reusable vs. instance-specific code is problematic. Concrete classes of different framework instances can have much in common and there can be variations in abstract classes, all of which lead to unnecessary code replication. In this paper, we show how to overcome these limitations by decomposing frameworks and framework instances into primitive and reusable components. Doing so reduces code replication and creates a component-based product line of frameworks and framework instances.</abstract></paper>
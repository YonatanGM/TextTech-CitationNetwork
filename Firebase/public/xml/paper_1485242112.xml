<paper id="1485242112"><title>A basic abstract semantic algebra</title><year>1984</year><authors><author org="Aarhus University, Denmark " id="2111424059">Peter Mosses</author></authors><n_citation>34</n_citation><doc_type>Conference</doc_type><references><reference>1532071491</reference><reference>1966748830</reference><reference>2007975299</reference><reference>2031588198</reference><reference>2039112578</reference><reference>2100582413</reference><reference>2125471772</reference><reference>2131733202</reference><reference>2134338128</reference><reference>2184268586</reference></references><venue id="2759279913" type="C">International Symposium on Semantics of Data Types</venue><doi>10.1007/3-540-13346-1_4</doi><keywords><keyword weight="0.64838">Denotational semantics of the Actor model</keyword><keyword weight="0.5272">Abstract data type</keyword><keyword weight="0.4592">Programming language</keyword><keyword weight="0.43967">Computer science</keyword><keyword weight="0.60929">Denotational semantics</keyword><keyword weight="0.45013">Theoretical computer science</keyword><keyword weight="0.57818">Semantic equivalence</keyword><keyword weight="0.45259">Operator (computer programming)</keyword><keyword weight="0.58632">Semantic computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>It seems that there are some pragmatic advantages in using Abstract Semantic Algebras (ASAs) instead of λ-notation in denotational semantics. The values of ASAs correspond to “actions” (or “processes”), and the operators correspond to primitive ways of combining actions. There are simple ASAs for the various independent “facets” of actions: a functional ASA for data-flow, an imperative ASA for assignments, a declarative ASA for bindings, etc. The aim is to obtain general ASAs by systematic combination of these simple ASAs.</abstract></paper>
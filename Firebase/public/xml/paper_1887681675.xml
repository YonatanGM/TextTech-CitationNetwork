<paper id="1887681675"><title>Machine-Checking the Java Specification: Proving Type-Safety</title><year>1999</year><authors><author org="Technische Universit채t M체nchen;" id="319962522">David von Oheimb</author><author org="Technische Universit채t M체nchen;" id="42605653">Tobias Nipkow</author></authors><n_citation>83</n_citation><doc_type /><references><reference>1522088162</reference><reference>1553537175</reference><reference>1570258731</reference><reference>1590842522</reference><reference>1644882639</reference><reference>1862378448</reference><reference>1990365157</reference><reference>1994666727</reference><reference>2016945299</reference><reference>2065141544</reference><reference>2092889242</reference><reference>2117534212</reference><reference>2133546079</reference><reference>2136316331</reference><reference>2163009019</reference><reference>2166822586</reference><reference>2913795799</reference></references><venue id="" type="">Formal Syntax and Semantics of Java</venue><doi>10.1007/3-540-48737-9_4</doi><keywords><keyword weight="0.5841">HOL</keyword><keyword weight="0.4664">Programming language</keyword><keyword weight="0.44545">Computer science</keyword><keyword weight="0.62792">Generics in Java</keyword><keyword weight="0.62765">Java Modeling Language</keyword><keyword weight="0.53357">Soundness</keyword><keyword weight="0.5499">Abstract syntax</keyword><keyword weight="0.56876">Java</keyword><keyword weight="0.58007">Type safety</keyword><keyword weight="0.51474">Sublanguage</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>In this article we present Bali, the formalization of a large (hitherto sequential) sublanguage of Java. We give its abstract syntax, type system, well-formedness conditions, and an operational evaluation semantics. Based on these definitions, we can express soundness of the type system, an important design goal claimed to be reached by the designers of Java, and prove that Bali is indeed :[61],"definitions and proofs have been done formally in the theorem prover Isabelle/HOL. Thus this article demonstrates that machine-checking the design of non-trivial programming languages has become a reality.</abstract></paper>
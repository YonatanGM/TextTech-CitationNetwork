<paper id="1921633840"><title>Checking formal specifications under simulation</title><year>1997</year><authors><author org="CAE, Austin, TX, USA" id="2129503598">W. Canfield</author><author org="" id="2974341798">E.A. Emerson</author><author org="CAES" id="2480691383">A. Saha</author></authors><n_citation>17</n_citation><doc_type>Conference</doc_type><references><reference>1501731334</reference><reference>1602995535</reference><reference>1885037678</reference><reference>2015688007</reference><reference>2072887965</reference></references><venue id="1186985151" type="C">International Conference on Computer Design</venue><doi>10.1109/ICCD.1997.628908</doi><keywords><keyword weight="0.66433">Formal equivalence checking</keyword><keyword weight="0.65299">Abstraction model checking</keyword><keyword weight="0.4766">Programming language</keyword><keyword weight="0.63715">Model checking</keyword><keyword weight="0.47191">Computer science</keyword><keyword weight="0.64854">Formal specification</keyword><keyword weight="0.625">Runtime verification</keyword><keyword weight="0.60753">Logic simulation</keyword><keyword weight="0.62752">Formal methods</keyword><keyword weight="0.66142">Formal verification</keyword></keywords><publisher>IEEE</publisher><abstract>"Verification" of large multiprocessor designs currently heavily on simulation. Formal techniques such as model checking are typically only applied to small parts of the system, due to issues of computational and notational complexity. With these two facts in mind the authors have designed a platform which aims to help bridge the gap between formal verification and simulation. They present a temporal logic specification language which includes constructs for specifying system behavior at a high level of abstraction, and discuss its use in simulation and model checking.</abstract></paper>
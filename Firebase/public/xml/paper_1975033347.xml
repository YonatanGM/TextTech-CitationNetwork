<paper id="1975033347"><title>The Programmer's Apprentice: a research overview</title><year>1988</year><authors><author org="Artificial Intelligence Lab., MIT, Cambridge, MA, USA" id="2714098874">C. Rich</author><author org="Artificial Intelligence Lab., MIT, Cambridge, MA, USA" id="2574801098">R.C. Waters</author></authors><n_citation>164</n_citation><doc_type>Journal</doc_type><references><reference>61101914</reference><reference>1490294047</reference><reference>1521209386</reference><reference>1974104233</reference><reference>1991361738</reference><reference>1996508547</reference><reference>2020391296</reference><reference>2032373962</reference><reference>2051113166</reference><reference>2120521451</reference><reference>2133247167</reference></references><venue id="178916657" type="J">IEEE Computer</venue><doi>10.1109/2.86782</doi><keywords><keyword weight="0.41454">Apprenticeship</keyword><keyword weight="0.61203">Programmer</keyword><keyword weight="0.47854">Software engineering</keyword><keyword weight="0.45663">Computer science</keyword><keyword weight="0.49944">Knowledge-based systems</keyword></keywords><publisher>IEEE</publisher><abstract>The long-term goal of the Programmeru0027s Apprentice project is to develop a theory of how expert programmers analyze, synthesize, modify, explain, specify, verify, and document programs. The authors present their vision of the Programmeru0027s Apprentice, the principles and techniques underlying it, and their progress toward it. The primary vehicle for this exposition is three scenarios illustrating the use of the Apprentice in three phases of the programming task: implementation, design, and requirements. The first scenario is taken from a completed working prototype. The second and third scenarios are the targets for prototype systems currently under construction. u003e</abstract></paper>
<paper id="1573218854"><title>Compositionality and Concurrent Networks: Soundness and Completeness of a Proofsystem</title><year>1985</year><authors><author org="University of Nijmegen, Toernooiveld" id="2666406607">Job Zwiers</author><author org="University of Utrecht ," id="2147389281">Willem P. de Roever</author><author org="University of Amsterdam" id="2033843658">Peter van Emde Boas</author></authors><n_citation>70</n_citation><doc_type>Conference</doc_type><references><reference>1964727056</reference><reference>1983409972</reference><reference>2038952689</reference><reference>2073981447</reference><reference>2133673046</reference><reference>2137865376</reference><reference>2140295918</reference><reference>2144545266</reference></references><venue id="1141821850" type="C">International Colloquium on Automata, Languages and Programming</venue><doi>10.1007/BFb0015776</doi><keywords><keyword weight="0.56054">Principle of compositionality</keyword><keyword weight="0.42958">Discrete mathematics</keyword><keyword weight="0.46144">Programming language</keyword><keyword weight="0.44857">Computer science</keyword><keyword weight="0.56848">Soundness</keyword><keyword weight="0.48537">Syntax</keyword><keyword weight="0.50174">Completeness (statistics)</keyword><keyword weight="0.5148">Recursion</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Specification, construction and verification of programs should be done in a compositional way. This means that for each syntactic programming construct it should be possible to infer a specification for the whole construct from specifications of the constituent syntactic components of that construct. A compositional proofsystem is presented for a language that includes parallel executing networks and recursive creation of subnetworks. This system is then shown to be arithmetically complete.</abstract></paper>
<paper id="1541063262"><title>A comparison of bug finding tools for Java</title><year>2004</year><authors><author org="Maryland University, College Park, MD, USA#TAB#" id="2973905947">N. Rutar</author><author org="Maryland University, College Park, MD, USA#TAB#" id="2973493617">C.B. Almazan</author><author org="Maryland University, College Park, MD, USA#TAB#" id="2155210674">J.S. Foster</author></authors><n_citation>216</n_citation><doc_type>Conference</doc_type><references><reference>84258820</reference><reference>1498946538</reference><reference>1912598576</reference><reference>1983119041</reference><reference>1986453394</reference><reference>1993836075</reference><reference>2040060046</reference><reference>2115309705</reference><reference>2135274583</reference><reference>2157657084</reference><reference>2168441850</reference></references><venue id="1157832733" type="C">International Symposium on Software Reliability Engineering</venue><doi>10.1109/ISSRE.2004.1</doi><keywords><keyword weight="0.4693">Programming language</keyword><keyword weight="0.57915">Source code</keyword><keyword weight="0.46208">Computer science</keyword><keyword weight="0.62779">Java annotation</keyword><keyword weight="0.58264">Compile time</keyword><keyword weight="0.64012">Software bug</keyword><keyword weight="0.61168">Real time Java</keyword><keyword weight="0.43594">Real-time computing</keyword><keyword weight="0.50712">Software</keyword><keyword weight="0.58387">Java</keyword><keyword weight="0.56873">Source lines of code</keyword></keywords><publisher>IEEE</publisher><abstract>Bugs in software are costly and difficult to find and fix. In recent years, many tools and techniques have been developed for automatically finding bugs by analyzing source code or intermediate code statically (at compile time). Different tools and techniques have different tradeoffs, but the practical impact of these tradeoffs is not well understood. In this paper, we apply five bug finding tools, specifically Bandera, ESC/Java 2, FindBugs, JLint, and PMD, to a variety of Java programs. By using a variety of tools, we are able to cross-check their bug reports and warnings. Our experimental results show that none of the tools strictly subsumes another, and indeed the tools often find nonoverlapping bugs. We discuss the techniques each of the tools is based on, and we suggest how particular techniques affect the output of the tools. Finally, we propose a meta-tool that combines the output of the tools together, looking for particular lines of code, methods, and classes that many tools warn about.</abstract></paper>
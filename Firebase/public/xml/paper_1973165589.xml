<paper id="1973165589"><title>A runtime system</title><year>1990</year><authors><author org="Department of Computer Science, Princeton University, Princeton" id="2120329599">Andrew W. Appel</author></authors><n_citation>59</n_citation><doc_type /><references><reference>1557045049</reference><reference>1968154493</reference><reference>1979240050</reference><reference>1991450942</reference><reference>2002301065</reference><reference>2010152469</reference><reference>2026557621</reference><reference>2028080565</reference><reference>2058821858</reference><reference>2099305192</reference><reference>2118752667</reference><reference>2131129592</reference><reference>2133979298</reference><reference>2141157907</reference><reference>2156956446</reference><reference>2158364508</reference><reference>2165971729</reference><reference>2611598995</reference></references><venue id="" type="">Lisp and Symbolic Computation archive</venue><doi>10.1007/BF01807697</doi><keywords><keyword weight="0.52992">Data structure</keyword><keyword weight="0.47174">Garbage</keyword><keyword weight="0.47134">Programming language</keyword><keyword weight="0.45793">Computer science</keyword><keyword weight="0.67471">Runtime verification</keyword><keyword weight="0.6058">Code generation</keyword><keyword weight="0.61674">Compiler</keyword><keyword weight="0.68604">Standard ML of New Jersey</keyword><keyword weight="0.47116">Operating system</keyword><keyword weight="0.70291">Runtime system</keyword></keywords><publisher>Kluwer Academic Publishers</publisher><abstract>The runtime data structures of the Standard ML of New Jersey compiler are simple yet general. As a result, code generators are easy to implement, programs execute quickly, garbage collectors are easy to implement and work efficiently, and a variety of runtime facilities can be provided with ease.</abstract></paper>
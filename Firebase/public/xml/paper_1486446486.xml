<paper id="1486446486"><title>Enforcing Confluence of Rule Execution</title><year>1994</year><authors><author org="CWI" id="2002641987">Leonie van der Voort</author><author org="CWI" id="2942164115">Arno Siebes</author></authors><n_citation>6</n_citation><doc_type /><references><reference>180056467</reference><reference>1496689342</reference><reference>1502024545</reference><reference>1524011117</reference><reference>1527259867</reference><reference>1561130787</reference><reference>1585666970</reference><reference>1599271424</reference><reference>2029534504</reference><reference>2038002586</reference><reference>2038567523</reference><reference>2056947248</reference><reference>2077944717</reference><reference>2156266415</reference><reference>2170551989</reference></references><venue id="" type="">Rules in Database Systems</venue><doi>10.1007/978-1-4471-3225-7_12</doi><keywords><keyword weight="0.44143">Commutative property</keyword><keyword weight="0.43224">Computer science</keyword><keyword weight="0.0">View maintenance</keyword><keyword weight="0.43459">Theoretical computer science</keyword><keyword weight="0.50388">Enforcement</keyword><keyword weight="0.51077">Confluence</keyword><keyword weight="0.4366">Designtheory</keyword></keywords><publisher>Springer, London</publisher><abstract>Rules provide the functionality for constraint enforcement and view maintenance. A provably correct implementation of both issues based on rules, requires confluent and terminating behaviour of the rule set. In [15], we introduced a design theory for the static detection of these properties. The detection of confluence is based on commutativity of rule execution, called independence. In this article, we discuss the enforcement of confluence for terminating, dependent rule sets.</abstract></paper>
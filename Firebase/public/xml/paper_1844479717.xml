<paper id="1844479717"><title>Safe and efficient active network programming</title><year>1998</year><authors><author org="IRISA/INRIA, Rennes I Univ., France" id="2282389634">S. Thibault</author><author org="Design and development of adaptive programs and systems" id="171983298">C. Consel</author><author org="Design and development of adaptive programs and systems" id="2155298472">G. Muller</author></authors><n_citation>46</n_citation><doc_type>Conference</doc_type><references><reference>98425039</reference><reference>1480597667</reference><reference>1508742040</reference><reference>1797198873</reference><reference>2000504947</reference><reference>2019722731</reference><reference>2021951417</reference><reference>2021981721</reference><reference>2140083133</reference><reference>2150769115</reference><reference>2294656064</reference></references><venue id="1135638846" type="C">Symposium on Reliable Distributed Systems</venue><doi>10.1109/RELDIS.1998.740484</doi><keywords><keyword weight="0.51068">Domain-specific language</keyword><keyword weight="0.47159">Computer science</keyword><keyword weight="0.54034">Node (networking)</keyword><keyword weight="0.54824">Real time Java</keyword><keyword weight="0.47414">Computer network</keyword><keyword weight="0.54509">Compiler</keyword><keyword weight="0.46166">Real-time computing</keyword><keyword weight="0.5345">Active networking</keyword><keyword weight="0.51086">Router</keyword><keyword weight="0.50236">Throughput</keyword><keyword weight="0.49675">Extensibility</keyword><keyword weight="0.47864">Distributed computing</keyword></keywords><publisher>IEEE Computer Society</publisher><abstract>Active networks are aimed at incorporating programmability into the network to achieve extensibility. One approach to obtaining extensibility is to download router programs into network nodes. This programmability is critical to allow multipoint distributed systems to adapt to network conditions and individual clientsu0027 needs. Although promising, this approach raises critical issues such as safety to achieve reliability despite the complexity of a distributed system, security to protect shared resources, and efficiency to maximize usage of bandwidth. This paper proposes the use of a domain-specific language, PLAN-P, to address all of the above issues. To address safety and security, we give examples of properties of PLAN-P programs that can be automatically checked due to the use of a restricted language. For efficiency, we show that an automatically generated run-time compiler for PLAN-P produces code which outperforms an equivalent compiled Java program. Additionally, we present performance results on a real application (learning bridge) where we obtain 100% of the maximum possible throughput.</abstract></paper>
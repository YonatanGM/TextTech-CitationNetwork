<paper id="1541890612"><title>An algorithm for enumerating all directed spanning trees in a directed graph</title><year>1996</year><authors><author org="Tokyo Inst. of tech." id="2100790447">Takeaki Uno</author></authors><n_citation>22</n_citation><doc_type>Conference</doc_type><references><reference>130518292</reference><reference>144796997</reference><reference>1988738304</reference><reference>2018804864</reference><reference>2022871748</reference><reference>2118382442</reference><reference>2121473031</reference><reference>2127605247</reference></references><venue id="1175727152" type="C">International Symposium on Algorithms and Computation</venue><doi>10.1007/BFb0009492</doi><keywords><keyword weight="0.43656">Discrete mathematics</keyword><keyword weight="0.44399">Combinatorics</keyword><keyword weight="0.60259">Trémaux tree</keyword><keyword weight="0.59638">Tree (graph theory)</keyword><keyword weight="0.35849">Computer science</keyword><keyword weight="0.39228">Algorithm</keyword><keyword weight="0.68428">Spanning tree</keyword><keyword weight="0.58849">Connected dominating set</keyword><keyword weight="0.58692">Shortest-path tree</keyword><keyword weight="0.60665">Feedback arc set</keyword><keyword weight="0.58872">Kruskal's algorithm</keyword><keyword weight="0.64903">Minimum spanning tree</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>A directed spanning tree in a directed graph G=(V, A) is a spanning tree such that no two arcs share their tails. In this paper, we propose an algorithm for listing all directed spanning trees of G. Its time and space complexities are O(¦A¦+ND(¦V¦, ¦A¦)) and O(¦A¦+DS(¦V¦, ¦A¦)), where D(¦V¦, ¦A¦) and DS(¦V¦, ¦A¦) are the time and space complexities of the data structure for updating the minimum spanning tree in an undirected graph with ¦V¦ vertices and ¦A¦ edges. Here N denotes the number of directed spanning trees in G.</abstract></paper>
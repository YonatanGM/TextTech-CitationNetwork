<paper id="1483327805"><title>Verifying Invariants Using theorem Proving</title><year>1996</year><authors><author org="Université J. Fourier and Verilog SA associated with IMAG" id="2139352357">Susanne Graf</author><author org="Université J. Fourier and Verilog SA associated with IMAG" id="2148743472">Hassen Saïdi</author></authors><n_citation>41</n_citation><doc_type>Conference</doc_type><references><reference>1482366459</reference><reference>1540180001</reference><reference>1540998830</reference><reference>1543208154</reference><reference>1551406732</reference><reference>1556247398</reference><reference>1582986256</reference><reference>1825148885</reference><reference>2045112813</reference><reference>2093916942</reference><reference>2129664123</reference></references><venue id="1162450063" type="C">Computer Aided Verification</venue><doi>10.1007/3-540-61474-5_69</doi><keywords><keyword weight="0.46253">Discrete mathematics</keyword><keyword weight="0.52851">Model checking</keyword><keyword weight="0.52789">Invariant (physics)</keyword><keyword weight="0.42013">Computer science</keyword><keyword weight="0.56068">Automated theorem proving</keyword><keyword weight="0.54427">Automated proof checking</keyword><keyword weight="0.44405">Theoretical computer science</keyword><keyword weight="0.57002">Invariant (mathematics)</keyword><keyword weight="0.54791">Fundamental theorem</keyword><keyword weight="0.54002">Fixed-point theorem</keyword><keyword weight="0.57101">Compactness theorem</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Our goal is to use a theorem prover in order to verify invariance properties of distributed systems in a “model checking like” manner. A system S is described by a set of sequential components, each one given by a transition relation and a predicate Init defining the set of initial states. In order to verify that P is an invariant of S, we try to compute, in a model checking like manner, the weakest predicate P′ stronger than P and weaker than Init which is an inductive invariant, that is, whenever P′ is true in some state, then P′ remains true after the execution of any possible transition. The fact that P is an invariant can be expressed by a set of predicates (having no more quantifiers than P) on the set of program variables, one for every possible transition of the system. In order to prove these predicates, we use either automatic or assisted theorem proving depending on their nature.</abstract></paper>
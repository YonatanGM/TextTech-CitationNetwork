<paper id="1835072459"><title>DEAR: a DEbugger for Active Rules in an object-oriented context</title><year>1994</year><authors><author org="University of  the Basque Country" id="2143112704">Oscar Díaz</author><author org="University of  the Basque Country" id="2106658324">Arturo Jaime</author><author org="Heriot-Watt University#TAB#" id="2070167002">Norman W. Paton</author></authors><n_citation>43</n_citation><doc_type /><references><reference>1513964708</reference><reference>1533270337</reference><reference>2115320410</reference><reference>2155849559</reference><reference>2619919118</reference></references><venue id="" type="">In:  Rules in Database Systems; 1993. p. 180-193.</venue><doi>10.1007/978-1-4471-3225-7_11</doi><keywords><keyword weight="0.48062">Programming language</keyword><keyword weight="0.53204">Object-oriented programming</keyword><keyword weight="0.47556">Computer science</keyword><keyword weight="0.63164">Debugger</keyword><keyword weight="0.5156">Control flow</keyword><keyword weight="0.0">Execution time</keyword><keyword weight="0.0">Active systems</keyword><keyword weight="0.46007">Database</keyword><keyword weight="0.59376">Debugging</keyword></keywords><publisher>Springer London</publisher><abstract>Experience using active rules in database systems has shown that, while such rules can be utilised beneficially in a range of applications, it is not a straightforward task to implement, debug or maintain large rule bases. It is thus important for active rule systems to provide debugging and explanation facilities for two reasons: to inform the user which active rules have been fired during the execution of an operation thereby increasing the user’s confidence and understanding of the system, and to help the designer to refine and analyze interactions among rules at, execution time. The idiosyncrasies of the rule’s flow of control, where the rules to be fired cannot be known in advance, introduce some requirements different from those found in debuggers for conventional programming languages. This paper presents an approach to the design and implementation of a debugger for active rules in an object-oriented context. Due to the event-based nature of active systems, special attention has been paid to making explicit the context in which rules are fired, and on providing mechanisms to focus attention during the debugging process. These ideas have been tested empirically in an implementation of a rule debugger for the EXACT rule system of the object-oriented DBMS ADAM.</abstract></paper>
<paper id="1845288604"><title>A Prolog Technology Theorem Prover: A New Exposition and Implementation in Prolog</title><year>1990</year><authors><author org="SRI, International#TAB#" id="2022442184">Mark E. Stickel</author></authors><n_citation>24</n_citation><doc_type>Conference</doc_type><references><reference>144460285</reference><reference>177650123</reference><reference>1514729613</reference><reference>1530765221</reference><reference>1584374742</reference><reference>1974299393</reference><reference>1975592176</reference><reference>1998330152</reference><reference>2021473914</reference><reference>2042551813</reference><reference>2150470619</reference><reference>2884120893</reference></references><venue id="2754737771" type="C">International Symposium on Design and Implementation of Symbolic Computation Systems</venue><doi>10.1007/3-540-52531-9_135</doi><keywords><keyword weight="0.52433">Model elimination</keyword><keyword weight="0.57126">Horn clause</keyword><keyword weight="0.49776">Unification</keyword><keyword weight="0.49575">Lisp</keyword><keyword weight="0.44237">Theoretical computer science</keyword><keyword weight="0.49663">First-order logic</keyword><keyword weight="0.57452">Prolog</keyword><keyword weight="0.58012">Occurs check</keyword><keyword weight="0.49551">Soundness</keyword><keyword weight="0.38992">Mathematics</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>A Prolog technology theorem prover (PTTP) is an extension of Prolog that is complete for the full first-order predicate calculus. It differs from Prolog in its use of unification with the occurs check for soundness, depth-first iterative-deepening search instead of unbounded depth-first search to make the search strategy complete, and the model elimination reduction rule that is added to Prolog inferences to make the inference system complete. This paper describes a new Prolog-based implementation of PTTP. It uses three compile-time transformations to translate formulas into Prolog clauses that directly execute, with the support of a few run-time predicates, the model elimination procedure with depth-first iterative-deepening search and unification with the occurs check. Its high performance exceeds that of Prolog-based PTTP interpreters, and it is more concise and readable than the earlier Lisp-based compiler, which makes it superior for expository purposes. Examples of inputs and outputs of the compile-time transformations provide an easy and quite precise way to explain how PTTP works. This Prolog-based version makes it easier to incorporate PTTP theorem-proving ideas into Prolog programs. Some suggestions are made on extensions to Prolog that could be used to improve PTTPu0027s performance.</abstract></paper>
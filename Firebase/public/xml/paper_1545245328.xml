<paper id="1545245328"><title>Towards a framework for self-adaptive component-based applications</title><year>2003</year><authors><author org="Dépt. Informatique" id="2710971411">Pierre Charles David</author><author org="Dépt. Informatique" id="2282819002">Thomas Ledoux</author></authors><n_citation>84</n_citation><doc_type>Conference</doc_type><references><reference>5554740</reference><reference>1495686243</reference><reference>1548186255</reference><reference>1572988071</reference><reference>1875047684</reference><reference>1975359962</reference><reference>2015554455</reference><reference>2071490148</reference><reference>2133254848</reference><reference>2134116314</reference><reference>2138363365</reference><reference>2142774114</reference></references><venue id="1134465752" type="C">Distributed Applications and Interoperable Systems</venue><doi>10.1007/978-3-540-40010-3_1</doi><keywords><keyword weight="0.47882">Computer science</keyword><keyword weight="0.48875">CPU cache</keyword><keyword weight="0.58947">Separation of concerns</keyword><keyword weight="0.0">Self adaptive</keyword><keyword weight="0.56978">Component-based software engineering</keyword><keyword weight="0.48235">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Nowadays, applications must work in highly dynamic environments, where resources availability, among other factors, can evolve at runtime. To deal with this situation, applications must be self-adaptive, that is adapt themselves to their environment and its evolutions. Our goal is to enable systematic development of self-adaptive component-based applications using the Separation of Concerns principle: we consider adaptation to a specific execution context and its evolutions as a concern which should be treated separately from the rest of an application. In this paper, we first present the general approach we propose and the corresponding development framework and tools we are developing to support it. Then, in order to validate this approach, we use it on a small component-based application to show how it can be made self-adaptive.</abstract></paper>
<paper id="1972741547"><title>Concurrency control issues in nested transactions</title><year>1993</year><authors><author org="University of Kaiserslautern, Federal Republic of Germany" id="2895435932">Theo HÃ¤rder</author><author org="University of stuttgart, Federal Republic of Germany" id="594978399">Kurt Rothermel</author></authors><n_citation>83</n_citation><doc_type>Conference</doc_type><references><reference>118069101</reference><reference>145970518</reference><reference>196018858</reference><reference>1495454977</reference><reference>1498065375</reference><reference>1541273212</reference><reference>1545155892</reference><reference>1553505161</reference><reference>1569340163</reference><reference>1595151077</reference><reference>1991199257</reference><reference>1991494135</reference><reference>2005235940</reference><reference>2009998184</reference><reference>2010042648</reference><reference>2011672446</reference><reference>2014200189</reference><reference>2017319219</reference><reference>2017661003</reference><reference>2037603313</reference><reference>2044555065</reference><reference>2067686439</reference><reference>2068387890</reference><reference>2070742144</reference><reference>2072346647</reference><reference>2072781375</reference><reference>2074907750</reference><reference>2077591300</reference><reference>2106887953</reference><reference>2116436709</reference><reference>2117780839</reference><reference>2118923695</reference><reference>2141024949</reference><reference>2169629375</reference><reference>2389944897</reference></references><venue id="1133523790" type="C">Very Large Data Bases</venue><doi>10.1007/BF01231798</doi><keywords><keyword weight="0.60949">Timestamp-based concurrency control</keyword><keyword weight="0.62142">Isolation (database systems)</keyword><keyword weight="0.64454">Serializability</keyword><keyword weight="0.60707">Concurrency control</keyword><keyword weight="0.57132">Concurrency</keyword><keyword weight="0.45764">Computer science</keyword><keyword weight="0.58726">Nested transaction</keyword><keyword weight="0.62893">Non-lock concurrency control</keyword><keyword weight="0.65109">Optimistic concurrency control</keyword><keyword weight="0.44093">Database</keyword><keyword weight="0.45744">Distributed computing</keyword></keywords><publisher>Springer-Verlag New York, Inc.</publisher><abstract>The concept of nested transactions offers more decomposable execution units and finer-grained control over concurrency and recovery than "flat" transactions. Furthermore, it supports the decomposition of a "unit of work" into subtasks and their appropriate distribution in a computer system as a prerequisite of intratransaction parallelism. However, to exploit its full potential, suitable granules of concurrency control as well as access modes for shared data are necessary. In this article, we investigate various issues of concurrency control for nested transactions. First, the mechanisms for cooperation and communication within nested transactions should not impede parallel execution of transactions among parent and children or among siblings. Therefore, a model for nested transactions is proposed allowing for effective exploitation of intra-transaction parallelism. Starting with a set of basic locking rules, we introduce the concept of "downward inheritance of locks" to make data manipulated by a parent available to its children. To support supervised and restricted access, this concept is refined to "controlled downward inheritance." The initial concurrency control scheme was based on S-X locks for "flat," non-overlapping data objects. In order to adjust this scheme for practical applications, a set of concurrency control rules is derived for generalized lock modes described by a compatibility matrix. Also, these rules are combined with a hierarchical locking scheme to improve selective access to data granules of varying sizes. After having tied together both types of hierarchies (transaction and object), it can be shown how "controlled downward inheritance" for hierarchical objects is achieved in nested transactions. Finally, problems of deadlock detection and resolution in nested transactions are considered.</abstract></paper>
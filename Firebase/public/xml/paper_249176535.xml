<paper id="249176535"><title>Compilation by Transformation in the Glasgow Haskell Compiler</title><year>1995</year><authors><author org="#N#University of Glasgow#N#" id="2142246817">Simon Peyton Jones</author><author org="#N#University of Glasgow#N#" id="2282867093">Andr√© L. M. Santos</author></authors><n_citation>21</n_citation><doc_type /><references><reference>34814984</reference><reference>45961263</reference><reference>126216967</reference><reference>1580664042</reference><reference>1597497095</reference><reference>1966981171</reference><reference>1979240050</reference><reference>2115866888</reference><reference>2118172707</reference><reference>2144037748</reference><reference>2208923056</reference></references><venue id="" type="">Functional Programming</venue><doi>10.1007/978-1-4471-3573-9_13</doi><keywords><keyword weight="0.47717">Programming language</keyword><keyword weight="0.58408">Program transformation</keyword><keyword weight="0.58059">Functional programming</keyword><keyword weight="0.44917">Computer science</keyword><keyword weight="0.44882">Parallel computing</keyword><keyword weight="0.50264">Call site</keyword><keyword weight="0.64229">Code generation</keyword><keyword weight="0.67705">Compiler</keyword><keyword weight="0.71765">Haskell</keyword><keyword weight="0.0">Core language</keyword><keyword weight="0.59886">Dead code</keyword></keywords><publisher>Springer, London</publisher><abstract>In this paper we describe the full set of local program transformations implemented in the Glasgow Haskell Compiler. The transformations are presented as source to source transformations in a simple functional language. The idea is that by composing these simple and small high level transformations one can achieve most of the benefits of more complicated and specialised transformations, many of which are often implemented as code generation optimisations.</abstract></paper>
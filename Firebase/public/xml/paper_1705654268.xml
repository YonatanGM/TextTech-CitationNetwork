<paper id="1705654268"><title>Terminological reasoning with constraint handling rules</title><year>1993</year><authors><author org="" id="2430782174">Philipp Hanschke</author><author org="" id="190508276">Thom Fr√ºhwirth</author></authors><n_citation>29</n_citation><doc_type /><references><reference>1483851856</reference><reference>2049616070</reference><reference>2053384008</reference><reference>2084202433</reference><reference>2145465694</reference></references><venue id="" type="">PPCP</venue><doi>10.22028/D291-25344</doi><keywords><keyword weight="0.47374">Application layer</keyword><keyword weight="0.56322">Knowledge representation and reasoning</keyword><keyword weight="0.47199">Programming language</keyword><keyword weight="0.49591">Inference</keyword><keyword weight="0.46025">Computer science</keyword><keyword weight="0.52477">Lisp</keyword><keyword weight="0.46514">Theoretical computer science</keyword><keyword weight="0.52673">Prolog</keyword><keyword weight="0.46999">Formalism (philosophy)</keyword><keyword weight="0.59903">Constraint Handling Rules</keyword><keyword weight="0.49662">Rotation formalisms in three dimensions</keyword></keywords><publisher /><abstract>Constraint handling rules (CHRs) are a flexible means to implement u0027user-definedu0027 constraints on top of existing host languages (like Prolog and Lisp). Recently, M. Schmidt-Schaus and G. Smolka proposed a new methodology for constructing sound and complete inference algorithms for terminological knowledge representation formalisms in the tradition of KLONE. We propose CHRs as a flexible implementation language for the consistency test of assertions, which is the basis for all terminological reasoning services. implementation :[73],"results in a natural combination of three layers: (i) a constraint layer that reasons in well- understood domains such as rationals or finite domains, (ii) a terminological layer providing a tailored, validated vocabulary on which (iii) the application layer can rely. The flexibility of the approach will be illustrated by extending the formalism, its implementation and an application example (solving configuration problems) with attributes, a new quantifier and concrete domains.</abstract></paper>
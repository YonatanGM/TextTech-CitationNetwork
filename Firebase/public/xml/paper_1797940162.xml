<paper id="1797940162"><title>Flow-Insensitive Interprocedural Alias Analysis in the Presence of Pointers</title><year>1994</year><authors><author org="IBM T.J. Watson research center" id="2547328848">Michael G. Burke</author><author org="IBM T.J. Watson research center" id="260795542">Paul R. Carini</author><author org="IBM T.J. Watson research center" id="2119173613">Jong-Deok Choi</author><author org="State University of New York at New Paltz#TAB#" id="1968016868">Michael Hind</author></authors><n_citation>94</n_citation><doc_type>Conference</doc_type><references><reference>1567694639</reference><reference>1966449927</reference><reference>1966831167</reference><reference>1970061809</reference><reference>1980468060</reference><reference>1984914680</reference><reference>1985614269</reference><reference>2002771912</reference><reference>2004971560</reference><reference>2021986357</reference><reference>2025168586</reference><reference>2031364891</reference><reference>2047615655</reference><reference>2047896115</reference><reference>2048683749</reference><reference>2057085278</reference><reference>2073971651</reference><reference>2086457189</reference><reference>2089074917</reference><reference>2102430469</reference><reference>2102440514</reference><reference>2103326816</reference><reference>2103795388</reference><reference>2110920860</reference><reference>2116098983</reference><reference>2151328120</reference><reference>2151360539</reference><reference>2161044171</reference></references><venue id="1198129048" type="C">Languages and Compilers for Parallel Computing</venue><doi>10.1007/BFb0025882</doi><keywords><keyword weight="0.54719">Pointer (computer programming)</keyword><keyword weight="0.52226">Function pointer</keyword><keyword weight="0.44953">Computer science</keyword><keyword weight="0.39226">Flow (psychology)</keyword><keyword weight="0.45402">Parallel computing</keyword><keyword weight="0.51799">Control flow</keyword><keyword weight="0.52155">Call site</keyword><keyword weight="0.52306">Data-flow analysis</keyword><keyword weight="0.59935">Alias analysis</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Data-flow analysis algorithms can be classified into two categories: flow-sensitive and flow-insensitive. To improve efficiency, flow insensitive interprocedural analyses do not make use of the intraprocedural control flow information associated with individual procedures. Since pointer-induced aliases can change within a procedure, applying known flow-insensitive analyses can result in either incorrect or overly conservative solutions. In this paper, we present a flow-insensitive data flow analysis algorithm that computes interprocedural pointer-induced aliases. We improve the precision of our analysis by (1) making use of certain types of kill information that can be precomputed efficiently, and (2) computing aliases generated in each procedure instead of holding at the exit of each procedure. We improve the efficiency of our algorithm by introducing a technique called deferred evaluation.</abstract></paper>
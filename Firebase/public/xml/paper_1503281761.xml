<paper id="1503281761"><title>Component publications and compositions</title><year>2008</year><authors><author org="State Key Lab. of Computer Science, Institute of Software, CAS, Beijing, China#TAB#" id="2163277098">Naijun Zhan</author><author org="International Institute for Software Technology, United Nations University, Macau," id="2310447534">Eun Young Kang</author><author org="International Institute for Software Technology, United Nations University, Macau," id="2159399964">Zhiming Liu</author></authors><n_citation>21</n_citation><doc_type>Conference</doc_type><references><reference>1756169151</reference><reference>1998455310</reference><reference>2012211446</reference><reference>2078095655</reference><reference>2090962365</reference><reference>2167500728</reference><reference>2293287097</reference><reference>2296704551</reference></references><venue id="1128498849" type="C">Unifying Theories of Programming</venue><doi>10.1007/978-3-642-14521-6_14</doi><keywords><keyword weight="0.63364">Component diagram</keyword><keyword weight="0.56">Refinement calculus</keyword><keyword weight="0.46085">Computer science</keyword><keyword weight="0.45856">Theoretical computer science</keyword><keyword weight="0.0">Third party</keyword><keyword weight="0.47966">Operator (computer programming)</keyword><keyword weight="0.66144">Component (UML)</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>One of the major issues in component-based design is how to use a component correctly in different applications according to the given interface specification, called the publication, of the component. In this paper we formulate this as the problem of component publication composition and refinement. We define the notion of publications of components that describes how a component can be used by a third party in building their own components or in writing their applications without access to the design or the code of the component. It is desirable that different users of the components can be given different publications according to their need. The first contribution of this paper is to provide a procedure, which calculates a weakest contract of the required interface of a component from the contract of its provided interface and its code. The other contribution, that is more significant from a component-based designeru0027s point of view, is to define composition on publications so that the publication of a composite component can be calculated from those of its subcomponents. For this we define a set of primitive composition operators over components, including renaming, hiding, internalizing, plugging and feedback. This theory is presented based on the sematic model of rCOS, a refinement calculus of component and object systems.</abstract></paper>
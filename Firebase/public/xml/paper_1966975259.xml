<paper id="1966975259"><title>Callee-save registers in continuation-passing style</title><year>1992</year><authors><author org="Department of Computer Science, Princeton University, USA" id="2120329599">Andrew W. Appel</author><author org="Department of Computer Science, Princeton University, USA" id="2097698150">Zhong Shao</author></authors><n_citation>17</n_citation><doc_type /><references><reference>45961263</reference><reference>1557045049</reference><reference>1567828704</reference><reference>1580664042</reference><reference>1963658586</reference><reference>1979240050</reference><reference>2026557621</reference><reference>2113757735</reference><reference>2114922959</reference><reference>2118172707</reference><reference>2131129592</reference><reference>2133420304</reference><reference>2133979298</reference><reference>2141157907</reference><reference>2160313335</reference><reference>2165971729</reference></references><venue id="" type="">Lisp and Symbolic Computation archive</venue><doi>10.1007/BF01807505</doi><keywords><keyword weight="0.43074">Lambda calculus</keyword><keyword weight="0.42899">Programming language</keyword><keyword weight="0.4594">Program transformation</keyword><keyword weight="0.4257">Computer science</keyword><keyword weight="0.46051">Free variables and bound variables</keyword><keyword weight="0.50194">Continuation</keyword><keyword weight="0.39865">Algorithm</keyword><keyword weight="0.442">Code generation</keyword><keyword weight="0.45683">Optimizing compiler</keyword><keyword weight="0.45003">Compiler</keyword><keyword weight="0.54805">Continuation-passing style</keyword></keywords><publisher>Kluwer Academic Publishers</publisher><abstract>Continuation-passing style (CPS) is a good abstract representation to use for compilation and optimization: it has a clean semantics and is easily manipulated. We examine how CPS expresses the saving and restoring of registers in source-language procedure calls. In most CPS-based compilers, the context of the calling procedure is saved in a “continuation closure”—a single variable that is passed as an argument to the function being called. This closure is a record containing bindings of all the free variables of the continuation; that is, registers that hold values needed by the caller “after the call” are written to memory in the closure, and fetched back after the call.</abstract></paper>
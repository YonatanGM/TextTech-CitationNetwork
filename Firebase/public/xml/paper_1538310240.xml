<paper id="1538310240"><title>Effective Theorem Proving for Hardware Verification</title><year>1994</year><authors><author org="SRI International," id="2421201338">David Cyrluk</author><author org="SRI international" id="2700375089">S. Rajan</author><author org="SRI, International#TAB#" id="2118526916">Natarajan Shankar</author><author org="SRI, International#TAB#" id="2143082811">Mandayam K. Srivas</author></authors><n_citation>72</n_citation><doc_type /><references><reference>23915378</reference><reference>1534850143</reference><reference>1555915743</reference><reference>1577772892</reference><reference>1741528175</reference><reference>1764512891</reference><reference>1982619477</reference><reference>2000346568</reference><reference>2011889923</reference><reference>2030670832</reference><reference>2047932652</reference><reference>2095572512</reference><reference>2101591864</reference><reference>2124192263</reference><reference>2135453964</reference></references><venue id="" type="">TPCD '94 Proceedings of the Second International Conference on Theorem Provers in Circuit Design - Theory, Practice and Experience</venue><doi>10.1007/3-540-59047-1_50</doi><keywords><keyword weight="0.46748">Adder</keyword><keyword weight="0.48611">Inference</keyword><keyword weight="0.60207">Automated theorem proving</keyword><keyword weight="0.55794">Correctness</keyword><keyword weight="0.46133">Systems design</keyword><keyword weight="0.45837">Theoretical computer science</keyword><keyword weight="0.46181">Automation</keyword><keyword weight="0.5681">Mathematical proof</keyword><keyword weight="0.48168">Rewriting</keyword><keyword weight="0.43946">Computer hardware</keyword><keyword weight="0.39171">Mathematics</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>The attractiveness of using theorem provers for system design verification lies in their generality. The major practical challenge confronting theorem proving technology is in combining this generality with an acceptable degree of automation. We describe an approach for enhancing the effectiveness of theorem provers for hardware verification through the use of efficient automatic procedures for rewriting, arithmetic and equality reasoning, and an off-the-shelf BDD-based propo-sitional simplifier. These automatic procedures can be combined into general-purpose proof strategies that can efficiently automate a number of proofs including those of hardware correctness. The inference procedures and proof strategies have been implemented in the PVS verification system. They are applied to several examples including an N-bit adder, the Saxe pipelined processor, and the benchmark Tamarack microprocessor design. These examples illustrate the basic design philosophy underlying PVS where powerful and efficient low-level inferences are employed within high-level user-defined proof strategies. This approach is contrasted with approaches based on tactics or batch-oriented theorem proving.</abstract></paper>
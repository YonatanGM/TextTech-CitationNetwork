<paper id="1820268915"><title>An architecture for interoperable program understanding tools</title><year>1998</year><authors><author org="Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, USA" id="2974004080">S. Woods</author><author org="" id="2727045277">L. O'Brien</author><author org="" id="2974064352">T. Lin</author><author org="" id="2151028178">K. Gallagher</author><author org="" id="2974762924">A. Quilici</author></authors><n_citation>31</n_citation><doc_type>Conference</doc_type><references><reference>1482546317</reference><reference>1496748331</reference><reference>1501596615</reference><reference>1509186716</reference><reference>1513927499</reference><reference>1529212798</reference><reference>1533471782</reference><reference>1597549781</reference><reference>1694414531</reference><reference>1831037801</reference><reference>1855586798</reference><reference>1966467209</reference><reference>1972093810</reference><reference>1979727623</reference><reference>1996853298</reference><reference>2023925290</reference><reference>2105541008</reference><reference>2116382372</reference><reference>2118564793</reference><reference>2118569497</reference><reference>2129013235</reference><reference>2136688433</reference><reference>2146129810</reference><reference>2154449222</reference><reference>2155438573</reference><reference>2160854692</reference><reference>2169348520</reference><reference>2171447158</reference></references><venue id="2622385070" type="C">Workshop on Program Comprehension</venue><doi>10.1109/WPC.1998.693285</doi><keywords><keyword weight="0.45452">Architecture</keyword><keyword weight="0.45284">Data visualization</keyword><keyword weight="0.46066">Systems engineering</keyword><keyword weight="0.47071">Software engineering</keyword><keyword weight="0.47212">Object-oriented programming</keyword><keyword weight="0.44201">Computer science</keyword><keyword weight="0.44586">Visualization</keyword><keyword weight="0.50818">Interoperability</keyword><keyword weight="0.46044">Reverse engineering</keyword><keyword weight="0.0">Concept recognition</keyword><keyword weight="0.43894">Open system (systems theory)</keyword></keywords><publisher>IEEE</publisher><abstract>Program understanding tools are currently not interoperable, leading researchers to waste significant resources reinventing already existing tools. Even commercial environments that have been designed to support the construction of program understanding tools have serious flaws in this regard. This paper discusses CORUM (Common Object-based Re-engineering Unified Model), an architecture to support interoperability between program understanding tools, and it provides several examples of CORUMu0027s use in the construction of new tools for concept recognition and program visualization.</abstract></paper>
<paper id="1599437687"><title>Framed Aspects: Supporting Variability and Configurability for AOP</title><year>2004</year><authors><author org="Lancaster University ()" id="2105601247">Neil Loughran</author><author org="Lancaster University ()" id="2102895942">Awais Rashid</author></authors><n_citation>66</n_citation><doc_type>Conference</doc_type><references><reference>2093186740</reference><reference>2101730275</reference><reference>2295517865</reference></references><venue id="2756309959" type="C">International Conference on Software Reuse</venue><doi>10.1007/978-3-540-27799-6_11</doi><keywords><keyword weight="0.45917">Domain analysis</keyword><keyword weight="0.0">System structure</keyword><keyword weight="0.50816">Domain engineering</keyword><keyword weight="0.5278">Aspect-oriented programming</keyword><keyword weight="0.44265">Computer science</keyword><keyword weight="0.41811">CPU cache</keyword><keyword weight="0.49116">Reuse</keyword><keyword weight="0.47764">Generic programming</keyword><keyword weight="0.49284">Software development</keyword><keyword weight="0.4456">Distributed computing</keyword></keywords><publisher>Springer Berlin Heidelberg</publisher><abstract>Aspect oriented programming (AOP) seeks to decompose concerns which crosscut system structure into more manageable modules. However, current AOP techniques alone lack the configuration mechanisms and generalisation capabilities that are required to realise variability (through clear reuse specifications). Conversely, frame technology provides extensive mechanisms for providing reuse and configuration yet cannot effectively modularise crosscutting concerns. This paper proposes ’framed aspects’ a technique and methodology which combines the respective strengths of AOP, frame technology and Feature-Oriented Domain Analysis (FODA). We argue that framed aspects can alleviate many of the problems the technologies have when used in isolation and also provide a framework for implementing fine-grained variability. The approach is demonstrated with the design and implementation of a generic caching component.</abstract></paper>
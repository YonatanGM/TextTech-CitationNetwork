<paper id="1974967044"><title>XVCL: a tutorial</title><year>2002</year><authors><author org="Nat. Univ. of Singapore, Singapore#TAB#" id="2018973151">Soe Myat Swe</author><author org="Nat. Univ. of Singapore, Singapore#TAB#" id="2619848081">Hongyu Zhang</author><author org="Nat. Univ. of Singapore, Singapore#TAB#" id="1937785728">Stan Jarzabek</author></authors><n_citation>20</n_citation><doc_type>Conference</doc_type><references><reference>1490474459</reference><reference>1500250067</reference><reference>2010619212</reference><reference>2030376816</reference><reference>2096552721</reference><reference>2118989541</reference><reference>2911646362</reference></references><venue id="1173770489" type="C">Software Engineering and Knowledge Engineering</venue><doi>10.1145/568760.568821</doi><keywords><keyword weight="0.43841">Information system</keyword><keyword weight="0.0">Program code</keyword><keyword weight="0.44421">Programming language</keyword><keyword weight="0.41746">Systems engineering</keyword><keyword weight="0.4646">XML</keyword><keyword weight="0.4475">Software engineering</keyword><keyword weight="0.42769">Computer science</keyword><keyword weight="0.0">Program documentation</keyword><keyword weight="0.44568">Software</keyword><keyword weight="0.46081">Test case</keyword><keyword weight="0.47313">Software architecture</keyword><keyword weight="0.0">Configuration language</keyword></keywords><publisher>ACM</publisher><abstract>XVCL (XML-based Variant Configuration Language) is a general-purpose mark-up language for configuring variants in programs and other types of documents. We can apply XVCL to configure variants in a variety of software assets such as software architecture, program code, test cases, technical and user-level program documentation or requirement specifications. The principles of the XVCL have been thoroughly tested in practice. XVCL is based on the same concepts as the frame technology [1]. Frame technology has been extensively applied in industry to manage variants and evolve multi-million-line, COBOL-based, information systems. An independent analysis showed that frame technology has reduced large software project costs by over 84% and their times-to-market by 70%, when compared to industry norms [1, 2]. At the same time, we found that the principles of XVCL are not easy to communicate. In this paper, we describe a subset of XVCL. We trust this subset of XVCL is easy to understand and still effectively communicates essential XVCL concepts. To illustrate the XVCL method, we further describe an XVCL solution to handling variants in a Notepad system.</abstract></paper>
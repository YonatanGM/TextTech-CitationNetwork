<paper id="1599611955"><title>Modeling and composing scenario-based requirements with aspects</title><year>2004</year><authors><author org="Dept. Informatica, Univ. Nova de Lisboa, Caparica, Portugal" id="2304520919">J. Araujo</author><author org="QSS Group/NASA Ames Research Center, CA, USA" id="2159829753">J. Whittle</author><author org="Colorado State University, Fort Collins, CO, USA," id="2142115809">Dae-Kyoo Kim</author></authors><n_citation>111</n_citation><doc_type>Conference</doc_type><references><reference>635947354</reference><reference>1972746808</reference><reference>1992036716</reference><reference>2017739343</reference><reference>2054943246</reference><reference>2096016522</reference><reference>2102071894</reference><reference>2112021951</reference><reference>2112970105</reference><reference>2128780623</reference><reference>2138363365</reference><reference>2139453480</reference><reference>2147764564</reference><reference>2151451947</reference></references><venue id="2606605052" type="C">IEEE International Conference on Requirements Engineering</venue><doi>10.1109/RE.2004.32</doi><keywords><keyword weight="0.58511">Sequence diagram</keyword><keyword weight="0.45717">Programming language</keyword><keyword weight="0.45436">Systems engineering</keyword><keyword weight="0.5327">Unified Modeling Language</keyword><keyword weight="0.45552">Computer science</keyword><keyword weight="0.53009">Finite-state machine</keyword><keyword weight="0.52696">Formal specification</keyword><keyword weight="0.51722">Software development process</keyword><keyword weight="0.49819">Computer programming</keyword><keyword weight="0.52705">Software development</keyword><keyword weight="0.51156">Executable</keyword></keywords><publisher>IEEE</publisher><abstract>There has been significant recent interest, within the aspect-oriented software development (AOSD) community, in representing crosscutting concerns at various stages of the software lifecycle. However, most of these efforts have concentrated on the design and implementation phases. We focus in This work on representing aspects during use case modeling. In particular, we focus on scenario-based requirements and show how to compose aspectual and non-aspectual scenarios so that they can be simulated as a whole. Non-aspectual scenarios are modeled as UML sequence diagrams. Aspectual scenarios are modeled as interaction pattern specifications (IPSs). In order to simulate them, the scenarios are transformed into a set of executable state machines using an existing state machine synthesis algorithm. Previous work composed aspectual and non-aspectual scenarios at the sequence diagram level. In This work, the composition is done at the state machine level.</abstract></paper>
<paper id="1492736196"><title>plp: A Generic Compiler for Ordered Logic Programs</title><year>2001</year><authors><author org="Simon Fraser University Burnaby, B.C." id="11409961">James P. Delgrande</author><author org="Universität Potsdam Postfach 60 15 53" id="2167873233">Torsten Schaub</author><author org="Technische Universität Wien" id="243159852">Hans Tompits</author></authors><n_citation>12</n_citation><doc_type>Conference</doc_type><references><reference>203020785</reference><reference>1482502297</reference><reference>1488084414</reference><reference>1503579182</reference><reference>1520957705</reference><reference>1552604813</reference><reference>1563821244</reference><reference>1577410338</reference><reference>1599133695</reference><reference>1750970660</reference><reference>2076698873</reference><reference>2124627636</reference></references><venue id="1201110412" type="C">International Conference on Logic Programming</venue><doi>10.1007/3-540-45402-0_33</doi><keywords><keyword weight="0.62777">Autoepistemic logic</keyword><keyword weight="0.63559">Horn clause</keyword><keyword weight="0.45882">Programming language</keyword><keyword weight="0.43371">Computer science</keyword><keyword weight="0.42461">Algorithm</keyword><keyword weight="0.6453">Multimodal logic</keyword><keyword weight="0.4466">Theoretical computer science</keyword><keyword weight="0.65218">Logic programming</keyword><keyword weight="0.65314">Predicate logic</keyword><keyword weight="0.64462">Intermediate logic</keyword><keyword weight="0.65623">Dynamic logic (modal logic)</keyword><keyword weight="0.65509">Higher-order logic</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>This paper describes a generic compiler, called plp, for translating ordered logic programs into standard logic programs under the answer set semantics. In an ordered logic program, preference information is expressed at the object level by atoms of the form s × t, where s and t are names of rules. An ordered logic program is transformed into a second, regular, extended logic program wherein the preferences are respected, in that the answer sets obtained in the transformed theory correspond with the preferred answer sets of the original theory. Currently, plp treats three different types of preference strategies, viz. those proposed by (i) Brewka and Eiter, (ii) Delgrande, Schaub, and Tompits, and (iii) Wang, Zhou, and Lin. Since the result of the translation is an extended logic program, existing logic programming systems can be used as underlying reasoning engine. In particular, plp is conceived as a front-end to the logic programming systems dlv and smodels.</abstract></paper>
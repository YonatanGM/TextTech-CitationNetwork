<paper id="1585832782"><title>A Generic Scheme for the Design of Efficient On-Line Algorithms for Lattices</title><year>2003</year><authors><author org="Université de Montréal," id="1900333666">Petko Valtchev</author><author org="Université de Montréal," id="2131255119">Mohamed Rouane Hacene</author><author org="UQO" id="1509219429">Rokia Missaoui</author></authors><n_citation>18</n_citation><doc_type>Conference</doc_type><references><reference>1503729935</reference><reference>1558485318</reference><reference>1994605000</reference><reference>2007327392</reference><reference>2062689533</reference><reference>2071515776</reference><reference>2084144744</reference><reference>2123736436</reference><reference>2138497556</reference></references><venue id="1137878512" type="C">International Conference on Conceptual Structures</venue><doi>10.1007/978-3-540-45091-7_20</doi><keywords><keyword weight="0.52475">Row</keyword><keyword weight="0.48906">Batch production</keyword><keyword weight="0.54444">Algorithmics</keyword><keyword weight="0.45007">Computer science</keyword><keyword weight="0.49042">Upper and lower bounds</keyword><keyword weight="0.45913">Binary relation</keyword><keyword weight="0.47357">Algorithm</keyword><keyword weight="0.47174">Hasse diagram</keyword><keyword weight="0.48431">Batch processing</keyword><keyword weight="0.49116">Formal concept analysis</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>A major issue with large dynamic datasets is the processing of small changes in the input through correspondingly small rearrangements of the output. This was the motivation behind the design of incremental or on-line algorithms for lattice maintenance, whose work amounts to a gradual construction of the final lattice by repeatedly adding rows/columns to the data table. As an attempt to put the incremental trend on strong theoretical grounds, we present a generic algorithmic scheme that is based on a detailed analysis of the lattice transformation triggered by a row/column addition and of the underlying sub-structure. For each task from the scheme we suggest an efficient implementation strategy and put a lower bound on its worst-case complexity. Moreover, an instanciation of the incremental scheme is presented which is as complex as the best batch algorithm.</abstract></paper>
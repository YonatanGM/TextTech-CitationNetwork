<paper id="1975060591"><title>Integrated concurrency analysis in a software development enviornment</title><year>1989</year><authors><author org="ES Department, University of California, Irvine, CA" id="2190417233">M. Young</author><author org="ES Department, University of California, Irvine, CA" id="2113585066">R. Taylor</author><author org="ES Department, University of California, Irvine, CA" id="1997981665">K. Forester</author><author org="ES Department, University of California, Irvine, CA" id="2561853161">D. Brodbeck</author></authors><n_citation>33</n_citation><doc_type>Journal</doc_type><references><reference>1515857761</reference><reference>1964727056</reference><reference>1984852853</reference><reference>1984909114</reference><reference>1986355834</reference><reference>1990553077</reference><reference>1996486194</reference><reference>2000730973</reference><reference>2043683472</reference><reference>2055269073</reference><reference>2056484775</reference><reference>2067038384</reference><reference>2073127880</reference><reference>2109935657</reference><reference>2117189826</reference><reference>2118895024</reference><reference>2169333969</reference></references><venue id="186921487" type="J">ACM Sigsoft Software Engineering Notes</venue><doi>10.1145/75309.75331</doi><keywords><keyword weight="0.59872">Software design</keyword><keyword weight="0.46526">Systems engineering</keyword><keyword weight="0.47826">Software engineering</keyword><keyword weight="0.46202">Computer science</keyword><keyword weight="0.59824">Software system</keyword><keyword weight="0.60113">Software development process</keyword><keyword weight="0.62843">Software construction</keyword><keyword weight="0.5993">Software verification and validation</keyword><keyword weight="0.61315">Software framework</keyword><keyword weight="0.61466">Software development</keyword><keyword weight="0.60818">Software verification</keyword></keywords><publisher>ACM</publisher><abstract>The inherent difficulties of analyzing concurrent software make reliance on a single technique or a single monolithic tool unsatisfactory. A better approach is to apply multiple analysis and verification techniques by coordinating the activities of a variety of small tool components. We describe how this approach has shaped the design of a set of tool components to support concurrency analysis in the Arcadia-1 software development environment. Implementation and experience with key components is described.</abstract></paper>
<paper id="1512095083"><title>Source Tree Composition</title><year>2002</year><authors><author org="CWI" id="1967646380">Merijn de Jonge</author></authors><n_citation>37</n_citation><doc_type>Conference</doc_type><references><reference>306273264</reference><reference>1490656280</reference><reference>1500200795</reference><reference>1500250067</reference><reference>1517430273</reference><reference>1528098570</reference><reference>1553817056</reference><reference>1555501290</reference><reference>1556161887</reference><reference>1568382263</reference><reference>2001907377</reference><reference>2016611270</reference><reference>2089519656</reference><reference>2106111544</reference><reference>2115528929</reference><reference>2119876163</reference><reference>2125579889</reference><reference>2127340092</reference><reference>2133491808</reference><reference>2142874510</reference><reference>2146645075</reference><reference>2148238464</reference><reference>2294861651</reference><reference>2611605145</reference><reference>2743001313</reference><reference>2911646362</reference></references><venue id="2756309959" type="C">International Conference on Software Reuse</venue><doi>10.1007/3-540-46020-9_2</doi><keywords><keyword weight="0.68197">Codebase</keyword><keyword weight="0.45409">Computer science</keyword><keyword weight="0.64852">Software build</keyword><keyword weight="0.66206">Software system</keyword><keyword weight="0.65317">Software product line</keyword><keyword weight="0.65101">Component-based software engineering</keyword><keyword weight="0.68287">Software construction</keyword><keyword weight="0.66577">Software framework</keyword><keyword weight="0.6667">Software development</keyword><keyword weight="0.46421">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Dividing software systems in components improves software reusability as well as software maintainability. Components live at several levels, we concentrate on the implementation level where components are formed by source files, divided over directory structures.Such source code components are usually strongly coupled in the directory structure of a software system. Their compilation is usually controlled by a single global build process. This entangling of source trees and build processes often makes reuse of source code components in different software systems difficult. It also makes software systems inflexible because integration of additional source code components in source trees and build processes is difficult.This paperu0027s subject is to increase software reuse by decreasing coupling of source code components. It is achieved by automized assembly of software systems from reusable source code components and involves integration of source trees, build processes, and configuration processes. Application domains include generative programming, product-line architectures, and commercial off-the-shelf (COTS) software engineering.</abstract></paper>
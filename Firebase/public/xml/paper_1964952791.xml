<paper id="1964952791"><title>Type inference with polymorphic recursion</title><year>1993</year><authors><author org="University of copenhagen" id="2141268906">Fritz Henglein</author></authors><n_citation>195</n_citation><doc_type>Journal</doc_type><references><reference>25491848</reference><reference>1487166760</reference><reference>1491178396</reference><reference>1523047387</reference><reference>1538141914</reference><reference>1585022015</reference><reference>1595372275</reference><reference>1641069266</reference><reference>1829244603</reference><reference>1979101142</reference><reference>1982801224</reference><reference>2015256273</reference><reference>2021217869</reference><reference>2025057593</reference><reference>2027657506</reference><reference>2029917213</reference><reference>2038037493</reference><reference>2038945974</reference><reference>2045313089</reference><reference>2056253254</reference><reference>2056310485</reference><reference>2062145157</reference><reference>2080040385</reference><reference>2090587238</reference><reference>2091769084</reference><reference>2094945667</reference><reference>2097464798</reference><reference>2098036931</reference><reference>2113722134</reference><reference>2125357395</reference><reference>2133576102</reference><reference>2133877360</reference><reference>2143777056</reference><reference>2149906577</reference><reference>2154632906</reference><reference>2161843469</reference><reference>2163976959</reference><reference>2166822586</reference><reference>2173184982</reference><reference>2293235079</reference><reference>2914336554</reference><reference>2915015834</reference></references><venue id="41449414" type="J">ACM Transactions on Programming Languages and Systems</venue><doi>10.1145/169701.169692</doi><keywords><keyword weight="0.61996">Type system</keyword><keyword weight="0.43241">Programming language</keyword><keyword weight="0.66122">Simply typed lambda calculus</keyword><keyword weight="0.68198">Typed lambda calculus</keyword><keyword weight="0.4016">Computer science</keyword><keyword weight="0.68197">System F</keyword><keyword weight="0.66462">Type inference</keyword><keyword weight="0.6455">Strong and weak typing</keyword><keyword weight="0.65623">Polymorphic recursion</keyword><keyword weight="0.63216">Dependent type</keyword></keywords><publisher>ACM</publisher><abstract>The Damas-Milner Calculus is the typed Î»-calculus underlying the type system for ML and several other strongly typed polymorphic functional languages such as Miranda and Haskell. Mycroft has extended its problematic monomorphic typing rule for recursive definitions with a polymorphic typing rule. He proved the resulting type system, which we call the Milner-Mycroft Calculus, sound with respect to Milneru0027s semantics, and showed that it preserves the principal typing property of the Damas-Milner Calculus. The extension is of practical significance in typed logic programming languages and, more generally, in any language with (mutually) recursive definitions</abstract></paper>
<paper id="1541430579"><title>Towards Alias-Free Pointers</title><year>1996</year><authors><author org="Rutgers University" id="6297940">Naftaly H. Minsky</author></authors><n_citation>93</n_citation><doc_type>Conference</doc_type><references><reference>1555946950</reference><reference>1916709771</reference><reference>2020841721</reference><reference>2051616332</reference><reference>2081388374</reference><reference>2101900462</reference><reference>2134119432</reference><reference>2161825580</reference><reference>2911865844</reference></references><venue id="1177184315" type="C">European Conference on Object-Oriented Programming</venue><doi>10.1007/BFb0053062</doi><keywords><keyword weight="0.59975">Pointer (computer programming)</keyword><keyword weight="0.5376">Data structure</keyword><keyword weight="0.58785">Aliasing (computing)</keyword><keyword weight="0.54011">Alias</keyword><keyword weight="0.4614">Programming language</keyword><keyword weight="0.45363">Computer science</keyword><keyword weight="0.49128">SAFER</keyword><keyword weight="0.504">Thread (computing)</keyword><keyword weight="0.43627">Aliasing</keyword><keyword weight="0.59624">Eiffel</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>This paper argues that pointer-induced aliasing can be avoided in many cases by means of a concept of unique pointer. The use of such pointers is expected to fortify the concept of encapsulation, to make systems easier to reason about, to provide better control over the interaction between threads, and to make storage management safer and more efficient. We show that unique pointers can be implemented by means of few minor and virtually costless modifications in conventional OO languages, such as Eiffel or C++; and that they can be used conveniently in a broad range of algorithms and data structures.</abstract></paper>
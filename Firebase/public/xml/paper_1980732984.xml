<paper id="1980732984"><title>Flexibility and control for dynamic workflows in the WORLDS environment</title><year>1995</year><authors><author org="Department of Computer Science University of Illinois at Urbana-Champaign, Urbana, IL#TAB#" id="1902839642">Douglas P. Bogia</author><author org="Department of Computer Science, University of Illinois at Urbana-Champaign, Urbana, IL and Department of Computer Science, The University of Queensland, Brisbane, Qld" id="2132052502">Simon M. Kaplan</author></authors><n_citation>79</n_citation><doc_type>Conference</doc_type><references><reference>1584610392</reference><reference>2014152199</reference><reference>2020664272</reference><reference>2044536393</reference><reference>2060127395</reference><reference>2070822452</reference><reference>2111841958</reference><reference>2113355185</reference><reference>2122036870</reference><reference>2126010944</reference><reference>2126588984</reference><reference>2153129024</reference><reference>2912663889</reference></references><venue id="2626020377" type="C">Conference on Organizational Computing Systems</venue><doi>10.1145/224019.224034</doi><keywords><keyword weight="0.43414">Transparency (graphic)</keyword><keyword weight="0.45404">Obligation</keyword><keyword weight="0.42758">Systems engineering</keyword><keyword weight="0.45517">Computer science</keyword><keyword weight="0.43845">Error detection and correction</keyword><keyword weight="0.0">Network construction</keyword><keyword weight="0.44863">Workflow</keyword><keyword weight="0.4421">Database</keyword><keyword weight="0.48121">Multiple inheritance</keyword><keyword weight="0.45886">Distributed computing</keyword></keywords><publisher>ACM</publisher><abstract>This paper presents a model and prototype implementation, called obligations , for handling flexible, dynamic changes to workflows. The model uses multiple inheritance and an overhead transparency metaphor to construct a network of activities. Each u0027sheetu0027 holds portions of the network to be constructed. Some of these sheets contain local modifications that are not shared among other similar activities and others hold general specifications that all instances should follow, assuming that they have not been locally modified. When all the sheets are stacked together, they create a composite view of the network. Individual sheets can be removed and replaced with newer, presumably compatible, sheets that change the network. This type of replacement can be encoded into surrogates which automatically carry out the replacements to keep the obligation up-to-date. The obligation system has a built in error detection scheme that determines if network construction is invalid and, if so, disallows execution of the portions of the network that are in error.</abstract></paper>
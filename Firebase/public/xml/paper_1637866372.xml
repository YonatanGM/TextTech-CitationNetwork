<paper id="1637866372"><title>Automated support for program refactoring using invariants</title><year>2001</year><authors><author org="Dept. of Comput. Sci. &amp; Eng., Washington Univ., Seattle, WA, USA" id="2577654132">Y. Kataoka</author><author org="University of Washington," id="2235702021">M.D. Ernst</author><author org="University of California‐San Diego" id="2112220066">W.G. Griswold</author><author org="massachusetts institute of technology" id="477007165">D. Notkin</author></authors><n_citation>135</n_citation><doc_type>Conference</doc_type><references><reference>1964795700</reference><reference>1972064644</reference><reference>1983119041</reference><reference>1996710532</reference><reference>2045723688</reference><reference>2081388374</reference><reference>2091469532</reference><reference>2103318645</reference><reference>2111643451</reference><reference>2114676774</reference><reference>2136694367</reference><reference>2153887189</reference><reference>2172168118</reference></references><venue id="1160919455" type="C">International Conference on Software Maintenance</venue><doi>10.1109/ICSM.2001.972794</doi><keywords><keyword weight="0.0">Java code</keyword><keyword weight="0.44494">Abstraction</keyword><keyword weight="0.47437">Programming language</keyword><keyword weight="0.43828">Systems engineering</keyword><keyword weight="0.46285">Computer science</keyword><keyword weight="0.4787">Static analysis</keyword><keyword weight="0.46935">Readability</keyword><keyword weight="0.46392">Invariant (mathematics)</keyword><keyword weight="0.57206">Software maintenance</keyword><keyword weight="0.7184">Code refactoring</keyword><keyword weight="0.5346">Maintainability</keyword></keywords><publisher>IEEE Computer Society</publisher><abstract>Program refactoring-transforming a program to improve readability, structure, performance, abstraction, maintainability, or other features-is not applied in practice as much as might be desired. One deterrent is the cost of detecting candidates for refactoring and of choosing the appropriate refactoring transformation. This paper demonstrates the feasibility of automatically finding places in the program that are candidates for specific refactorings. The approach uses program invariants: when a particular pattern of invariant relationships appears at a program point, a specific refactoring is applicable. Since most programs lack explicit invariants, an invariant detection tool called Daikon is used to infer the required invariants. We developed an invariant pattern matcher for several common refactorings and applied it to an existing Java code base. Numerous refactorings were detected, and one of the developers of the code base assessed their efficacy.</abstract></paper>
<paper id="1824202381"><title>Formal verification of cache systems using refinement relations</title><year>1990</year><authors><author org="Nat. Semicond. Corp., Santa Clara, CA, USA#TAB#" id="2974347666">P. Loewenstein</author><author org="" id="2148325455">D.L. Dill</author></authors><n_citation>6</n_citation><doc_type>Conference</doc_type><references><reference>178976057</reference><reference>1607877490</reference><reference>1982900911</reference><reference>2000302396</reference><reference>2039853888</reference></references><venue id="1186985151" type="C">International Conference on Computer Design</venue><doi>10.1109/ICCD.1990.130211</doi><keywords><keyword weight="0.5728">HOL</keyword><keyword weight="0.55911">Automata theory</keyword><keyword weight="0.46857">Programming language</keyword><keyword weight="0.46245">Computer science</keyword><keyword weight="0.55085">Cache</keyword><keyword weight="0.53266">CPU cache</keyword><keyword weight="0.53456">Automated theorem proving</keyword><keyword weight="0.48614">Automaton</keyword><keyword weight="0.4705">Theoretical computer science</keyword><keyword weight="0.5315">Higher-order logic</keyword><keyword weight="0.64331">Formal verification</keyword></keywords><publisher>IEEE</publisher><abstract>A formal verification method for concurrent systems is presented. The technique shows a correspondence between automata representing an implementation and specification behavior. The correspondence is called a refinement relation, and is particularly well-suited for theorem-provers. Since the method does not rely on enumerating all the states, it can be applied to systems with an infinite or unknown number of states. This substantially expands the class of hardware designs that can be formally verified. The method is illustrated by proving the consistency of a concurrent, non-deterministic model of cache memory. The proof is carried out using the HOL (higher-order logic) theorem-prover. u003e</abstract></paper>
<paper id="1529559025"><title>Distributing Timed Model Checking - How the Search Order Matters</title><year>2000</year><authors><author org=", Aalborg University" id="2130379315">Gerd Behrmann</author><author org="Aarhus University," id="2949647275">Thomas Hune</author><author org="University of Nijmegen" id="2040884273">Frits W. Vaandrager</author></authors><n_citation>47</n_citation><doc_type>Conference</doc_type><references><reference>1486308576</reference><reference>1836481452</reference><reference>1957639564</reference><reference>2000947342</reference><reference>2070698276</reference><reference>2101508170</reference><reference>2145000217</reference><reference>2147664171</reference><reference>2163014247</reference><reference>2340735175</reference><reference>2943445139</reference></references><venue id="1162450063" type="C">Computer Aided Verification</venue><doi>10.1007/10722167_19</doi><keywords><keyword weight="0.5181">Heuristic</keyword><keyword weight="0.5583">Model checking</keyword><keyword weight="0.47605">Computer science</keyword><keyword weight="0.45811">Algorithm</keyword><keyword weight="0.58752">Distributed memory</keyword><keyword weight="0.53362">Finite-state machine</keyword><keyword weight="0.47284">Theoretical computer science</keyword><keyword weight="0.51244">Multiprocessing</keyword><keyword weight="0.50946">State space</keyword><keyword weight="0.51834">Formal verification</keyword><keyword weight="0.52888">Scalability</keyword><keyword weight="0.47644">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>In this paper we address the problem of distributing model checking of timed automata. We demonstrate through four real life examples that the combined processing and memory resources of multi-processor computers can be effectively utilized. The approach assumes a distributed memory model and is applied to both a network of workstations and a symmetric multiprocessor machine. However, certain unexpected phenomena have to be taken into account. We show how in the timed case the search order of the state space is crucial for the effectiveness and scalability of the exploration. An effective heuristic to counter the effect of the search order is provided. Some of the results open up for improvements in the single processor case.</abstract></paper>
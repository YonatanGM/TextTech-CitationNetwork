<paper id="1819209966"><title>Bounded Model Checking Using Satisfiability Solving</title><year>2001</year><authors><author org="Computer Science Department, CMU, 5000 Forbes Avenue, Pittsburgh, PA 15213, USA. [email protected]#TAB#" id="2129477832">Edmund Clarke</author><author org="Institute of Computer Systems, ETH Zürich, 8092 Zürich, Switzerland. biere@inf.ethz.ch#TAB#" id="2242438494">Armin Biere</author><author org="TriMedia Technologies, Inc., 801 Capital of Texas Hwy. So., Austin, TX 78704. richard.raimi@trimedia.com#TAB#" id="2305330528">Richard Raimi</author><author org="Synopsys, Inc., 700 East Middlefield Road, Mountain View, CA 94043, USA. yunshan@synopsys.com#TAB#" id="2130671571">Yunshan Zhu</author></authors><n_citation>500</n_citation><doc_type>Conference</doc_type><references><reference>1494481937</reference><reference>1501731334</reference><reference>1511155470</reference><reference>1513300473</reference><reference>1537651185</reference><reference>1538995403</reference><reference>1578895382</reference><reference>1593428110</reference><reference>1600919542</reference><reference>1605860778</reference><reference>1787074469</reference><reference>1814068099</reference><reference>1866896089</reference><reference>1890338041</reference><reference>1999997889</reference><reference>2009965218</reference><reference>2015696841</reference><reference>2024148935</reference><reference>2041152728</reference><reference>2062897452</reference><reference>2071559752</reference><reference>2080267935</reference><reference>2080593426</reference><reference>2100404896</reference><reference>2113251992</reference><reference>2117189826</reference><reference>2135613306</reference><reference>2160444875</reference><reference>2340735175</reference></references><venue id="1169806927" type="C">Formal Methods</venue><doi>10.1023/A:1011276507260</doi><keywords><keyword weight="0.54908">Transition system</keyword><keyword weight="0.69816">Abstraction model checking</keyword><keyword weight="0.46084">Programming language</keyword><keyword weight="0.68915">Model checking</keyword><keyword weight="0.43946">Public domain</keyword><keyword weight="0.47176">Computer science</keyword><keyword weight="0.48082">Satisfiability</keyword><keyword weight="0.46827">Theoretical computer science</keyword><keyword weight="0.51532">State space</keyword><keyword weight="0.51103">Bounded function</keyword><keyword weight="0.62165">Symbolic trajectory evaluation</keyword></keywords><publisher>Kluwer Academic Publishers</publisher><abstract>The phrase model checking refers to algorithms for exploring the state space of a transition system to determine if it obeys a specification of its intended behavior. These algorithms can perform exhaustive verification in a highly automatic manner, and, thus, have attracted much interest in industry. Model checking programs are now being commercially marketed. However, model checking has been held back by the state explosion problem, which is the problem that the number of states in a system grows exponentially in the number of system components. Much research has been devoted to ameliorating this this :[94],"tutorial, we first give a brief overview of the history of model checking to date, and then focus on recent techniques that combine model checking with satisfiability solving. These techniques, known as bounded model checking, do a very fast exploration of the state space, and for some types of problems seem to offer large performance improvements over previous approaches. We review experiments with bounded model checking on both public domain and industrial designs, and propose a methodology for applying the technique in industry for invariance checking. We then summarize the pros and cons of this new technology and discuss future research efforts to extend its capabilities.</abstract></paper>
<paper id="1594353830"><title>First Steps Towards Inferential Programming</title><year>1993</year><authors><author org="Carnegie - Mellon University#TAB#" id="4823187">William Louis. Scherlis</author><author org="Carnegie - Mellon University#TAB#" id="2602723040">Dana S. Scott</author></authors><n_citation>52</n_citation><doc_type>Conference</doc_type><references><reference>1581640735</reference><reference>1594275893</reference><reference>1988901815</reference><reference>1992808564</reference><reference>1996081324</reference><reference>1996508547</reference><reference>2005973420</reference><reference>2012721044</reference><reference>2023299380</reference><reference>2050584095</reference><reference>2054358146</reference><reference>2057731509</reference><reference>2069746600</reference><reference>2072868498</reference><reference>2094243107</reference><reference>2094837773</reference><reference>2101188827</reference><reference>2103953153</reference><reference>2112437375</reference><reference>2119254611</reference><reference>2132364484</reference><reference>2136197657</reference><reference>2148817888</reference></references><venue id="2755927266" type="C">IFIP Congress</venue><doi>10.1007/978-94-011-1793-7_6</doi><keywords><keyword weight="0.75478">Procedural programming</keyword><keyword weight="0.68417">Fifth-generation programming language</keyword><keyword weight="0.4725">Programming language</keyword><keyword weight="0.73018">Programming paradigm</keyword><keyword weight="0.69267">Inferential programming</keyword><keyword weight="0.46367">Computer science</keyword><keyword weight="0.77129">Inductive programming</keyword><keyword weight="0.73263">Symbolic programming</keyword><keyword weight="0.52498">Mathematical proof</keyword><keyword weight="0.53694">Software construction</keyword></keywords><publisher>Springer, Dordrecht</publisher><abstract>Our basic premise is that the ability to construct and modify programs will not improve without a new and comprehensive look at the entire programming process. Past theoretical research, say, in the logics of programs, has tended to focus on methods for reasoning about individual programs; little has been done, it seems to us, to develop a sound understanding of the process of programming â€” the process by which programs evolve in concept and in practice. At present, we lack the means to describe the techniques of program construction and improvement in ways that properly link verification, documentation and adaptability.</abstract></paper>
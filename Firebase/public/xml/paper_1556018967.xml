<paper id="1556018967"><title>Directional Type Checking of Logic Programs</title><year>1994</year><authors><author org="&quot;University of California, Berkeley&quot;" id="2067453598">Alexander Aiken</author><author org="University of Illinois at Urbana Champaign;" id="1828262200">T. K. Lakshman</author></authors><n_citation>42</n_citation><doc_type>Conference</doc_type><references><reference>130711549</reference><reference>142036046</reference><reference>159226319</reference><reference>167307437</reference><reference>171682210</reference><reference>202590952</reference><reference>203647284</reference><reference>1493841763</reference><reference>1501017496</reference><reference>1516418361</reference><reference>1522712062</reference><reference>1562575382</reference><reference>1579672261</reference><reference>1585925557</reference><reference>1590937195</reference><reference>1874448623</reference><reference>1987962669</reference><reference>1999968383</reference><reference>2001507716</reference><reference>2017860618</reference><reference>2019789808</reference><reference>2039529128</reference><reference>2053384008</reference><reference>2063236708</reference><reference>2069076448</reference><reference>2076696436</reference><reference>2098994345</reference><reference>2115656500</reference><reference>2118483018</reference><reference>2155022589</reference><reference>2165243410</reference></references><venue id="1137552346" type="C">Static Analysis Symposium</venue><doi>10.1007/3-540-58485-4_32</doi><keywords><keyword weight="0.53824">Decision problem</keyword><keyword weight="0.53136">Axiomatic semantics</keyword><keyword weight="0.6352">Model checking</keyword><keyword weight="0.50587">Expression (mathematics)</keyword><keyword weight="0.45008">Computer science</keyword><keyword weight="0.55416">Correctness</keyword><keyword weight="0.59813">Automated proof checking</keyword><keyword weight="0.46648">Algorithm</keyword><keyword weight="0.46523">Theoretical computer science</keyword><keyword weight="0.53746">Bunched logic</keyword><keyword weight="0.51002">Logic programming</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We present an algorithm for automatic type checking of logic programs with respect to directional types that describe both the structure of terms and the directionality of predicates. The type checking problem is reduced to a decision problem on systems of inclusion constraints over set expressions. The solution to this decision problem provides an effective type checking procedure. We discuss some properties of the reduction algorithm, and present a proof of correctness. We present lower bound complexity results for the general type checking problem where types are given as arbitrary set expressions, as well as for the restrictive class of discriminative directional types. For discriminative directional types the type checking procedure is shown to be sound and complete.</abstract></paper>
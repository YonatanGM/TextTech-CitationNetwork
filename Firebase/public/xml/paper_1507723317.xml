<paper id="1507723317"><title>Subtyping Constrained Types</title><year>1996</year><authors><author org="Johns Hopkins University" id="2009493897">Valery Trifonov</author><author org="Johns Hopkins University" id="2113752898">Scott F. Smith</author></authors><n_citation>78</n_citation><doc_type>Conference</doc_type><references><reference>1487777477</reference><reference>1492250204</reference><reference>1525643703</reference><reference>1703087989</reference><reference>1963954367</reference><reference>1969093922</reference><reference>1973576343</reference><reference>1978692906</reference><reference>2001507716</reference><reference>2014387690</reference><reference>2016049804</reference><reference>2016076634</reference><reference>2022443117</reference><reference>2050012658</reference><reference>2051328776</reference><reference>2051981528</reference><reference>2055292912</reference><reference>2058279444</reference><reference>2060688393</reference><reference>2090415524</reference><reference>2123727486</reference><reference>2173184982</reference></references><venue id="1137552346" type="C">Static Analysis Symposium</venue><doi>10.1007/3-540-61739-6_52</doi><keywords><keyword weight="0.43326">Computer science</keyword><keyword weight="0.45279">Theoretical computer science</keyword><keyword weight="0.62749">Type inference</keyword><keyword weight="0.59186">Type variable</keyword><keyword weight="0.61406">Subtyping</keyword><keyword weight="0.49287">Recursion</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>A constrained type is a type that comes with a set of subtyping constraints on variables occurring in the type. Constrained type inference systems are a natural generalization of Hindley/Milner type inference to languages with subtyping. This paper develops several subtyping relations on polymorphic constrained types of a general form that allows recursive constraints and multiple bounds on type variables. Subtyping constrained types has applications to signature matching and to constrained type simplification.</abstract></paper>
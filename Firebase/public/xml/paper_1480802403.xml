<paper id="1480802403"><title>Speeding Up Pollard's Rho Method for Computing Discrete Logarithms</title><year>1998</year><authors><author org="Technische UniversitÃ¤t Darmstadt," id="2781411210">Edlyn Teske</author></authors><n_citation>109</n_citation><doc_type>Conference</doc_type><references><reference>1519023517</reference><reference>1981455414</reference><reference>2003736153</reference><reference>2008272678</reference><reference>2013238997</reference></references><venue id="2759893951" type="C">Algorithmic Number Theory Symposium</venue><doi>10.1007/BFb0054891</doi><keywords><keyword weight="0.45451">Discrete mathematics</keyword><keyword weight="0.52553">Precomputation</keyword><keyword weight="0.80714">Pollard's rho algorithm for logarithms</keyword><keyword weight="0.65292">Hyperelliptic curve cryptography</keyword><keyword weight="0.51973">Logarithm</keyword><keyword weight="0.53171">Elliptic curve</keyword><keyword weight="0.73527">Pollard's kangaroo algorithm</keyword><keyword weight="0.42379">Mathematics</keyword><keyword weight="0.59257">Discrete logarithm</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>In Pollardu0027s rho method, an iterating function f is used to define a sequence (y i) by y i+1=f(y i) for i=0,1, 2,..., with some starting value y0. In this paper, we define and discuss new iterating functions for computing discrete logarithms with the rho method. We compare their performances in experiments with elliptic curve groups. Our experiments show that one of our newly defined functions is expected to reduce the number of steps by a factor of approximately 0.8, in comparison with Pollardu0027s originally used function, and we show that this holds independently of the size of the group order. For group orders large enough such that the run time for precomputation can be neglected, this means a real-time speed-up of more than 1.2.</abstract></paper>
<paper id="1963569294"><title>A theory of type qualifiers</title><year>1999</year><authors><author org="EECS Dept, University of California, Berkeley, Berkeley, CA#TAB#" id="2155210674">Jeffrey S. Foster</author><author org="EECS Dept, University of California, Berkeley, Berkeley, CA#TAB#" id="1974059945">Manuel FÃ¤hndrich</author><author org="EECS Dept, University of California, Berkeley, Berkeley, CA#TAB#" id="2067453598">Alexander Aiken</author></authors><n_citation>227</n_citation><doc_type>Conference</doc_type><references><reference>1491178396</reference><reference>1518533182</reference><reference>1529049337</reference><reference>1544633123</reference><reference>1762020135</reference><reference>1848617919</reference><reference>1980939032</reference><reference>2007181618</reference><reference>2016049804</reference><reference>2046137117</reference><reference>2051328776</reference><reference>2052822938</reference><reference>2065413511</reference><reference>2067012475</reference><reference>2068457689</reference><reference>2084475398</reference><reference>2131067178</reference><reference>2142174207</reference><reference>2166822586</reference><reference>2169136701</reference><reference>2611598995</reference><reference>2912166712</reference></references><venue id="1127352206" type="C">Programming Language Design and Implementation</venue><doi>10.1145/301618.301665</doi><keywords><keyword weight="0.44526">ENCODE</keyword><keyword weight="0.47298">Programming language</keyword><keyword weight="0.49713">Register allocation</keyword><keyword weight="0.45958">Computer science</keyword><keyword weight="0.46513">Theoretical computer science</keyword><keyword weight="0.55346">Type qualifier</keyword><keyword weight="0.47072">Subtyping</keyword><keyword weight="0.49623">Semantics</keyword><keyword weight="0.47062">Graph coloring</keyword></keywords><publisher>ACM</publisher><abstract>We describe a framework for adding type qualifiers to a language. Type qualifiers encode a simple but highly useful form of subtyping. Our framework extends standard type rules to model the flow of qualifiers through a program, where each qualifier or set of qualifiers comes with additional rules that capture its semantics. Our framework allows types to be polymorphic in the type qualifiers. We present a const-inference system for C as an example application of the framework. We show that for a set of real C programs, many more consts can be used than are actually present in the original code.</abstract></paper>
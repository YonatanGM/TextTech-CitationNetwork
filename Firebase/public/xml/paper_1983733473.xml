<paper id="1983733473"><title>Simple and integrated heuristic algorithms for scheduling tasks with time and resource constraints</title><year>1987</year><authors><author org="University of Massachusetts-Amherst" id="2443267613">Wei Zhao</author><author org="University of Massachusetts-Amherst" id="323797451">Krithi Ramamritham</author></authors><n_citation>70</n_citation><doc_type>Journal</doc_type><references><reference>1589832483</reference><reference>1985064863</reference><reference>1987173935</reference><reference>2001200190</reference><reference>2024742034</reference><reference>2088899347</reference><reference>2095381673</reference><reference>2128896782</reference><reference>2149833774</reference></references><venue id="37879656" type="J">Journal of Systems and Software</venue><doi>10.1016/0164-1212(87)90041-0</doi><keywords><keyword weight="0.46867">Mathematical optimization</keyword><keyword weight="0.62839">Fair-share scheduling</keyword><keyword weight="0.45976">Computer science</keyword><keyword weight="0.61592">Flow shop scheduling</keyword><keyword weight="0.457">Algorithm</keyword><keyword weight="0.45067">Real-time computing</keyword><keyword weight="0.6149">Genetic algorithm scheduling</keyword><keyword weight="0.62767">Least slack time scheduling</keyword><keyword weight="0.61452">Heuristics</keyword><keyword weight="0.61997">Rate-monotonic scheduling</keyword><keyword weight="0.64012">Dynamic priority scheduling</keyword><keyword weight="0.63045">Earliest deadline first scheduling</keyword></keywords><publisher>Elsevier Science Inc.</publisher><abstract>We consider the problem of scheduling a set of n tasks in a system having r resources. Each task has an arbitrary, but known, processing time and a deadline, and may request use of a number of resources. A resource can be used either in shared mode or exclusive mode. In this article, we study algorithms used for determining whether or not a set of tasks is schedulable in such a system, and if so, determining a schedule for it. This scheduling problem is known to be NPcomplete and hence we methodically study a set of heuristics that can be used by such an algorithm. Due to the complexity of the problem, simple heuristics do not perform satisfactorily. However, an algorithm that uses combinations of these simple heuristics works very well compared to an optimal algorithm that takes exponential time complexity. For the combination that performs the best, we also determine the scheduling costs as a function of the size of the task set scheduled.</abstract></paper>
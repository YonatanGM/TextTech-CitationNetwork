<paper id="1625345750"><title>From system goals to software architecture</title><year>2003</year><authors><author org="UniversitÃ© catholique de Louvain &gt;  &gt;  &gt;  &gt;" id="1227273176">Axel van Lamsweerde</author></authors><n_citation>167</n_citation><doc_type>Conference</doc_type><references><reference>1489800325</reference><reference>1501240153</reference><reference>1554977156</reference><reference>1986186023</reference><reference>1998017916</reference><reference>2013658284</reference><reference>2017739343</reference><reference>2056134008</reference><reference>2065705928</reference><reference>2077318760</reference><reference>2082434633</reference><reference>2096266868</reference><reference>2105324142</reference><reference>2105539612</reference><reference>2107232214</reference><reference>2112437375</reference><reference>2114743187</reference><reference>2114775327</reference><reference>2115603783</reference><reference>2117818414</reference><reference>2118926712</reference><reference>2121764468</reference><reference>2130560480</reference><reference>2146082668</reference><reference>2151451947</reference><reference>2153933075</reference><reference>2155386176</reference><reference>2161849440</reference><reference>2164022737</reference><reference>2165045013</reference><reference>2171627300</reference><reference>2176490758</reference><reference>2301605390</reference></references><venue id="1169806927" type="C">Formal Methods</venue><doi>10.1007/978-3-540-39800-4_2</doi><keywords><keyword weight="0.47781">Software engineering</keyword><keyword weight="0.45721">Computer science</keyword><keyword weight="0.67376">Requirements analysis</keyword><keyword weight="0.67083">Requirements engineering</keyword><keyword weight="0.69413">Software architecture</keyword><keyword weight="0.65528">Reference architecture</keyword><keyword weight="0.68857">Software requirements specification</keyword><keyword weight="0.66717">Architectural pattern</keyword><keyword weight="0.44355">Operating system</keyword><keyword weight="0.66742">Non-functional requirement</keyword><keyword weight="0.65959">Software requirements</keyword><keyword weight="0.45509">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Requirements and architecture are two essential inter-related products in the software lifecycle. Software architecture has long been recognized to have a profound impact on non-functional requirements about security, fault tolerance, performance, evolvability, and so forth. In spite of this, very few techniques are available to date for systematically building software architectures from functional and non-functional requirements so that such requirements are guaranteed by construction. The paper addresses this challenge and proposes a goal-oriented approach to architectural design based on the KAOS framework for modeling, specifying and analyzing requirements. After reviewing some global architectural decisions that are already involved in the requirements engineering process, we discuss our architecture derivation process. Software specifications are first derived from requirements. An abstract architectural draft is then derived from functional specifications. This draft is refined to meet domain-specific architectural constraints. The resulting architecture is then recursively refined to meet the various non-functional goals modelled and analyzed during the requirements engineering process.</abstract></paper>
<paper id="1971860760"><title>Composing crosscutting concerns using composition filters</title><year>2001</year><authors><author org="University of Twente , the Netherlands" id="2164694171">Lodewijk Bergmans</author><author org="University of Twente , the Netherlands" id="2047412352">Mehmet Aksit</author></authors><n_citation>287</n_citation><doc_type>Journal</doc_type><references><reference>1502457987</reference><reference>2033868415</reference><reference>2070552116</reference><reference>2114696172</reference><reference>2118801004</reference><reference>2138363365</reference><reference>2745120342</reference></references><venue id="103482838" type="J">Communications of The ACM</venue><doi>10.1145/383845.383857</doi><keywords><keyword weight="0.45031">Adaptability</keyword><keyword weight="0.44729">Synchronization</keyword><keyword weight="0.0">Software modules</keyword><keyword weight="0.46663">Programming language</keyword><keyword weight="0.4515">Computer science</keyword><keyword weight="0.4802">Implementation</keyword><keyword weight="0.0">Adaptive programming</keyword><keyword weight="0.46105">Access control</keyword><keyword weight="0.6164">AspectJ</keyword><keyword weight="0.51561">Reusability</keyword></keywords><publisher>ACM</publisher><abstract>It has been demonstrated that certain design concerns, such as access control, synchronization, and object interactions cannot be expressed in current OO languages as a separate software module [4, 7]. These so-called crosscutting concerns generally result in implementations scattered over multiple operations. If a crosscutting concern cannot be treated as a single module, its adaptability and reusability are likely to be reduced. A number of programming techniques have been proposed to express crosscutting concerns, for example, adaptive programming [9], AspectJ [8], Hyperspaces [10], and Composition Filters [1]. Here, we present the Composition Filters (CF) model and illustrate how it addresses evolving crosscutting concerns.</abstract></paper>
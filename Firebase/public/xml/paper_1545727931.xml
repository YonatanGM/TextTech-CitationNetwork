<paper id="1545727931"><title>Unifying Toolkit Programming Layers: a Multi-purpose Toolkit Integration Module</title><year>1997</year><authors><author org="Foundation for Research and Technology-Hellas (FORTH), Science and Technology Park of Crete" id="2050752266">Anthony Savidis</author><author org="Foundation for Research and Technology-Hellas (FORTH), Science and Technology Park of Crete" id="2284655069">Constantine Stephanidis</author><author org="Foundation for Research and Technology-Hellas (FORTH), Science and Technology Park of Crete" id="2958354777">Demosthenes Akoumianakis</author></authors><n_citation>20</n_citation><doc_type /><references><reference>1512269963</reference><reference>1608278265</reference><reference>2010071303</reference><reference>2025163386</reference><reference>2037578879</reference><reference>2063048463</reference><reference>2093142782</reference><reference>2143292990</reference></references><venue id="" type="">DSV-IS</venue><doi>10.1007/978-3-7091-6878-3_12</doi><keywords><keyword weight="0.50655">Asynchronous communication</keyword><keyword weight="0.47382">Programming language</keyword><keyword weight="0.0">Learning to program</keyword><keyword weight="0.45499">Computer science</keyword><keyword weight="0.50024">Interfacing</keyword><keyword weight="0.56914">Compiler</keyword><keyword weight="0.0">Object Class</keyword><keyword weight="0.50006">Software</keyword></keywords><publisher>Springer, Vienna</publisher><abstract>Learning to program with interface toolkits requires a considerable amount of time, while programmers familiar with one toolkit require considerable additional training before being able to effectively use another toolkit. Even though virtual toolkits have contributed positively in this context, users of virtual toolkits are not enabled: (i) to locally incorporate a new toolkit, or (ii) to extend or modify the supplied programming layer. A tool has been developed, called PIM, through which interface developers may establish the desired programming layers on top of toolkits, with reduced development effort. The PIM tool provides: (a) a language for the specification of the desired programming layers for toolkits; (b) a compiler to translate such a specification to a C++ software library (i. e. generated programming layer); and (c) an asynchronous communication library, called generic toolkit interfacing protocol, for “connecting” the generated programming layer with the original target toolkit.</abstract></paper>
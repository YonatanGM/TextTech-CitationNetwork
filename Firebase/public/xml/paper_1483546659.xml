<paper id="1483546659"><title>Animators for Generated Programming Environments</title><year>1993</year><authors><author org="CWI" id="2164566402">Frank Tip</author></authors><n_citation>3</n_citation><doc_type /><references><reference>1548088954</reference><reference>2005915144</reference><reference>2008310423</reference><reference>2013399578</reference><reference>2026957617</reference><reference>2051504145</reference><reference>2128916862</reference><reference>2134080718</reference><reference>2154940799</reference><reference>2912858146</reference><reference>2913158420</reference></references><venue id="" type="">AADEBUG '93 Proceedings of the First International Workshop on Automated and Algorithmic Debugging</venue><doi>10.1007/BFb0019412</doi><keywords><keyword weight="0.49528">Functional reactive programming</keyword><keyword weight="0.5136">Procedural programming</keyword><keyword weight="0.47051">Programming language</keyword><keyword weight="0.5107">Programming language specification</keyword><keyword weight="0.50547">Programming paradigm</keyword><keyword weight="0.45014">Computer science</keyword><keyword weight="0.49597">Language construct</keyword><keyword weight="0.49521">Inductive programming</keyword><keyword weight="0.52307">Animation</keyword><keyword weight="0.50262">Reactive programming</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Animation of execution is a necessary feature of source-level debuggers. We present a framework where animators are generated from existing algebraic specifications of interpreters. To this end, a pattern-matching mechanism is used in conjunction with origin tracking, a generic tracing technique. The generation of animators is illustrated using an example language named CLaX, a Pascal relative. We study how our approach can be extended to the generation of source-level debuggers and algorithmic debuggers from specifications of interpreters.</abstract></paper>
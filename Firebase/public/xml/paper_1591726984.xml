<paper id="1591726984"><title>FORM: A feature-oriented reuse method with domain-specific reference architectures</title><year>1998</year><authors><author org="Department of Computer Science and Engineering, Pohang University of Science and Technology (POSTECH), San 31 Pohang, Kyoungbuk 790&amp;dash;784, Korea E-mail: {kck,sjkim,kijoo}@postech.ac.kr#TAB#" id="2150318219">Kyo C. Kang</author><author org="Department of Computer Science and Engineering, Pohang University of Science and Technology (POSTECH), San 31 Pohang, Kyoungbuk 790&amp;dash;784, Korea E-mail: {kck,sjkim,kijoo}@postech.ac.kr#TAB#" id="2136582910">Sajoong Kim</author><author org="Information Systems Division, LG Information &amp; Communications Ltd., R&amp;D Complex, 533, Hogye&amp;dash;dong, Dongan&amp;dash;gu, Anyang&amp;dash;shi, Kyounggi&amp;dash;do 430&amp;dash;080, Korea E-mail: [email protected] ...#TAB#" id="2152210060">Jaejoon Lee</author><author org="Department of Computer Science and Engineering, Pohang University of Science and Technology (POSTECH), San 31 Pohang, Kyoungbuk 790&amp;dash;784, Korea E-mail: {kck,sjkim,kijoo}@postech.ac.kr#TAB#" id="2605029534">Kijoo Kim</author><author org="Multimedia Laboratory, Korea Telecom Research &amp; Development Group, 17 Woomyung&amp;dash;dong, Seocho&amp;dash;gu, Seoul 137&amp;dash;790, Korea E-mail: {esshin,moonh}@rcunix.kotel.co.kr#TAB#" id="2284823825">Euiseob Shin</author><author org="Multimedia Laboratory, Korea Telecom Research &amp; Development Group, 17 Woomyung&amp;dash;dong, Seocho&amp;dash;gu, Seoul 137&amp;dash;790, Korea E-mail: {esshin,moonh}@rcunix.kotel.co.kr#TAB#" id="2285752539">Moonhang Huh</author></authors><n_citation>797</n_citation><doc_type>Journal</doc_type><references><reference>1980803466</reference><reference>1983645265</reference><reference>1986174265</reference><reference>2001098379</reference><reference>2021481978</reference><reference>2041918563</reference><reference>2070005657</reference><reference>2077318760</reference><reference>2096973649</reference><reference>2097083192</reference><reference>2115185496</reference><reference>2115603783</reference><reference>2165875645</reference><reference>2169506390</reference><reference>2170509118</reference><reference>2251335145</reference></references><venue id="104191512" type="J">Annals of Software Engineering</venue><doi>10.1023/A:1018980625587</doi><keywords><keyword weight="0.66075">Domain analysis</keyword><keyword weight="0.61017">Domain (software engineering)</keyword><keyword weight="0.67812">Domain engineering</keyword><keyword weight="0.4578">Systems engineering</keyword><keyword weight="0.68497">Feature-oriented domain analysis</keyword><keyword weight="0.4689">Computer science</keyword><keyword weight="0.62722">Feature model</keyword><keyword weight="0.60407">Component-based software engineering</keyword><keyword weight="0.63743">Reference architecture</keyword><keyword weight="0.63428">Domain model</keyword></keywords><publisher>J. C. Baltzer AG, Science Publishers</publisher><abstract>Systematic discovery and exploitation of commonality across related software systems is a fundamental technical requirement for achieving successful software reuse. By examining a class/family of related systems and the commonality underlying those systems, it is possible to obtain a set of reference models, i.e., software architectures and components needed for implementing applications in the class. FORM (FeaturedOriented Reuse Method) supports development of such reusable architectures and components (through a process called the “domain engineering”) and development of applications using the domain artifacts produced from the domain engineering. FORM starts with an analysis of commonality among applications in a particular domain in terms of services, operating environments, domain technologies, and implementation techniques. The model constructed during the analysis is called a “feature” model, and it captures commonality as an AND/OR graph, where AND nodes indicate mandatory features and OR nodes indicate alternative features selectable for different applications. Then, this model is used to define parameterized reference architectures and appropriate reusable components instantiatable during application development. Architectures are defined from three different viewpoints (subsystem, process, and module) and have intimate association with the features. The subsystem architecture is used to package service features and allocate them to different computers in a distributed environment. Each subsystem is further decomposed into processes considering the operating environment features. Modules are defined based on the features on domain technology and implementation techniques. These architecture models that represent an architecture at different levels of abstraction are derived from the feature hierarchy captured in the feature model. Modules serve as basis for creating reusable components, and their specification defines how they are integrated into the application (e.g., asdis integration of predcoded component, instantiation of parameterized templates, and fillingdin skeletal codes). Our experiences have shown that for the electronic bulletin board and the private branch exchange (PBX) domains, “features” make up for a common domain language and the main communication medium among application users and developers. Thus, the feature model well represents a “decision space” of software development, and is a good starting point for identifying candidate reusable components.</abstract></paper>
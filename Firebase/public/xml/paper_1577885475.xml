<paper id="1577885475"><title>Modular Reasoning in an Object-Oriented Refinement Calculus</title><year>1992</year><authors><author org="(University of Queensland)" id="1898691322">Mark Utting</author><author org="University of New South Wales&lt;br /&gt;" id="2165508309">Ken Robinson</author></authors><n_citation>16</n_citation><doc_type>Conference</doc_type><references><reference>1501421016</reference><reference>1535103785</reference><reference>1552647623</reference><reference>2027657506</reference><reference>2069159459</reference><reference>2073708948</reference><reference>2084686108</reference><reference>2087713039</reference><reference>2103953153</reference><reference>2106472587</reference><reference>2144015080</reference><reference>2161825580</reference></references><venue id="1159310735" type="C">Mathematics of Program Construction</venue><doi>10.1007/3-540-56625-2_22</doi><keywords><keyword weight="0.53436">Late binding</keyword><keyword weight="0.47885">Programming language</keyword><keyword weight="0.62015">Refinement calculus</keyword><keyword weight="0.53395">Object-oriented programming</keyword><keyword weight="0.42341">Invocation</keyword><keyword weight="0.46404">Computer science</keyword><keyword weight="0.46292">Theoretical computer science</keyword><keyword weight="0.0">Modular reasoning</keyword><keyword weight="0.0">Procedure calls</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Object-oriented languages typically use late binding for procedure calls on objects. This raises a potential problem for programmers who wish to reason about their programs, because the effects of a procedure call cannot always be determined statically. In this paper we develop a simple model of procedure invocation for object-oriented languages based on the refinement calculus [Morgan and Robinson 87] and define the minimum requirements for a system to support modular reasoning. In such systems, reasoning about procedure calls is easier, because the behaviour of a procedure call with arguments of type T can be used as an approximation to its behaviour on more specialised arguments.</abstract></paper>
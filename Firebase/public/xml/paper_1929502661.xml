<paper id="1929502661"><title>Validity Checking for Combinations of Theories with Equality</title><year>1996</year><authors><author org="Stanford, University" id="2136212275">Clark W. Barrett</author><author org="Stanford, University" id="2148325455">David L. Dill</author><author org="Stanford, University" id="2315306597">Jeremy R. Levitt</author></authors><n_citation>174</n_citation><doc_type>Conference</doc_type><references><reference>1546619436</reference><reference>1825148885</reference><reference>1986022261</reference><reference>2000346568</reference><reference>2030670832</reference><reference>2036915776</reference><reference>2041235353</reference><reference>2107503612</reference><reference>2113486906</reference><reference>2129664123</reference><reference>2164778826</reference></references><venue id="1166230065" type="C">Formal Methods in Computer-Aided Design</venue><doi>10.1007/BFb0031808</doi><keywords><keyword weight="0.49505">Heuristic</keyword><keyword weight="0.53402">Expression (mathematics)</keyword><keyword weight="0.46013">Computer science</keyword><keyword weight="0.51192">Disjunctive normal form</keyword><keyword weight="0.46606">Theoretical computer science</keyword><keyword weight="0.53579">Boolean algebra</keyword><keyword weight="0.52139">Rewriting</keyword><keyword weight="0.47558">Equivalence class</keyword><keyword weight="0.51014">True quantified Boolean formula</keyword><keyword weight="0.48702">Linear inequality</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>An essential component in many verification methods is a fast decision procedure for validating logical expressions. This paper presents the algorithm used in the Stanford Validity Checker (SVC) which has been used to aid several realistic hardware verification efforts. The logic for this decision procedure includes Boolean and uninterpreted functions and linear arithmetic. We have also successfully incorporated other interpreted functions, such as array operations and linear inequalities. The primary techniques which allow a complete and efficient implementation are expression sharing, heuristic rewriting, and congruence closure with interpreted functions. We discuss these techniques and present the results of initial experiments in which SVC is used as a decision procedure in PVS, resulting in dramatic speed-ups.</abstract></paper>
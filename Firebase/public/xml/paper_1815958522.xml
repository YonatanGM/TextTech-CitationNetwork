<paper id="1815958522"><title>Observable Properties of Higher Order Functions that Dynamically Create Local Names, or What's new?</title><year>1993</year><authors><author org="University of Cambridge" id="2165119604">Andrew M. Pitts</author><author org="University of Cambridge" id="2015468599">Ian D. B. Stark</author></authors><n_citation>161</n_citation><doc_type>Conference</doc_type><references><reference>1480685649</reference><reference>1829244603</reference><reference>1996149734</reference><reference>1997143185</reference><reference>2010525351</reference><reference>2032396207</reference><reference>2039112578</reference><reference>2088735483</reference><reference>2099487986</reference><reference>2101247081</reference><reference>2141796169</reference><reference>2167949883</reference><reference>2169907127</reference></references><venue id="1163686456" type="C">Mathematical Foundations of Computer Science</venue><doi>10.1007/3-540-57182-5_8</doi><keywords><keyword weight="0.43675">Discrete mathematics</keyword><keyword weight="0.4943">Locality</keyword><keyword weight="0.52686">Operational semantics</keyword><keyword weight="0.50001">Standard ML</keyword><keyword weight="0.51825">Expression (mathematics)</keyword><keyword weight="0.44059">Computer science</keyword><keyword weight="0.52445">Decidability</keyword><keyword weight="0.49236">Order type</keyword><keyword weight="0.48951">Function application</keyword><keyword weight="0.51616">Recursion</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The research reported in this paper is concerned with the problem of reasoning about properties of higher order functions involving state. It is motivated by the desire to identify what, if any, are the difficulties created purely by locality of state, independent of other properties such as side-effects, exceptional termination and non-termination due to recursion. We consider a simple language (equivalent to a fragment of Standard ML) of typed, higher order functions that can dynamically create fresh names; names are created with local scope, can be tested for equality and can be passed around via function application, but that is all. Despite the extreme simplicity of the language and its operational semantics, the observable properties of such functions are shown to be very subtle. A notion of ‘logical relation’ is introduced which incorporates a version of representation independence for local names. We show how to use it to establish observational equivalences. The method is shown to be complete (and decidable) for expressions of first order types, but incomplete at higher types.</abstract></paper>
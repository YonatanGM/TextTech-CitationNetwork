<paper id="1529049337"><title>A Toolkit for Constructing Type- and Constraint-Based Program Analyses</title><year>1998</year><authors><author org="&quot;University of California, Berkeley&quot;" id="2067453598">Alexander Aiken</author><author org="&quot;University of California, Berkeley&quot;" id="1974059945">Manuel Fähndrich</author><author org="&quot;University of California, Berkeley&quot;" id="2155210674">Jeffrey S. Foster</author><author org="&quot;University of California, Berkeley&quot;" id="2102704429">Zhendong Su</author></authors><n_citation>50</n_citation><doc_type>Journal</doc_type><references><reference>1503265404</reference><reference>1528503275</reference><reference>1828367272</reference><reference>1829244603</reference><reference>1963954367</reference><reference>1986334602</reference><reference>1994660988</reference><reference>2022443117</reference><reference>2025155812</reference><reference>2039572288</reference><reference>2043100293</reference><reference>2055292912</reference><reference>2065088439</reference><reference>2088224512</reference><reference>2102389857</reference><reference>2116098983</reference><reference>2121038016</reference><reference>2124153277</reference><reference>2129380858</reference><reference>2131135493</reference><reference>2161100976</reference><reference>2163976959</reference><reference>2169391873</reference><reference>2421851683</reference></references><venue id="106296714" type="J">Lecture Notes in Computer Science</venue><doi>10.1007/BFb0055513</doi><keywords><keyword weight="0.49605">Lambda calculus</keyword><keyword weight="0.48104">Programming language</keyword><keyword weight="0.52291">Control flow graph</keyword><keyword weight="0.53211">Functional programming</keyword><keyword weight="0.46932">Computer science</keyword><keyword weight="0.55854">Type inference</keyword><keyword weight="0.4625">Artificial intelligence</keyword><keyword weight="0.53632">Abstract syntax</keyword><keyword weight="0.58149">Program analysis</keyword><keyword weight="0.44459">Distributed computing</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>BANE (the Berkeley Analysis Engine) is a publicly available toolkit for constructing type- and constraint-based program analyses. We describe the goals of the project, the rationale for BANE’s overall design, some examples coded in BANE, and briefly compare BANE with other program analysis frameworks.</abstract></paper>
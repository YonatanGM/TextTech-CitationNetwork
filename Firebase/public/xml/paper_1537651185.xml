<paper id="1537651185"><title>Introduction to a Computational Theory and Implementation of Sequential Hardware Equivalence</title><year>1990</year><authors><author org="" id="1999761091">Carl Pixley</author></authors><n_citation>41</n_citation><doc_type>Conference</doc_type><references><reference>1602476740</reference><reference>1817451992</reference><reference>2054554282</reference><reference>2080267935</reference><reference>2127862840</reference><reference>2135453964</reference><reference>2154030608</reference></references><venue id="1162450063" type="C">Computer Aided Verification</venue><doi>10.1007/BFb0023719</doi><keywords><keyword weight="0.45249">Computer science</keyword><keyword weight="0.49876">Binary decision diagram</keyword><keyword weight="0.45563">Algorithm</keyword><keyword weight="0.51436">Computability</keyword><keyword weight="0.46167">Theoretical computer science</keyword><keyword weight="0.58262">Finite-state machine</keyword><keyword weight="0.63265">Equivalence (measure theory)</keyword><keyword weight="0.53175">Model of computation</keyword><keyword weight="0.50668">Search problem</keyword><keyword weight="0.51183">Computational learning theory</keyword><keyword weight="0.44052">Computer hardware</keyword><keyword weight="0.51699">Theory of computation</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>A theory of sequential hardware equivalence [1] is presented, including the notions of gate-level model (GLM), hardware finite state machine (HFSM), state equivalence (∼), alignability, resetability, and sequential hardware equivalence (≈). This theory is motivated by (1) the observation that it is impossible to control the initial state of a machine when it is powered on, and (2) the desire to decide equivalence of two designs based solely on their netlists and logic device models, without knowledge of intended initial states or intended environments.</abstract></paper>
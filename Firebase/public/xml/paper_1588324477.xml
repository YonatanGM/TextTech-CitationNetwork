<paper id="1588324477"><title>Thoughts on a Larch/ML and a New Application for LP</title><year>1992</year><authors><author org="Carnegie - Mellon University#TAB#" id="1584891692">Jeannette M. Wing</author><author org="Carnegie - Mellon University#TAB#" id="1978362565">Eugene J. Rollins</author><author org="Carnegie - Mellon University#TAB#" id="309463339">Amy Moormann Zaremski</author></authors><n_citation>18</n_citation><doc_type>Conference</doc_type><references><reference>134953795</reference><reference>1829244603</reference><reference>1999862696</reference><reference>2034676877</reference><reference>2062968803</reference><reference>2098780004</reference><reference>2165434002</reference><reference>2398663808</reference></references><venue id="2759699725" type="C">International Workshop on Larch</venue><doi>10.1007/978-1-4471-3558-6_17</doi><keywords><keyword weight="0.44508">Programming language</keyword><keyword weight="0.54525">Standard ML</keyword><keyword weight="0.42528">Computer science</keyword><keyword weight="0.49983">Abstract syntax tree</keyword><keyword weight="0.54791">Larch</keyword><keyword weight="0.67299">Larch Prover</keyword><keyword weight="0.4801">Symbol table</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>We describe a preliminary design for a Larch interface language for the programming language ML. [Since this design covers only a subset of Standard ML, we will refer to our interface language as Larch/ML rather than Larch/SML.] MLu0027u0027s support for higher-order functions suggests a need to go beyond the first-order logical foundations of Larch languages. We also propose a new application, "specification matching", for the Larch Prover, which could benefit from extending LP to handle full first-order logic. This paper describes on-going work and suggests a number of open problems related to Larch/ML and to LP as used for specification matching. We assume rudimentary knowledge of Larch, its languages and two-tiered approach.</abstract></paper>
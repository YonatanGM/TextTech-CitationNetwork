<paper id="1486076990"><title>Representing Variability in Software Product Lines: A Case Study</title><year>2002</year><authors><author org="University of Groningen" id="1997901772">Michel Jaring</author><author org="University of Groningen" id="2271217432">Jan Bosch</author></authors><n_citation>70</n_citation><doc_type>Conference</doc_type><references><reference>306273264</reference><reference>1511948075</reference><reference>1541290946</reference><reference>1553120816</reference><reference>1554977156</reference><reference>1560808444</reference><reference>1978591382</reference><reference>1991319391</reference><reference>2023546887</reference><reference>2056176166</reference><reference>2067623886</reference><reference>2097761176</reference><reference>2106432430</reference><reference>2111303483</reference><reference>2114152285</reference><reference>2116844130</reference><reference>2142874510</reference><reference>2168663075</reference><reference>2464949168</reference><reference>2615076667</reference></references><venue id="1190643002" type="C">Software Product Lines</venue><doi>10.1007/3-540-45652-X_2</doi><keywords><keyword weight="0.4647">Systems engineering</keyword><keyword weight="0.47561">Software engineering</keyword><keyword weight="0.45962">Computer science</keyword><keyword weight="0.41971">Simulation</keyword><keyword weight="0.66596">Software quality management</keyword><keyword weight="0.65639">Software system</keyword><keyword weight="0.74326">Software product line</keyword><keyword weight="0.64905">Backporting</keyword><keyword weight="0.67207">Software construction</keyword><keyword weight="0.66435">Software development</keyword><keyword weight="0.65181">Software sizing</keyword><keyword weight="0.64808">Social software engineering</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Variability is the ability to change or customize a software system (i.e., software architects anticipate change and design architectures that support those changes). If the architecture is used for different product versions (e.g., in a software product line context, it becomes important to understand where change has to be planned and the possible options in particular situations. Three variability issues have been identified in a case study involving a software company specializing in product and system development for a professional mobile communication infrastructure. These issues are discussed and analyzed and illustrate the need for handling variability in a more explicit manner. To address this need, this paper suggests a method to represent and normalize variability in industrial software systems. The method is exemplified by applying it to the software product line of the aforementioned company.</abstract></paper>
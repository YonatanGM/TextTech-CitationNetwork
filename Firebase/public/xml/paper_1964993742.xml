<paper id="1964993742"><title>An interpretation of objects and object types</title><year>1996</year><authors><author org="Digital Systems Research Center, 130 Lytton Avenue, Palo Alto, California" id="2162106674">Martín Abadi</author><author org="Digital Systems Research Center, 130 Lytton Avenue, Palo Alto, California" id="331751290">Luca Cardelli</author><author org="Isaac Newton Institute for Mathematical Sciences, 20 Clarkson Road, Cambridge, CB3 0EH, U.K." id="2498153226">Ramesh Viswanathan</author></authors><n_citation>49</n_citation><doc_type>Conference</doc_type><references><reference>1563488194</reference><reference>1739798036</reference><reference>2058121495</reference><reference>2089431782</reference><reference>2095988676</reference><reference>2098583541</reference><reference>2104204098</reference><reference>2129788677</reference><reference>2138839382</reference><reference>2149545675</reference><reference>2170810021</reference><reference>2173184982</reference></references><venue id="1160032607" type="C">Symposium on Principles of Programming Languages</venue><doi>10.1145/237721.237809</doi><keywords><keyword weight="0.48958">Z notation</keyword><keyword weight="0.54277">Relational calculus</keyword><keyword weight="0.45714">Programming language</keyword><keyword weight="0.5924">Method</keyword><keyword weight="0.44105">Computer science</keyword><keyword weight="0.54711">Object type</keyword><keyword weight="0.40213">Invocation</keyword><keyword weight="0.46288">Formal specification</keyword><keyword weight="0.45">Theoretical computer science</keyword><keyword weight="0.46637">Subtyping</keyword><keyword weight="0.47124">Recursion</keyword></keywords><publisher>ACM</publisher><abstract>We present an interpretation of typed object-oriented concepts in terms of well-understood, purely procedural concepts. More precisely, we give a compositional subtype-preserving translation of a basic object calculus supporting method invocation, functional method update, and subtyping, into the polymorphic �-calculus with recursive types and subtyping. The translation techniques apply also to an imperative version of the object calculus which includes in-place method update and object cloning. Finally, the translation easily extends to "Self types" and other interesting object-oriented constructs.</abstract></paper>
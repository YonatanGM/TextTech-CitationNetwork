<paper id="1596576235"><title>New Constructions for Secure Hash Functions</title><year>1998</year><authors><author org="BellCore" id="1971187209">William Aiello</author><author org="Surety" id="2630828112">Stuart Haber</author><author org="Microsoft Research,#TAB#" id="2126319880">Ramarathnam Venkatesan</author></authors><n_citation>8</n_citation><doc_type>Conference</doc_type><references><reference>1493969756</reference><reference>1537185870</reference><reference>1542068190</reference><reference>1543503103</reference><reference>1547537489</reference><reference>1549228503</reference><reference>1566172292</reference><reference>1574876995</reference><reference>1587648112</reference><reference>1590624619</reference><reference>1600432225</reference><reference>1606385043</reference><reference>1660562555</reference><reference>1972792640</reference><reference>2005725110</reference><reference>2026522166</reference><reference>2033778422</reference><reference>2075819430</reference><reference>2086659222</reference><reference>2098801947</reference><reference>2104633167</reference><reference>2107446884</reference><reference>2119343147</reference><reference>2155099317</reference><reference>2157047743</reference><reference>2916302273</reference></references><venue id="2758283624" type="C">Fast Software Encryption</venue><doi>10.1007/3-540-69710-1_11</doi><keywords><keyword weight="0.60492">SHA-2</keyword><keyword weight="0.6157">Collision resistance</keyword><keyword weight="0.6247">Cryptographic hash function</keyword><keyword weight="0.45483">Algorithm</keyword><keyword weight="0.46049">Theoretical computer science</keyword><keyword weight="0.61813">SWIFFT</keyword><keyword weight="0.62739">Hash function</keyword><keyword weight="0.64576">Security of cryptographic hash functions</keyword><keyword weight="0.60523">Merkle–Damgård construction</keyword><keyword weight="0.59159">Hash chain</keyword><keyword weight="0.39708">Mathematics</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We present new, efficient and practical schemes for construction of collision-resistant hash functions, and analyze some simple methods for combining existing hash-function designs so as to enhance their :[28],"our new constructions, we first map the input to a slightly longer string using a primitive we introduce called secure stretch functions. These are length-increasing almost surely injective one-way functions that sufficiently randomize their inputs so that it is hard for an adversary to force the outputs to fall into a target set. Then we apply a compression function to the output of the stretch function. We analyze the security of these constructions under different types of assumptions on both stretch and compression functions. These assumptions combine random-function models, intractability of certain "biasing" tasks, and the degeneracy structure of compression functions. The use of stretching seems to allow reduced requirements on the compression function, and may be of independent constructions allow :[148],"one to use popular and efficient primitives such as MD5, SHA-1, and RIPEMD that may exhibit weaknesses as collision-resistant functions. But no attacks are currently known on their one-way and randomizing properties, when they are used as stretch functions as in :[28],"our constructions. There are several collision-resistant hash functions based on des for which there are no known effective attacks, but which are too slow for most practical applications. Our use of stretch functions enable us to base :[28],"our compression function on des so that the resulting hash function achieves practical speeds: a test implementation runs at 40% of the speed of :[253],"also suggest some imperfect random-oracle models, showing how to build better primitives from given imperfect ones. In this vein, we :[253],"also analyze how to defend against a collision-finding adversary for a given primitive by building "independent" primitives.</abstract></paper>
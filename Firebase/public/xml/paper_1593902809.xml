<paper id="1593902809"><title>Enriching OCL Using Observational Mu-Calculus</title><year>2002</year><authors><author org="University of Edinburgh," id="2130777246">Julian C. Bradfield</author><author org="University of Edinburgh," id="2127666212">Juliana KÃ¼ster Filipe</author><author org="University of Edinburgh," id="2287432086">Perdita Stevens</author></authors><n_citation>47</n_citation><doc_type>Conference</doc_type><references><reference>1562350268</reference><reference>2118968163</reference></references><venue id="1187615537" type="C">Fundamental Approaches to Software Engineering</venue><doi>10.1007/3-540-45923-5_14</doi><keywords><keyword weight="0.58595">Specification language</keyword><keyword weight="0.49582">Transition system</keyword><keyword weight="0.4647">Programming language</keyword><keyword weight="0.48067">Object-oriented programming</keyword><keyword weight="0.52959">Unified Modeling Language</keyword><keyword weight="0.4435">Computer science</keyword><keyword weight="0.45104">Theoretical computer science</keyword><keyword weight="0.57976">Temporal logic</keyword><keyword weight="0.45632">Modular design</keyword><keyword weight="0.67609">Object Constraint Language</keyword><keyword weight="0.51918">Liveness</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The Object Constraint Language is a textual specification language which forms part of the Unified Modelling Language[8]. Its principal uses are specifying constraints such as well-formedness conditions (e.g. in the definition of UML itself) and specifying contracts between parts of a system being modelled in UML. Focusing on the latter, we propose a systematic way to extend OCL with temporal constructs in order to express richer contracts. Our approach is based on observational mu-calculus, a two-level temporal logic in which temporal features at the higher level interact cleanly with a domain specific logic at the lower level. Using OCL as the lower level logic, we achieve much improved expressiveness in a modular way. We present a unified view of invariants and pre/post conditions, and we show how the framework can be used to permit the specification of liveness properties.</abstract></paper>
<paper id="1570204353"><title>Specification and Verification of Polling Real-Time Systems</title><year>2000</year><authors><author org="University of Oldenburg ," id="2018774578">Henning Dierks</author></authors><n_citation>15</n_citation><doc_type /><references><reference>1481654441</reference><reference>1527451030</reference><reference>1937190529</reference><reference>2000916035</reference><reference>2024700017</reference><reference>2101508170</reference><reference>2137615678</reference><reference>2138225282</reference><reference>2153439859</reference><reference>2166775836</reference><reference>2167467151</reference><reference>2694136767</reference></references><venue id="" type="">Ausgezeichnete Informatikdissertationen</venue><doi>10.1007/978-3-322-84823-9_3</doi><keywords><keyword weight="0.65959">Operational semantics</keyword><keyword weight="0.50329">Source code</keyword><keyword weight="0.46892">Computer science</keyword><keyword weight="0.49664">Automaton</keyword><keyword weight="0.46925">Theoretical computer science</keyword><keyword weight="0.45083">Real-time computing</keyword><keyword weight="0.5069">Programmable logic controller</keyword><keyword weight="0.49922">Timer</keyword><keyword weight="0.60435">Formal methods</keyword><keyword weight="0.58523">Duration calculus</keyword><keyword weight="0.51214">Semantics</keyword></keywords><publisher>Vieweg+Teubner Verlag</publisher><abstract>Formal methods for real-time systems are an important topic of contemporary research. The aim is to cope with the additional complexity of “time” in specification and verification. In [Die99a] we present an approach to the correct design of real-time programs implemented on “Programmable Logic Controllers” (PLCs). This hardware executes repeatedly an application program whereas each cycle has an upper time bound. The central device in our approach is the notion of “PLC-Automaton” which provides an abstract view on PLC programs. For PLC-Automata the following results are presented in [Die99a]: is :[89],"possible to generate PLC source code from a PLC-Automaton. Also constraints on both the speed of the PLC and on the accuracy of time measurement are :[117],"logical semantics in terms of Duration Calculus is developed. Since this semantics considers the cyclic behaviour, computation speed, and timer tolerances a realistic model of the real-world behaviour is :[147],"ways to compose PLC-Automata are defined and described :[156],"alternative operational semantics in terms of Timed Automata is given. It is provably consistent with the Duration Calculus semantics. Hence, model-checking PLC-Automata is :[89],"possible due to this semantics. Moreover, we examine techniques for building abstractions of these Timed Automata :[196],"formal synthesis procedure for “Implementables”, a sublanguage of Duration Calculus, is derived that produces a PLC-Automaton implementing the Implementables-specification if and only if there exists an implementing PLC-Automaton.</abstract></paper>
<paper id="1512229743"><title>Combining the Expressivity of UCPOP with the Efficiency of Graphplan</title><year>1997</year><authors><author org="University of Southern California" id="2275255920">B. Cenk Gazen</author><author org="University of Southern California" id="1991211814">Craig A. Knoblock</author></authors><n_citation>113</n_citation><doc_type>Journal</doc_type><references><reference>15206906</reference><reference>1498154961</reference><reference>1600919542</reference><reference>2025460523</reference><reference>2164457256</reference></references><venue id="106296714" type="J">Lecture Notes in Computer Science</venue><doi>10.1007/3-540-63912-8_88</doi><keywords><keyword weight="0.50989">Knowledge representation and reasoning</keyword><keyword weight="0.47901">Partial evaluation</keyword><keyword weight="0.54321">Satplan</keyword><keyword weight="0.52427">CPU time</keyword><keyword weight="0.45367">Computer science</keyword><keyword weight="0.47854">Language construct</keyword><keyword weight="0.45902">Theoretical computer science</keyword><keyword weight="0.48276">Preprocessor</keyword><keyword weight="0.45254">Artificial intelligence</keyword><keyword weight="0.74817">Graphplan</keyword><keyword weight="0.44283">Distributed computing</keyword><keyword weight="0.48986">Test set</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>There has been a great deal of recent work on new approaches to efficiently generating plans in systems such as Graphplan and SATplan. However, these systems only provide an impoverished representation language compared to other planners, such as UCPOP, ADL, or Prodigy. This makes it difficult to represent planning problems using these new planners. This paper addresses this problem by providing a completely automated set of transformations for converting a UCPOP domain representation into a Graphplan representation. The set of transformations extends the Graphplan representation language to include disjunctions, negations, universal quantification, conditional effects, and axioms. We tested the resulting planner on the 18 test domains and 41 problems that come with the UCPOP 4.0 distribution. Graphplan with the new preprocessor is able to solve every problem in the test set and on the hard problems (i.e., those that require more than one second of CPU time) it can solve them significantly faster than UCPOP. While UCPOP was unable to solve 7 of the test problems within a search limit of 100,000 nodes (which requires 414 to 980 CPU seconds), Graphplan with the preprocessor solved them all in under 15 CPU seconds (including the preprocessing time).</abstract></paper>
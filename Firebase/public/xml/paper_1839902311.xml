<paper id="1839902311"><title>Modular domain specific languages and tools</title><year>1998</year><authors><author org="Dept. of Computer Science, Yale University, New Haven, CT, USA#TAB#" id="2159432867">P. Hudak</author></authors><n_citation>307</n_citation><doc_type>Conference</doc_type><references><reference>15799706</reference><reference>1532465792</reference><reference>1888232792</reference><reference>1968136518</reference><reference>1995674161</reference><reference>2078944436</reference><reference>2079512738</reference><reference>2104464431</reference><reference>2110066118</reference><reference>2119251833</reference><reference>2141576692</reference><reference>2156876717</reference><reference>2295597695</reference><reference>2295914203</reference></references><venue id="2756309959" type="C">International Conference on Software Reuse</venue><doi>10.1109/ICSR.1998.685738</doi><keywords><keyword weight="0.58295">Domain-specific language</keyword><keyword weight="0.47775">Programming language</keyword><keyword weight="0.52705">Functional programming</keyword><keyword weight="0.5099">Digital subscriber line</keyword><keyword weight="0.46086">Computer science</keyword><keyword weight="0.5684">Haskell</keyword><keyword weight="0.57471">Application domain</keyword><keyword weight="0.52222">Software maintenance</keyword><keyword weight="0.51122">Application software</keyword><keyword weight="0.50474">Semantics</keyword></keywords><publisher>IEEE Computer Society</publisher><abstract>A domain specific language (DSL) allows one to develop software for a particular application domain quickly and effectively, yielding programs that are easy to understand, reason about, and maintain. On the other hand, there may be a significant overhead in creating the infrastructure needed to support a DSL. To solve this problem, a methodology is described for building domain specific embedded languages (DSELs), in which a DSL is designed within an existing, higher-order and typed, programming language such as Haskell or ML. In addition, techniques are described for building modular interpreters and tools for DSELs. The resulting methodology facilitates reuse of syntax semantics, implementation code, software tools, as well as look-and-feel.</abstract></paper>
<paper id="1536913299"><title>Constructing the Voronoi diagram of a set of line segments in parallel</title><year>1989</year><authors><author org="Johns Hopkins University" id="2135853928">Michael T. Goodrich</author><author org="University Of Dublin" id="2052421110">Colm Ó'Dúnlaing</author><author org="New-York University &gt;  &gt;  &gt;  &gt;" id="2974212233">Chee K. Yap</author></authors><n_citation>8</n_citation><doc_type>Conference</doc_type><references><reference>1806295116</reference><reference>1965440866</reference><reference>1975510415</reference><reference>1993391455</reference><reference>2003583528</reference><reference>2007519459</reference><reference>2011124327</reference><reference>2015751084</reference><reference>2016482138</reference><reference>2060513624</reference><reference>2070164574</reference><reference>2074276908</reference><reference>2092529578</reference><reference>2120104755</reference><reference>2134008688</reference><reference>2143462372</reference><reference>2294603245</reference><reference>2407038694</reference><reference>2443862921</reference></references><venue id="1149998698" type="C">Workshop on Algorithms and Data Structures</venue><doi>10.1007/3-540-51542-9_3</doi><keywords><keyword weight="0.44128">Discrete mathematics</keyword><keyword weight="0.5333">Line segment</keyword><keyword weight="0.63852">Power diagram</keyword><keyword weight="0.44418">Combinatorics</keyword><keyword weight="0.50674">Polygon</keyword><keyword weight="0.57508">Centroidal Voronoi tessellation</keyword><keyword weight="0.51974">Parallel algorithm</keyword><keyword weight="0.39326">Computer science</keyword><keyword weight="0.59469">Weighted Voronoi diagram</keyword><keyword weight="0.63535">Voronoi diagram</keyword><keyword weight="0.60114">Fortune's algorithm</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>In this paper we give a parallel algorithm for constructing the Voronoi diagram of a polygonal scene, i.e., a set of line segments in the plane such that no two segments intersect except possibly at their endpoints. Our algorithm runs inO(log2n) time usingO(n) processors in the CREW PRAM model.</abstract></paper>
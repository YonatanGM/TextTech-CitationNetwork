<paper id="1817199704"><title>SIGNAL: A declarative language for synchronous programming of real-time systems</title><year>1987</year><authors><author org="IRISA/INRIA, Rennes-Cedex, France" id="2059405868">Thierry Gautier</author><author org="IRISA/INRIA, Rennes-Cedex, France" id="1980402524">Paul Le Guernic</author><author org="CICB/CNRS, Rennes Cedex, France#TAB#" id="2776430478">LÃ¶ic Besnard</author></authors><n_citation>128</n_citation><doc_type>Conference</doc_type><references><reference>1576648414</reference><reference>1597755753</reference><reference>1663179985</reference><reference>2110425399</reference><reference>2135784828</reference></references><venue id="1162793720" type="C">International Conference on Functional Programming</venue><doi>10.1007/3-540-18317-5_15</doi><keywords><keyword weight="0.54877">Fifth-generation programming language</keyword><keyword weight="0.46189">Programming language</keyword><keyword weight="0.55631">Signal programming</keyword><keyword weight="0.54806">Programming paradigm</keyword><keyword weight="0.51052">Commutative property</keyword><keyword weight="0.45214">Computer science</keyword><keyword weight="0.55202">Concurrency</keyword><keyword weight="0.50454">Inductive programming</keyword><keyword weight="0.4434">Real-time computing</keyword><keyword weight="0.46623">Theoretical computer science</keyword><keyword weight="0.53062">Declarative programming</keyword><keyword weight="0.51393">Data flow diagram</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>We present an applicative language, SIGNAL, designed to program real-time systems. The language is based on a synchronous notion of time. We assume the execution of operations to have a zero logical time duration; then, the sequence of communication events determines entirely a temporal reference. The ordering of the runable operations is limited only by the dependencies between the calculi : this is the point of view of data flow languages. SIGNAL is a data flow language (where the potential parallelism is implicit), which permits a structural description of interconnected processes. SIGNAL handles possibly infinite sequences of values (called signals) characterized by an implicit clock which specifies the relative instants (with respect to other signals) at which these values are available. Specific operators, such as delay, undersampling, deterministic merge, are designed to express temporal relations between different signals : in this way, a SIGNAL program expresses both functional and temporal relationships between all the involved signals. The language is semantically sound, and its declarative style allows to derive, by a simple projection on the commutative field Z/3Z, a complete static calculus of the timing of any SIGNAL process, called its clock calculus. Hence, the language SIGNAL is also a formal system to reason about timing and concurrency. The clock calculus is completed together with the dependency analysis of a given program. This leads to a conditional dependence graph in which the edges may be labelled by the involved clocks. From this graph, we generate code for a sequential machine, but it appears to be the suitable level to study the implementation on a multiprocessor architecture.</abstract></paper>
<paper id="1577579001"><title>Pragmatic Aspects of Two-Level Denotational Meta-Languages</title><year>1986</year><authors><author org="Aalborg University Centre" id="2345078223">Hanne Riis Nielson</author><author org="Aalborg University Centre" id="2057873166">Flemming Nielson</author></authors><n_citation>15</n_citation><doc_type>Conference</doc_type><references><reference>1482690958</reference><reference>1564003788</reference><reference>1586657822</reference><reference>1753832216</reference><reference>1987031623</reference><reference>2004468084</reference><reference>2016933775</reference><reference>2024873396</reference><reference>2071836561</reference><reference>2074756472</reference><reference>2088604010</reference><reference>2098780004</reference><reference>2130552670</reference><reference>2131733202</reference><reference>2141956765</reference><reference>2172307690</reference></references><venue id="1136861413" type="C">European Symposium on Programming</venue><doi>10.1007/3-540-16442-1_10</doi><keywords><keyword weight="0.53504">Attribute grammar</keyword><keyword weight="0.47447">Programming language</keyword><keyword weight="0.45581">Computer science</keyword><keyword weight="0.52965">Compiler</keyword><keyword weight="0.41909">Smash product</keyword><keyword weight="0.52595">Code generation</keyword><keyword weight="0.45411">Theoretical computer science</keyword><keyword weight="0.52151">Rewriting</keyword><keyword weight="0.0">Language definition</keyword></keywords><publisher>Springer-Verlag New York, Inc.</publisher><abstract>This work is part of a research project on automatic generation of optimazing compilers from denotational language definitions. The novel aspect of our approach is that we are based on a two-level meta-language allowing us to distinguish between compile-time and run-time, and thereby to formalize e.g. the distinction between "static expression procedures" and "expression procedures" of Tennent (1981). In this paper we discuss some of the problems encountered when writing denotational definitions using a two-level meta-language. We consider the meta-language TMLS introduced in Nielson (1986a) as well as its restricted version TMLSC developed in Nielson and Nielson (1986) for automatic code generation. Based on an example we argue that rewriting a language definition using TMLS in TMLSC really means introducing some notion of activation record. This observation may pave the way for a formalization of the transformations on semantic definitions considered by Milne and Strachey (1976) as being imposed by different meta-languages.</abstract></paper>
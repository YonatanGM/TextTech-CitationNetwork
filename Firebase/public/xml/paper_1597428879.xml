<paper id="1597428879"><title>Salsa: Combining Constraint Solvers with BDDs for Automatic Invariant Checking</title><year>2000</year><authors><author org="Center for High Assurance Computer Systems" id="2098528877">Ramesh Bharadwaj</author><author org="Reactive Systems, Inc." id="2153381412">Steve Sims</author></authors><n_citation>58</n_citation><doc_type>Conference</doc_type><references><reference>176067219</reference><reference>1483327805</reference><reference>1507959092</reference><reference>1540012118</reference><reference>1555814309</reference><reference>1556247398</reference><reference>1570105559</reference><reference>1594722104</reference><reference>1595351489</reference><reference>1606950856</reference><reference>1881102326</reference><reference>1929502661</reference><reference>1965765860</reference><reference>2005001435</reference><reference>2011039300</reference><reference>2030670832</reference><reference>2081553013</reference><reference>2099674884</reference><reference>2113486906</reference><reference>2115309705</reference><reference>2117189826</reference><reference>2125708466</reference><reference>2151056896</reference><reference>2164778826</reference><reference>2478455691</reference></references><venue id="1159071770" type="C">Tools and Algorithms for Construction and Analysis of Systems</venue><doi>10.1007/3-540-46419-0_26</doi><keywords><keyword weight="0.52851">Model checking</keyword><keyword weight="0.46235">Programming language</keyword><keyword weight="0.47946">Invariant (physics)</keyword><keyword weight="0.45378">Computer science</keyword><keyword weight="0.50074">Binary decision diagram</keyword><keyword weight="0.4633">Theoretical computer science</keyword><keyword weight="0.48495">Formal specification</keyword><keyword weight="0.51578">Constraint satisfaction problem</keyword><keyword weight="0.49854">Invariant (mathematics)</keyword><keyword weight="0.51033">Counterexample</keyword><keyword weight="0.49169">Formal verification</keyword><keyword weight="0.44522">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Salsa is an invariant checker for specifications in SAL (the SCR Abstract Language). To establish a formula as an invariant without any user guidance, Salsa carries out an induction proof that utilizes tightly integrated decision procedures, currently a combination of BDD algorithms and a constraint solver for integer linear arithmetic, for discharging the verification conditions. The user interface of Salsa is designed to mimic the interfaces of model checkers; i.e., given a formula and a system description, Salsa either establishes the formula as an invariant of the system (but returns no proof) or provides a counterexample. In either case, the algorithm will terminate. Unlike model checkers, Salsa returns a state pair as a counterexample and not an execution sequence. Also, due to the incompleteness of induction, users must validate the counterexamples. The use of induction enables Salsa to combat the state explosion problem that plagues model checkers - it can handle specifications whose state spaces are too large for model checkers to analyze. Also, unlike general purpose theorem provers, Salsa concentrates on a single task and gains efficiency by employing a set of optimized heuristics.</abstract></paper>
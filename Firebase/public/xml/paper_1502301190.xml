<paper id="1502301190"><title>Verification of Safety Critical Systems Using TTM/RTTL</title><year>1991</year><authors><author org="York University" id="1739574384">Jonathan S. Ostroff</author></authors><n_citation>20</n_citation><doc_type>Conference</doc_type><references><reference>1569068921</reference><reference>1992586213</reference><reference>2067962820</reference><reference>2073689993</reference><reference>2087276283</reference><reference>2147543351</reference></references><venue id="2758088042" type="C">Real-Time: Theory in Practice, REX Workshop</venue><doi>10.1007/BFb0032008</doi><keywords><keyword weight="0.61171">Computation tree logic</keyword><keyword weight="0.61689">Temporal logic of actions</keyword><keyword weight="0.47015">Programming language</keyword><keyword weight="0.56641">Axiomatic semantics</keyword><keyword weight="0.62384">Interval temporal logic</keyword><keyword weight="0.46741">Computer science</keyword><keyword weight="0.61345">Correctness</keyword><keyword weight="0.45484">Algorithm</keyword><keyword weight="0.6299">Heuristics</keyword><keyword weight="0.60695">Temporal logic</keyword><keyword weight="0.58148">Constraint logic programming</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>This paper shows how real-time temporal logic can be used for the verification of safety-critical systems. Heuristics are provided that help the designer to construct a proof diagram that either facilitates the presentation of a proof of correctness, or provides a counterexample to indicate the invalidity of the specification that is being checked. The heuristics can be semi-automated using constraint logic programming languages because most of the reasoning does not involve the actual use of temporal logic. The type of reasoning employed in this paper is not limited to finite state systems, but can be used on infinite state systems as well. The heuristics are illustrated using a process control example.</abstract></paper>
<paper id="1603821301"><title>Attacking the bottlenecks of backfilling schedulers</title><year>2000</year><authors><author org="" id="695725495">Peter J. Keleher</author><author org="" id="197028266">Dmitry Zotkin</author><author org="" id="2013331985">Dejan Perkovic</author></authors><n_citation>24</n_citation><doc_type>Journal</doc_type><references><reference>1487076132</reference><reference>1541858096</reference><reference>1573602196</reference><reference>1599248213</reference><reference>2094587335</reference><reference>2144176169</reference><reference>2150074609</reference><reference>2160544331</reference><reference>2489559643</reference></references><venue id="106148199" type="J">Cluster Computing</venue><doi>10.1023/A:1019044623636</doi><keywords><keyword weight="0.43557">Computer science</keyword><keyword weight="0.44437">Parallel computing</keyword><keyword weight="0.56523">Queue</keyword><keyword weight="0.43757">Real-time computing</keyword><keyword weight="0.56173">Sorting</keyword><keyword weight="0.43611">Exploit</keyword><keyword weight="0.48748">Schedule</keyword><keyword weight="0.0">Execution time</keyword><keyword weight="0.67362">Job queue</keyword><keyword weight="0.44334">Distributed computing</keyword></keywords><publisher>Kluwer Academic Publishers</publisher><abstract>Backfilling is a simple and effective way of improving the utilization of space-sharing schedulers. Simple first-come-first-served approaches are ineffective because large jobs can fragment the available resources. Backfilling schedulers address this problem by allowing jobs to move ahead in the queue, provided that they will not delay subsequent jobs. Previous research has shown that inaccurate estimates of execution times can lead to better backfilling schedules. In the first part of this study, we characterize this effect on several workloads, and show that average slowdowns can be effectively reduced by systematically lengthening estimated execution times. Further, we show that the average job slowdown metric can be addressed directly by sorting jobs by increasing execution time. Finally, we modify our sorting scheduler to ensure that incoming jobs can be given hard guarantees. The resulting scheduler guarantees to avoid starvation, and performs significantly better than previous backfilling schedulers. In the second part of this study, we show how queue randomization and even more a combination of queue randomization and sorting by job length can improve performance. We show that these improvements are better than with queue sorting by job length alone in the simulation with actual estimates of job running times. We investigate the real characteristics of these estimates, and show the wide range of overestimation. To exploit even more randomization and queue sorting, we eliminate guarantees from backfilling algorithm, and show significant improvements. Finally, we show a limited usefulness of these guarantees, and show that queue sorting criteria can be modified to prevent starvation in the modified backfilling algorithm.</abstract></paper>
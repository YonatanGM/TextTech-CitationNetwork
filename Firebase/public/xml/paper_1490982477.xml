<paper id="1490982477"><title>Efficient Generation of Prime Numbers</title><year>2000</year><authors><author org="Gemplus Card International" id="2070444920">Marc Joye</author><author org="Gemplus Card International" id="2117657652">Pascal Paillier</author><author org="Ecole Polytechnique FedÃ©rale de Lausanne" id="22805272">Serge Vaudenay</author></authors><n_citation>43</n_citation><doc_type>Conference</doc_type><references><reference>1492989663</reference><reference>1498019180</reference><reference>1498896551</reference><reference>1536546174</reference><reference>1545871761</reference><reference>1660562555</reference><reference>1964053266</reference><reference>1996360405</reference><reference>1999537317</reference></references><venue id="1127098075" type="C">Cryptographic Hardware and Embedded Systems</venue><doi>10.1007/3-540-44499-8_27</doi><keywords><keyword weight="0.57931">Prime (order theory)</keyword><keyword weight="0.50389">Key generation</keyword><keyword weight="0.46035">Heuristic</keyword><keyword weight="0.62813">Prime number</keyword><keyword weight="0.56144">Primality test</keyword><keyword weight="0.66902">Provable prime</keyword><keyword weight="0.45972">Cryptography</keyword><keyword weight="0.42983">Computer science</keyword><keyword weight="0.44476">Arithmetic</keyword><keyword weight="0.43525">Theoretical computer science</keyword><keyword weight="0.67458">Strong prime</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The generation of prime numbers underlies the use of most public-key schemes, essentially as a major primitive needed for the creation of key pairs or as a computation stage appearing during various cryptographic setups. Surprisingly, despite decades of intense mathematical studies on primality testing and an observed progressive intensification of cryptographic usages, prime number generation algorithms remain scarcely investigated and most real-life implementations are of rather poor performance. Common generators typically output a n-bit prime in heuristic average complexity O(n4) or O(n4/ log n) and these figures, according to experience, seem impossible to improve significantly: this paper rather shows a simple way to substantially reduce the value of hidden constants to provide much more efficient prime generation algorithms. We apply our techniques to various contexts (DSA primes, safe primes, ANSI X9.31-compliant primes, strong primes, etc.) and show how to build fast implementations on appropriately equipped smart-cards, thus allowing on-board key generation.</abstract></paper>
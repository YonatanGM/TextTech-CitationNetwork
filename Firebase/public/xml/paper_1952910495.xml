<paper id="1952910495"><title>Static analysis of binary code to isolate malicious behaviors</title><year>1999</year><authors><author org="Dept. of Comput. Sci., Laval Univ., Que., Canada" id="2719915868">J. Bergeron</author><author org="" id="343755398">M. Debbabi</author><author org="" id="2849313075">M.M. Erhioui</author><author org="" id="615016905">B. Ktari</author></authors><n_citation>79</n_citation><doc_type>Conference</doc_type><references><reference>1506151672</reference><reference>1507654557</reference><reference>1575308494</reference><reference>1996785213</reference><reference>2002771912</reference><reference>2028806953</reference><reference>2134312016</reference><reference>2293624369</reference></references><venue id="1181602175" type="C">Workshops on Enabling Technologies: Infrastracture for Collaborative Enterprises</venue><doi>10.1109/ENABL.1999.805197</doi><keywords><keyword weight="0.62273">Code coverage</keyword><keyword weight="0.65182">Unreachable code</keyword><keyword weight="0.57388">Program slicing</keyword><keyword weight="0.65353">Static program analysis</keyword><keyword weight="0.45545">Programming language</keyword><keyword weight="0.45752">Computer science</keyword><keyword weight="0.64489">Source code</keyword><keyword weight="0.63888">Redundant code</keyword><keyword weight="0.61747">KPI-driven code analysis</keyword><keyword weight="0.67147">Dead code</keyword></keywords><publisher>IEEE Computer Society</publisher><abstract>We address the problem of static slicing on binary executables for the purposes of malicious code detection in COTS components. By operating directly on binary code without any assumption on the availability of source code, our approach is realistic and appropriate for the analysis of COTS software products. To be able to reason on such low-level code, we need a suite of program transformations that aim to get a high level imperative representation of the code. The intention is to significantly improve the analysability while preserving the original semantics. Next we apply slicing techniques to extract those code fragments that are critical from the security standpoint. Finally, these fragments are subjected to verification against behavioral specifications to statically decide whether they exhibit malicious behaviors or not.</abstract></paper>
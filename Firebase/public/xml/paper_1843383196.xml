<paper id="1843383196"><title>Preemptive Job-Shop Scheduling Using Stopwatch Automata</title><year>2002</year><authors><author org="Verimag" id="346288146">Yasmina Abdeddaïm</author><author org="Verimag" id="694493417">Oded Maler</author></authors><n_citation>60</n_citation><doc_type>Conference</doc_type><references><reference>1482831602</reference><reference>1506114972</reference><reference>1589082502</reference><reference>1820192350</reference><reference>1979561589</reference><reference>2028563951</reference><reference>2076785727</reference><reference>2101508170</reference><reference>2134659903</reference><reference>2150377894</reference><reference>2170379073</reference></references><venue id="1159071770" type="C">Tools and Algorithms for Construction and Analysis of Systems</venue><doi>10.1007/3-540-46002-0_9</doi><keywords><keyword weight="0.61829">Quantum finite automata</keyword><keyword weight="0.56078">Job shop scheduling</keyword><keyword weight="0.59776">Mobile automaton</keyword><keyword weight="0.56878">Shortest path problem</keyword><keyword weight="0.43647">Computer science</keyword><keyword weight="0.52922">Job shop</keyword><keyword weight="0.45158">Theoretical computer science</keyword><keyword weight="0.63821">Timed automaton</keyword><keyword weight="0.5555">Stopwatch</keyword><keyword weight="0.43106">Distributed computing</keyword><keyword weight="0.59827">ω-automaton</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>In this paper we show how the problem of job-shop scheduling where the jobs are preemptible can be modeled naturally as a shortest path problem defined on an extension of timed automata, namely stopwatch automata where some of the clocks might be freezed at certain states. Although general verification problems on stopwatch automata are known to be undecidable, we show that due to particular properties of optimal schedules, the shortest path in the automaton belongs to a finite subset of the set of acyclic paths and hence the problem is solvable. We present several algorithms and heuristics for finding the shortest paths in such automata and test their implementation on numerous benchmark examples.</abstract></paper>
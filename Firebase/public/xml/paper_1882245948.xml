<paper id="1882245948"><title>A graph-based implementation for mechanized refinement calculus of OO programs</title><year>2010</year><authors><author org="UNU-IIST, Macau S.A.R., China#TAB#" id="2159399964">Zhiming Liu</author><author org="#N#Royal Holloway, University of London #N#" id="1842579178">Charles Morisset</author><author org="UNU-IIST, Macau S.A.R., China and State Key Lab. of Computer Science, Institute of Software, Chinese Academy of Sciences#TAB#" id="2928405729">Shuling Wang</author></authors><n_citation>3</n_citation><doc_type>Conference</doc_type><references><reference>1492315860</reference><reference>1508017011</reference><reference>1545978847</reference><reference>1552647623</reference><reference>1556566737</reference><reference>1577885475</reference><reference>1998455310</reference><reference>2008189534</reference><reference>2012522051</reference><reference>2024034783</reference><reference>2052735108</reference><reference>2097031842</reference><reference>2134071215</reference><reference>2142812159</reference><reference>2145426968</reference><reference>2159181605</reference><reference>2164810907</reference></references><venue id="1169806927" type="C">Formal Methods</venue><doi>10.1007/978-3-642-19829-8_17</doi><keywords><keyword weight="0.55901">HOL</keyword><keyword weight="0.0">Graph</keyword><keyword weight="0.47261">Programming language</keyword><keyword weight="0.61546">Refinement calculus</keyword><keyword weight="0.51107">Tuple</keyword><keyword weight="0.45629">Computer science</keyword><keyword weight="0.52098">Automated theorem proving</keyword><keyword weight="0.45993">Theoretical computer science</keyword><keyword weight="0.491">Formal methods</keyword><keyword weight="0.43212">Lemma (mathematics)</keyword><keyword weight="0.44761">Von Wright</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>This paper extends the mechanization of the refinement calculus done by von Wright in HOL, representing the state of a program as a graph instead of a tuple, in order to deal with object-orientation. The state graph structure is implemented in Isabelle, together with definitions and lemmas, to help the manipulation of states. We then show how proof obligations are automatically generated from the rCOS tool and can be loaded in Isabelle to be proved. We illustrate our approach by generating the proof obligations for a simple example, including object access and method invocation.</abstract></paper>
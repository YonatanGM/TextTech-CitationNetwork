<paper id="1595372275"><title>Towards a theory of type structure</title><year>1974</year><authors><author org="Syracuse University" id="2403193723">John C. Reynolds</author></authors><n_citation>716</n_citation><doc_type /><references><reference>173769065</reference><reference>1975882289</reference><reference>2087828835</reference><reference>2093541252</reference><reference>2127421847</reference><reference>2161229537</reference></references><venue id="" type="">Programming Symposium, Proceedings Colloque sur la Programmation</venue><doi>10.1007/3-540-06859-7_148</doi><keywords><keyword weight="0.37447">Combinatorics</keyword><keyword weight="0.44665">Functor</keyword><keyword weight="0.35472">Physics</keyword></keywords><publisher>Springer Berlin Heidelberg</publisher><abstract>7)(D) = B[w][71t]#D] and delta is a functor from Funct(C, C) into C. Even before defining the functors arrow and delta, it can be shown that B maps every type expression into a functor from C T into C, that w = wu0027 implies B[w] = B[wu0027], and that B[WlI: 2](~) = B[Wl][ D I t I B[w2](D) ] B[WlI~2](7) = B[Wl][ ~ I t I B[w2](~) ]</abstract></paper>
<paper id="1967544098"><title>Escape analysis on lists</title><year>1992</year><authors><author org="New-York University &gt;  &gt;  &gt;  &gt;" id="2951301790">Young Gil Park</author><author org="" id="2123694577">Benjamin Goldberg</author></authors><n_citation>110</n_citation><doc_type>Conference</doc_type><references><reference>1492479631</reference><reference>1537394154</reference><reference>1969198146</reference><reference>1975914482</reference><reference>1980142751</reference><reference>2021986357</reference><reference>2025033165</reference><reference>2045693727</reference><reference>2047793578</reference><reference>2064596811</reference><reference>2075030595</reference><reference>2075872176</reference><reference>2088064948</reference><reference>2122479849</reference><reference>2133979298</reference><reference>2155628381</reference><reference>2912126004</reference></references><venue id="1127352206" type="C">Programming Language Design and Implementation</venue><doi>10.1145/143095.143125</doi><keywords><keyword weight="0.45202">Programming language</keyword><keyword weight="0.49521">Subroutine</keyword><keyword weight="0.60576">Escape analysis</keyword><keyword weight="0.47732">Functional programming</keyword><keyword weight="0.45542">Computer science</keyword><keyword weight="0.53178">Compile time</keyword><keyword weight="0.50962">Heap (data structure)</keyword><keyword weight="0.43469">Real-time computing</keyword><keyword weight="0.44743">Theoretical computer science</keyword><keyword weight="0.48155">Software portability</keyword><keyword weight="0.61566">Garbage collection</keyword><keyword weight="0.48284">Abstract machine</keyword></keywords><publisher>ACM</publisher><abstract>Higher order functional programs constantly allocate objects dynamically. These objects are typically cons cells, closures, and records and are generally allocated in the heap and reclaimed later by some garbage collection process. This paper describes a compile time analysis, called escape analysis, for determining the lifetime of dynamically created objects in higher order functional programs, and describes optimizations that can be performed, based on the analysis, to improve storage allocation and reclamation of such objects. In particular, our analysis can be applied to programs manipulating lists, in which case optimizations can be performed to allow cons cells in spines of lists to be either reclaimed immediately or reused without incurring any garbage collection overhead. In a previous paper on escape analysis [10], we had left open the problem of performing escape analysis on lists. Escape analysis simply determines when the argument (or some part of the argument) to a function call is returned by that call. This simple piece of information turns out to be sufficiently powerful to allow stack allocation of objects, compile-time garbage collection, reduction of run-time storage reclamation overhead, and other optimizations that are possible when the lifetimes of objects can be computed statically. Our approach is to define a high-level non-standard semantics that, in many ways, is similar to the standard semantics and captures the escape behavior caused by the constructs in a functional language. The advantage of our analysis lies in its conceptual simplicity and portability (i.e. no assumption is made about an underlying abstract machine).</abstract></paper>
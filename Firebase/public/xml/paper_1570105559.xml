<paper id="1570105559"><title>Automatic Generation of Invariants</title><year>1999</year><authors><author org="VERIMAG, Centre Equation 2, avenue de Vignate, F-38610 Gières, France. Saddek.Bensalem@imag.fr#TAB#" id="85442675">Saddek Bensalem</author><author org="Institut für Informatik und Praktische Mathematik, Christian-Albrechts-Universität zu Kiel, Preußerstr, 1-9, D-24105 Kiel, Germany. yl@informatik.uni-kiel.de#TAB#" id="245516513">Yassine Lakhnech</author></authors><n_citation>54</n_citation><doc_type>Conference</doc_type><references><reference>1489122955</reference><reference>1540180001</reference><reference>1555814309</reference><reference>1593428110</reference><reference>1825148885</reference><reference>1964727056</reference><reference>1968482350</reference><reference>1973964525</reference><reference>2043100293</reference><reference>2045112813</reference><reference>2054554282</reference><reference>2066210260</reference><reference>2070908350</reference><reference>2075913776</reference><reference>2090398333</reference><reference>2111619838</reference><reference>2113486906</reference><reference>2125034120</reference><reference>2129664123</reference></references><venue id="1169806927" type="C">Formal Methods</venue><doi>10.1023/A:1008744030390</doi><keywords><keyword weight="0.47077">Tautology (logic)</keyword><keyword weight="0.49197">Invariant (physics)</keyword><keyword weight="0.46004">Computer science</keyword><keyword weight="0.0">Global system</keyword><keyword weight="0.52748">Assertion</keyword><keyword weight="0.47393">Theoretical computer science</keyword><keyword weight="0.51002">Invariant (mathematics)</keyword><keyword weight="0.42817">Predicate (grammar)</keyword></keywords><publisher>Kluwer Academic Publishers</publisher><abstract>When proving invariance properties of programs, one is faced with two problems. The first problem is related to the necessity of proving tautologies of the considered assertion language, whereas the second manifests itself in the need of finding sufficiently strong invariants. This paper focuses on the second problem and describes techniques for the automatic generation of invariants. The first set of these techniques is applicable to sequential transition systems and allows deriving so-called local invariants, i.e., predicates which are invariant at some control location. The second is applicable on networks of transition systems and allows combining local invariants of the sequential components to obtain local invariants of the global system.</abstract></paper>
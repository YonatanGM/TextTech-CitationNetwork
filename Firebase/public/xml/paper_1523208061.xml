<paper id="1523208061"><title>Knowledge Representation with Logic Programs</title><year>1997</year><authors><author org="Universität Leipzig" id="73842927">Gerhard Brewka</author><author org="UniversitÄt Koblenz-Landau" id="2095738856">Jürgen Dix</author></authors><n_citation>28</n_citation><doc_type /><references><reference>27697238</reference><reference>30202435</reference><reference>31286616</reference><reference>32456035</reference><reference>41096586</reference><reference>48425311</reference><reference>72396871</reference><reference>73864267</reference><reference>83671853</reference><reference>84120850</reference><reference>96077417</reference><reference>99071911</reference><reference>100060371</reference><reference>100882334</reference><reference>118616176</reference><reference>145174053</reference><reference>203630350</reference><reference>205822604</reference><reference>1482502297</reference><reference>1486205590</reference><reference>1489533044</reference><reference>1497936609</reference><reference>1501069411</reference><reference>1501348379</reference><reference>1502083504</reference><reference>1504169145</reference><reference>1505455772</reference><reference>1505787149</reference><reference>1518249528</reference><reference>1518971173</reference><reference>1522225310</reference><reference>1524811847</reference><reference>1526031460</reference><reference>1526885614</reference><reference>1534636739</reference><reference>1538563044</reference><reference>1543461272</reference><reference>1553202793</reference><reference>1553364858</reference><reference>1555669007</reference><reference>1564586270</reference><reference>1564814748</reference><reference>1569596742</reference><reference>1578088218</reference><reference>1579330263</reference><reference>1588274835</reference><reference>1589875904</reference><reference>1595745052</reference><reference>1596858679</reference><reference>1639901403</reference><reference>1648841277</reference><reference>1672891595</reference><reference>1706499668</reference><reference>1766332311</reference><reference>1784061619</reference><reference>1830798555</reference><reference>1847820984</reference><reference>1885514099</reference><reference>1889481706</reference><reference>1958716211</reference><reference>1962497992</reference><reference>1967115134</reference><reference>1967701834</reference><reference>1971492645</reference><reference>1973290773</reference><reference>1978108034</reference><reference>1979064340</reference><reference>1980131378</reference><reference>1980706206</reference><reference>1983424602</reference><reference>1984715534</reference><reference>1986999264</reference><reference>1987364064</reference><reference>1988852908</reference><reference>1990606699</reference><reference>1993979893</reference><reference>1995876561</reference><reference>1998093438</reference><reference>1998363560</reference><reference>2003531456</reference><reference>2007869407</reference><reference>2010160994</reference><reference>2011992362</reference><reference>2012217975</reference><reference>2013098708</reference><reference>2017956822</reference><reference>2023141722</reference><reference>2024971746</reference><reference>2025406423</reference><reference>2026433347</reference><reference>2026953979</reference><reference>2028245171</reference><reference>2034075659</reference><reference>2036191870</reference><reference>2036335871</reference><reference>2037474536</reference><reference>2038467301</reference><reference>2040019628</reference><reference>2043182143</reference><reference>2050486226</reference><reference>2050559123</reference><reference>2060470146</reference><reference>2065755686</reference><reference>2067590843</reference><reference>2068144010</reference><reference>2069972706</reference><reference>2070455216</reference><reference>2070598037</reference><reference>2072279582</reference><reference>2073247139</reference><reference>2074154477</reference><reference>2076754485</reference><reference>2078508369</reference><reference>2082945161</reference><reference>2083971779</reference><reference>2086010529</reference><reference>2090093170</reference><reference>2090798572</reference><reference>2091849010</reference><reference>2093089155</reference><reference>2097366413</reference><reference>2100657934</reference><reference>2101222558</reference><reference>2105486835</reference><reference>2108911687</reference><reference>2117895920</reference><reference>2118210775</reference><reference>2142386424</reference><reference>2146658047</reference><reference>2147860979</reference><reference>2152764793</reference><reference>2155322595</reference><reference>2167440926</reference><reference>2169146127</reference><reference>2399343913</reference><reference>2586770626</reference><reference>2604981200</reference><reference>2912282119</reference><reference>2913309218</reference><reference>2945259913</reference></references><venue id="" type="">LPKR '97 Selected papers from the Third International Workshop on Logic Programming and Knowledge Representation</venue><doi>10.1007/1-4020-3092-4_1</doi><keywords><keyword weight="0.0">Logic program</keyword><keyword weight="0.55616">Knowledge representation and reasoning</keyword><keyword weight="0.55087">Negation</keyword><keyword weight="0.46749">Theoretical computer science</keyword><keyword weight="0.5873">Prolog</keyword><keyword weight="0.57663">Non-monotonic logic</keyword><keyword weight="0.60879">Logic programming</keyword><keyword weight="0.49364">Semantics</keyword><keyword weight="0.41123">Mathematics</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>In this overview we show how Knowledge Representation (KR) can be done with the help of generalized logic programs. We start by introducing the core of PROLOG, which is based on definite logic programs. Although this class is very restricted (and will be enriched by various additional features in the rest of the paper), it has a very nice property for KR-tasks: there exist efficient Query-answering procedures -- a Top-Down approach and a Bottom-Up evaluation. In addition we can not only handle ground queries but also queries with variables and compute answer-substitutions. It turns out that more advanced KR-tasks can not be properly handled with definite programs. Therefore we extend this basic class of programs by additional features like Negation-as-Finite-Failure, Default-Negation, Explicit Negation, Preferences, and Disjunction. The need for these ex- tensions is motivated by suitable examples and the corresponding seman- tics are discussed in detail. Clearly, the more expressive the respective class of programs under a cer- tain semantics is, the less efficient are potential Query-answering meth- ods. This point will be illustrated and discussed for every extension. By well-known recursion-theoretic results, it is obvious that there do not exist complete Query-answering procedures for the general case where variables and function symbols are allowed. Nevertheless we consider it an important topic of further research to extract feasible classes of pro- grams where answer-substitutions can be computed.</abstract></paper>
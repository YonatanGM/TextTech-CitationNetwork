<paper id="1561021211"><title>Integrating Path and Timing Analysis Using Instruction-Level Simulation Techniques</title><year>1998</year><authors><author org="Chalmers University of Technology" id="2144945782">Thomas Lundqvist</author><author org="Chalmers University of Technology" id="2008392143">Per Stenstr√∂m</author></authors><n_citation>66</n_citation><doc_type>Conference</doc_type><references><reference>1557490801</reference><reference>1733564367</reference><reference>1913166775</reference><reference>1999421692</reference><reference>2013536114</reference><reference>2024800288</reference><reference>2097046319</reference><reference>2114178125</reference><reference>2117605807</reference><reference>2146218445</reference><reference>2147661183</reference><reference>2149052625</reference><reference>2154158220</reference><reference>2162222856</reference></references><venue id="1131672992" type="C">Languages, Compilers, and Tools for Embedded Systems</venue><doi>10.1007/BFb0057776</doi><keywords><keyword weight="0.41729">Pipeline transport</keyword><keyword weight="0.40056">Architecture</keyword><keyword weight="0.51906">Control flow graph</keyword><keyword weight="0.47169">Computer science</keyword><keyword weight="0.46884">Parallel computing</keyword><keyword weight="0.47039">Real-time computing</keyword><keyword weight="0.49215">Real-time operating system</keyword><keyword weight="0.58963">Static timing analysis</keyword><keyword weight="0.0">Execution time</keyword><keyword weight="0.0">Processor scheduling</keyword><keyword weight="0.41155">Hierarchy</keyword><keyword weight="0.47202">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Previously published methods for estimation of the worst-case execution time on contemporary processors with complex pipelines and multi-level memory hierarchies result in overestimations owing to insufficient path and/or timing analysis. This paper presents a new method that integrates path and timing analysis to address these limitations. First, it is based on instruction-level architecture simulation techniques and thus has a potential to perform arbitrarily detailed timing analysis of hardware platforms. Second, by extending the simulation technique with the capability of handling unknown input data values, it is possible to exclude infeasible (or false) program paths in many cases, and also calculate path information, such as bounds on number of loop iterations, without the need for annotating the programs. Finally, in order to keep the number of program paths to be analyzed at a manageable level, we have extended the simulator with a path-merging strategy. This paper presents the method and particularly evaluates its capability to exclude infeasible paths based on seven benchmark programs.</abstract></paper>
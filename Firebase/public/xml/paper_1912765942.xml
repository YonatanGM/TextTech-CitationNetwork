<paper id="1912765942"><title>Necessary and Sufficient Conditions For Collision-Free Hashing</title><year>1992</year><authors><author org="massachusetts institute of technology" id="2147225627">Alexander Russell</author></authors><n_citation>14</n_citation><doc_type>Conference</doc_type><references><reference>1493969756</reference><reference>1543075552</reference><reference>1567569629</reference><reference>1775939922</reference><reference>1972792640</reference><reference>2015826302</reference><reference>2074594718</reference><reference>2100008268</reference><reference>2107324709</reference><reference>2117362057</reference><reference>2151413173</reference><reference>2227130482</reference></references><venue id="1153524033" type="C">International Cryptology Conference</venue><doi>10.1007/3-540-48071-4_30</doi><keywords><keyword weight="0.69427">SHA-2</keyword><keyword weight="0.45102">Discrete mathematics</keyword><keyword weight="0.71229">Double hashing</keyword><keyword weight="0.42316">Computer science</keyword><keyword weight="0.72687">Collision resistance</keyword><keyword weight="0.44733">Algorithm</keyword><keyword weight="0.44211">Theoretical computer science</keyword><keyword weight="0.73719">Hash function</keyword><keyword weight="0.68279">K-independent hashing</keyword><keyword weight="0.70785">Security of cryptographic hash functions</keyword><keyword weight="0.68856">Hash chain</keyword><keyword weight="0.68067">Collision attack</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>This paper determines an exact relationship between collision-free hash functions and other cryptographic primitives. Namely, it introduces a new concept, the pseudo-permutation, and shows that the existence of collision-free hash functions is equivalent to the existence of claw-free pairs of pseudo-permutations. When considered as one bit contractors (functions from k + 1 bits to k bits), the collision-free hash functions constructed are more efficient than those proposed originally, requiring a single (claw-free) function evaluation rather than k.</abstract></paper>
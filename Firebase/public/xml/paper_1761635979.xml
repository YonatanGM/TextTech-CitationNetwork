<paper id="1761635979"><title>Model Checking of Safety Properties</title><year>1999</year><authors><author org="Hebrew University" id="312154185">Orna Kupferman</author><author org="Rice University" id="1970575723">Moshe Y. Vardi</author></authors><n_citation>195</n_citation><doc_type>Conference</doc_type><references><reference>42364276</reference><reference>1501731334</reference><reference>1512310098</reference><reference>1540180001</reference><reference>1551256212</reference><reference>1593428110</reference><reference>1595075780</reference><reference>1607782211</reference><reference>1921633840</reference><reference>1930640507</reference><reference>1968552123</reference><reference>1979520342</reference><reference>1984478483</reference><reference>1988808695</reference><reference>1990609140</reference><reference>2003227046</reference><reference>2007464118</reference><reference>2012935476</reference><reference>2024148935</reference><reference>2031592188</reference><reference>2033071128</reference><reference>2040127143</reference><reference>2059045337</reference><reference>2062458205</reference><reference>2076601401</reference><reference>2090398333</reference><reference>2090921231</reference><reference>2093916942</reference><reference>2099620341</reference><reference>2103475464</reference><reference>2104925315</reference><reference>2117189826</reference><reference>2129664123</reference><reference>2131064738</reference><reference>2144362636</reference><reference>2166656159</reference><reference>2169703983</reference><reference>2172190585</reference><reference>2248698362</reference><reference>2569361512</reference><reference>2914206182</reference></references><venue id="1162450063" type="C">Computer Aided Verification</venue><doi>10.1007/3-540-48683-6_17</doi><keywords><keyword weight="0.60503">Model checking</keyword><keyword weight="0.44987">Computer science</keyword><keyword weight="0.5022">Linear temporal logic</keyword><keyword weight="0.50766">Reachability</keyword><keyword weight="0.46603">Prefix</keyword><keyword weight="0.45565">Theoretical computer science</keyword><keyword weight="0.43379">Distributed computing</keyword><keyword weight="0.43369">Discrete mathematics</keyword><keyword weight="0.48776">Automaton</keyword><keyword weight="0.45132">Algorithm</keyword><keyword weight="0.49303">Formal specification</keyword><keyword weight="0.50204">State space</keyword><keyword weight="0.52209">Formal verification</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Of special interest in formal verification are safety properties, which assert that the system always stays within some allowed region.A computation that violates a general linear property reaches a bad cycle, which witnesses the violation of the property. Accordingly, current methods and tools for model checking of linear properties are based on a search for bad cycles. A symbolic implementation of such a search involves the calculation of a nested fixed-point expression over the systemu0027s state space, and is often very difficult. Every computation that violates a safety property has a finite prefix along which the property is violated. We use this fact in order to base model checking of safety properties on a search for finite bad prefixes. Such a search can be performed using a simple forward or backward symbolic reachability check. A naive methodology that is based on such a search involves a construction of an automaton (or a tableau) that is doubly exponential in the property.We present an analysis of safety properties that enables us to prevent the doubly-exponential blow up and to use the same automaton used for model checking of general properties, replacing the search for bad cycles by a search for bad prefixes.</abstract></paper>
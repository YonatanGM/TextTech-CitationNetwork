<paper id="1594085018"><title>Cosy Compiler Phase Embedding with the CoSy Compiler Model</title><year>1994</year><authors><author org="Universität des Saarlandes" id="2123828657">Martin Alt</author><author org="Universität Karlsruhe IPD" id="490822217">Uwe Aßmann</author><author org="ACE Associated Computer Experts bv" id="2708025576">Hans van Someren</author></authors><n_citation>37</n_citation><doc_type>Conference</doc_type><references><reference>1505765192</reference><reference>2002749185</reference><reference>2017381819</reference><reference>2023095526</reference><reference>2058866239</reference><reference>2091302783</reference><reference>2118252041</reference><reference>2118866757</reference></references><venue id="1162239172" type="C">Compiler Construction</venue><doi>10.1007/3-540-57877-3_19</doi><keywords><keyword weight="0.62539">Inline expansion</keyword><keyword weight="0.63221">Interprocedural optimization</keyword><keyword weight="0.69249">Functional compiler</keyword><keyword weight="0.46008">Programming language</keyword><keyword weight="0.43466">Computer science</keyword><keyword weight="0.45256">Parallel computing</keyword><keyword weight="0.69793">Compiler correctness</keyword><keyword weight="0.60208">Bootstrapping (compilers)</keyword><keyword weight="0.63919">Optimizing compiler</keyword><keyword weight="0.66661">Compiler</keyword><keyword weight="0.70465">Compiler construction</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>In this article we introduce a novel model for compilation and compiler construction, the CoSY(COmpiler SYstem) model. CoSy provides a framework for flexible combination and embedding of compiler phases — called engines in the sequel — such that the construction of parallel and (inter-procedural) optimizing compilers is facilitated. In CoSy a compiler writer may program some phase in a target language and embed it transparently — without source code changes — into different compiler contexts, such as with alternative phase order, speculative evaluation, parallel evaluation, and generate-and-test evaluation. Compilers constructed with CoSy can be tuned for different host systems (the system the compiler runs on, not the system it produces code for) and are transparently scalable for (shared memory) multiprocessor host configurations.</abstract></paper>
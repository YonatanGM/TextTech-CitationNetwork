<paper id="1517761527"><title>Generating efficient code from data-flow programs</title><year>1991</year><authors><author org="IMAG - LGI (U.A. CNRS 398)" id="2257050880">Nicolas Halbwachs</author><author org="IMAG - LGI (U.A. CNRS 398)" id="2127406978">Pascal Raymond</author><author org="Merlin Gerin - SES" id="1975423539">Christophe Ratel</author></authors><n_citation>84</n_citation><doc_type>Conference</doc_type><references><reference>1491178396</reference><reference>1517157359</reference><reference>1597755753</reference><reference>1663179985</reference><reference>1973642705</reference><reference>2062182248</reference><reference>2066929280</reference><reference>2068361557</reference><reference>2080267935</reference><reference>2081938726</reference><reference>2092860912</reference><reference>2156429182</reference></references><venue id="2754504537" type="C">International Symposium on Programming Language Implementation and Logic Programming</venue><doi>10.1007/3-540-54444-5_100</doi><keywords><keyword weight="0.47615">Programming language</keyword><keyword weight="0.4658">Computer science</keyword><keyword weight="0.47008">Parallel computing</keyword><keyword weight="0.51329">Lustre (mineralogy)</keyword><keyword weight="0.56936">Boolean data type</keyword><keyword weight="0.51863">Data flow diagram</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>This paper presents the techniques applied in compiling the synchronous data-flow language Lustre. The most original technique consists in synthesising an efficient control structure, by simulating the behavior of boolean variables at compile-time. Here, the techniques are explained on a small subset of Lustre.</abstract></paper>
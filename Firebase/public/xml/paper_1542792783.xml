<paper id="1542792783"><title>Modular Semantics and Logics of Classes</title><year>2003</year><authors><author org="University Of Sussex;" id="2163053218">Bernhard Reus</author></authors><n_citation>14</n_citation><doc_type>Conference</doc_type><references><reference>1483157468</reference><reference>1489088018</reference><reference>1495368328</reference><reference>1544633123</reference><reference>1561804611</reference><reference>1583769822</reference><reference>1679875858</reference><reference>1822389052</reference><reference>1918806322</reference><reference>2027723207</reference><reference>2097185397</reference><reference>2166870727</reference><reference>2808195962</reference></references><venue id="1165958984" type="C">Computer Science Logic</venue><doi>10.1007/978-3-540-45220-1_37</doi><keywords><keyword weight="0.40789">Closure (computer programming)</keyword><keyword weight="0.44819">Programming language</keyword><keyword weight="0.43491">Computer science</keyword><keyword weight="0.4446">Theoretical computer science</keyword><keyword weight="0.55186">Soundness</keyword><keyword weight="0.43757">Modular design</keyword><keyword weight="0.49627">Semantics</keyword><keyword weight="0.41004">Distributed computing</keyword></keywords><publisher>Springer Berlin / Heidelberg</publisher><abstract>The semantics of class-based languages can be defined in terms of objects only [1,7,8] if classes are viewed as objects with a constructor method. One obtains a store in which method closures are held together with field values. Such a store is also called “higher-order” and does not come for free [13]. It is much harder to prove properties of such stores and as a consequence (soundness of) programming logics can become rather contrived (see [2]).</abstract></paper>
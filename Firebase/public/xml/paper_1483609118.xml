<paper id="1483609118"><title>Aspect-Oriented Modeling: Bridging the Gap between Implementation and Design</title><year>2002</year><authors><author org="Illinois Institute of Technology;" id="2018572496">Tzilla Elrad</author><author org="Lucent Technologies'" id="2019122165">Omar Aldawud</author><author org="Lucent Technologies'" id="2105348898">Atef Bader</author></authors><n_citation>68</n_citation><doc_type>Conference</doc_type><references><reference>1490977361</reference><reference>1504342344</reference><reference>1610570299</reference><reference>1990991680</reference><reference>2016238341</reference><reference>2031334538</reference><reference>2099529102</reference><reference>2130521512</reference><reference>2139453480</reference><reference>2152673227</reference></references><venue id="1121553062" type="C">Generative Programming and Component Engineering</venue><doi>10.1007/3-540-45821-2_12</doi><keywords><keyword weight="0.4652">Weaving</keyword><keyword weight="0.45734">Programming language</keyword><keyword weight="0.52543">Object-oriented programming</keyword><keyword weight="0.57323">Aspect-oriented programming</keyword><keyword weight="0.5169">Unified Modeling Language</keyword><keyword weight="0.46132">Computer science</keyword><keyword weight="0.64553">Separation of concerns</keyword><keyword weight="0.59078">Code reuse</keyword><keyword weight="0.55558">Software development</keyword><keyword weight="0.51456">Reusability</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Separation of Concerns is one of the software engineering design principles that is getting more attention from practitioners and researchers in order to promote design and code reuse. Separation of Concerns (SoC) separates requirements such as synchronization and scheduling from the core functionality. These requirements are often referred to as crosscutting-concerns. The implementation of such requirements is scattered throughout the system, which results in the code-tangling problem. Aspect Oriented Programming provides the user with the ability to modularize, and weave crosscutting-concerns in order to maximize code reusability and solves the code-tangling problem. Weaving is the process of combining crosscutting concerns with the core functionality. Using the UML to model and interweave these concerns is a craft that is hard to master due to the lack of formal modeling techniques based on SoC. In this paper we present a formal design methodology to model the systemu0027s concerns based on aspect-orientation.</abstract></paper>
<paper id="1507045691"><title>Can you Trust your Data</title><year>1995</year><authors><author org="BRICS" id="2974749336">Peter Ørbæk</author></authors><n_citation>9</n_citation><doc_type>Conference</doc_type><references><reference>1519142519</reference><reference>2043100293</reference><reference>2094873755</reference><reference>2102389857</reference><reference>2129278597</reference><reference>2390351023</reference></references><venue id="2756386172" type="C">Colloquium on trees in Algebra and Programming</venue><doi>10.1007/3-540-59293-8_221</doi><keywords><keyword weight="0.53554">Pointer (computer programming)</keyword><keyword weight="0.0">Constraint generation</keyword><keyword weight="0.4749">Programming language</keyword><keyword weight="0.61049">Compile time</keyword><keyword weight="0.59529">Abstract interpretation</keyword><keyword weight="0.47355">Computer science</keyword><keyword weight="0.46964">Theoretical computer science</keyword><keyword weight="0.44683">Aliasing</keyword><keyword weight="0.54917">Program analysis</keyword><keyword weight="0.52065">Semantics</keyword><keyword weight="0.51542">Structural induction</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>A new program analysis is presented, and two compile time methods for this analysis are given. The analysis attempts to answer the question: “Given some trustworthy and some untrustworthy input, can we trust the value of a given variable after execution of some code”. The analyses are based on an abstract interpretation framework and a constraint generation framework respectively. The analyses are proved safe with respect to an instrumented semantics. We explicitly deal with a language with pointers and possible aliasing problems. The constraint based analysis is related directly to the abstract interpretation and therefore indirectly to the instrumented semantics.</abstract></paper>
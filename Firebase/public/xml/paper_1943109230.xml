<paper id="1943109230"><title>Real-Time Scheduling on Multicore Platforms</title><year>2006</year><authors><author org="The University of North Carolina at Chapel Hill**" id="2113290946">J.H. Anderson</author><author org="The University of North Carolina at Chapel Hill**" id="2305062547">J.M. Calandrino</author><author org="The University of North Carolina at Chapel Hill**" id="2305525489">U.C. Devi</author></authors><n_citation>133</n_citation><doc_type>Conference</doc_type><references><reference>1523347486</reference><reference>1628974215</reference><reference>1805570991</reference><reference>1855098165</reference><reference>2005533555</reference><reference>2015495501</reference><reference>2035287562</reference><reference>2045533045</reference><reference>2056830486</reference><reference>2069733180</reference><reference>2085830671</reference><reference>2112067212</reference><reference>2112686638</reference><reference>2123791481</reference><reference>2129816520</reference><reference>2141389846</reference><reference>2144954274</reference><reference>2164459948</reference><reference>2170994858</reference><reference>2397616328</reference></references><venue id="1190910256" type="C">Real Time Technology and Applications Symposium</venue><doi>10.1109/RTAS.2006.35</doi><keywords><keyword weight="0.47234">Computer architecture</keyword><keyword weight="0.64466">Fair-share scheduling</keyword><keyword weight="0.4499">Computer science</keyword><keyword weight="0.55302">Scheduling (computing)</keyword><keyword weight="0.46978">Chip</keyword><keyword weight="0.51108">Thread (computing)</keyword><keyword weight="0.45909">Real-time computing</keyword><keyword weight="0.62931">Two-level scheduling</keyword><keyword weight="0.48176">Software</keyword><keyword weight="0.57482">Multi-core processor</keyword></keywords><publisher>IEEE</publisher><abstract>Multicore architectures, which have multiple processing units on a single chip, are widely viewed as a way to achieve higher processor performance, given that thermal and power problems impose limits on the performance of single-core designs. Accordingly, several chip manufacturers have already released, or will soon release, chips with dual cores, and it is predicted that chips with up to 32 cores will be available within a decade. To effectively use the available processing resources on multicore platforms, software designs should avoid co-executing applications or threads that can worsen the performance of shared caches, if not thrash them. While cache-aware scheduling techniques for such platforms have been proposed for throughput-oriented applications, to the best of our knowledge, no such work has targeted real-time applications. In this paper, we propose and evaluate a cache-aware Pfair-based scheduling scheme for real-time tasks on multicore platforms</abstract></paper>
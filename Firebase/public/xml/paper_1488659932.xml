<paper id="1488659932"><title>You Assume, We Guarantee: Methodology and Case Studies</title><year>1998</year><authors><author org="University of California" id="2707196735">Thomas A. Henzinger</author><author org="University of California" id="1985363956">Shaz Qadeer</author><author org="University of California" id="2083764764">Sriram K. Rajamani</author></authors><n_citation>205</n_citation><doc_type>Conference</doc_type><references><reference>1500286044</reference><reference>1515542122</reference><reference>1534067655</reference><reference>1596365597</reference><reference>1597238128</reference><reference>2000302396</reference><reference>2009965218</reference><reference>2086070079</reference><reference>2110648791</reference><reference>2114092850</reference><reference>2132107743</reference><reference>2137467159</reference><reference>2296232480</reference><reference>2328819335</reference><reference>2912904668</reference></references><venue id="1162450063" type="C">Computer Aided Verification</venue><doi>10.1007/BFb0028765</doi><keywords><keyword weight="0.55781">Functional verification</keyword><keyword weight="0.43378">Abstraction</keyword><keyword weight="0.4721">Computer science</keyword><keyword weight="0.42905">External variable</keyword><keyword weight="0.46172">Systems design</keyword><keyword weight="0.42519">Algorithm</keyword><keyword weight="0.43017">Witness</keyword><keyword weight="0.41162">Homomorphism</keyword><keyword weight="0.48237">Reactive system</keyword><keyword weight="0.5355">Formal verification</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>Assume-guarantee reasoning has long been advertised as an important method for decomposing proof obligations in system verification. Refinement mappings (homomorphisms) have long been advertised as an important method for solving the language-inclusion problem in practice. When confronted with large verification problems, we therefore attempted to make use of both techniques. We soon found that rather than offering instant solutions, the success of assume-guarantee reasoning depends critically on the construction of suitable abstraction modules, and the success of refinement checking depends critically on the construction of suitable witness modules. Moreover, as abstractions need to be witnessed, and witnesses abstracted, the process must be iterated. We present here the main lessons we learned from our experiments, in limn of a systematic and structured discipline for the compositional verification of reactive modules. An infrastructure to support this discipline, and automate parts of the verification, has been implemented in the tool Mocha.</abstract></paper>
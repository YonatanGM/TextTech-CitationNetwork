<paper id="5325007"><title>Automatic Generation of Invariants in Processor Verification</title><year>1996</year><authors><author org="Stanford, University" id="2282292031">Jeffrey X. Su</author><author org="Stanford, University" id="2148325455">David L. Dill</author><author org="Stanford, University" id="2136212275">Clark W. Barrett</author></authors><n_citation>23</n_citation><doc_type>Conference</doc_type><references><reference>23915378</reference><reference>1540180001</reference><reference>1555915743</reference><reference>1556247398</reference><reference>1741528175</reference><reference>1929502661</reference><reference>2047932652</reference><reference>2095572512</reference><reference>2107503612</reference><reference>2129664123</reference><reference>2164778826</reference></references><venue id="1166230065" type="C">Formal Methods in Computer-Aided Design</venue><doi>10.1007/BFb0031822</doi><keywords><keyword weight="0.4623">Computer science</keyword><keyword weight="0.47939">CPU cache</keyword><keyword weight="0.46461">Theoretical computer science</keyword><keyword weight="0.45389">Invariant (mathematics)</keyword><keyword weight="0.5786">Formal verification</keyword></keywords><publisher>Springer Verlag</publisher><abstract>A central task in formal verification is the definition of invariants, which characterize the reachable states of the system. When a system is finitestate, invariants can be discovered automatically.</abstract></paper>
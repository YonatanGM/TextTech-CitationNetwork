<paper id="1605152326"><title>The Value Flow Graph: A Program Representation for Optimal Program Transformations</title><year>1990</year><authors><author org="University of Aarhus," id="2063423718">Bernhard Steffen</author><author org="Christian-Albrechts-Universität" id="2273773887">Jens Knoop</author><author org="Christian-Albrechts-Universität" id="2947491482">Oliver Rüthing</author></authors><n_citation>59</n_citation><doc_type>Conference</doc_type><references><reference>1816611236</reference><reference>1968787980</reference><reference>2007558402</reference><reference>2010452422</reference><reference>2020889342</reference><reference>2025554746</reference><reference>2087086761</reference><reference>2118866757</reference><reference>2124153277</reference></references><venue id="1136861413" type="C">European Symposium on Programming</venue><doi>10.1007/3-540-52592-0_76</doi><keywords><keyword weight="0.5223">Global value numbering</keyword><keyword weight="0.46858">Programming language</keyword><keyword weight="0.54758">Control flow graph</keyword><keyword weight="0.46149">Computer science</keyword><keyword weight="0.53632">Imperative programming</keyword><keyword weight="0.55835">Data-flow analysis</keyword><keyword weight="0.53235">Partial redundancy elimination</keyword><keyword weight="0.47947">Theoretical computer science</keyword><keyword weight="0.65953">Semantic equivalence</keyword><keyword weight="0.5868">Control flow analysis</keyword><keyword weight="0.54502">Herbrand interpretation</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Data flow analysis algorithms for imperative programming languages can be split into two groups: first, into the semantic algorithms that determine semantic equivalence between terms, and second, into the syntactic algorithms that compute complex program properties based on syntactic term identity, which support powerful optimization techniques like for example partial redundancy elimination. Value Flow Graphs represent semantic equivalence of terms syntactically. This allows us to feed the knowledge of semantic equivalence into syntactic algorithms. The power of this technique, which leads to modularly extendable algorithms, is demonstrated by developing a two stage algorithm for the optimal placement of computations within a program wrt the Herbrand interpretation.</abstract></paper>
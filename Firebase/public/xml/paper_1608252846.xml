<paper id="1608252846"><title>Microprocessor specification in Hawk</title><year>1998</year><authors><author org="" id="2118105456">J. Matthews</author><author org="" id="2147782704">B. Cook</author><author org="" id="343041661">J. Launchbury</author></authors><n_citation>83</n_citation><doc_type>Conference</doc_type><references><reference>1493191709</reference><reference>1576997872</reference><reference>1966981171</reference><reference>2011889923</reference></references><venue id="1140657324" type="C">International Conference on Computational Logistics</venue><doi>10.1109/ICCL.1998.674160</doi><keywords><keyword weight="0.55497">Domain-specific language</keyword><keyword weight="0.47954">Programming language</keyword><keyword weight="0.47103">Computer science</keyword><keyword weight="0.5392">Parametric polymorphism</keyword><keyword weight="0.56696">Lazy evaluation</keyword><keyword weight="0.57573">Register renaming</keyword><keyword weight="0.58108">Haskell</keyword><keyword weight="0.55557">Out-of-order execution</keyword><keyword weight="0.55856">Reservation station</keyword><keyword weight="0.54979">Hardware description language</keyword></keywords><publisher>IEEE Computer Society</publisher><abstract>Modern microprocessors require an immense investment of time and effort to create and verify, from the high level architectural design downwards. We are exploring ways to increase the productivity of design engineers by creating a domain specific language for specifying and simulating processor architectures. We believe that the structuring principles used in modern functional programming languages, such as static typing, parametric polymorphism, first class functions, and lazy evaluation provide a good formalism for such a domain specific language, and have made initial progress by creating a library on top of the functional language Haskell. We have specified the integer subset of an out of order, superscalar DLX microprocessor, with register renaming, a reorder buffer, a global reservation station, multiple execution units, and speculative branch execution. Two key abstractions of this library are the signal abstract data type (ADT), which models the simulation history of a wire, and the transaction ADT, which models the state of an entire instruction as it travels through the microprocessor.</abstract></paper>
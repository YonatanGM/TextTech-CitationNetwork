<paper id="1555697857"><title>Multi-Stage Programming: Axiomatization and Type Safety</title><year>1998</year><authors><author org="Oregon Graduate Institute" id="2663121153">Walid Taha</author><author org="Oregon Graduate Institute" id="2051360977">Zine-El-Abidine Benaissa</author><author org="Oregon Graduate Institute" id="2109390351">Tim Sheard</author></authors><n_citation>47</n_citation><doc_type>Conference</doc_type><references><reference>1555037657</reference><reference>1980939032</reference><reference>1983574485</reference><reference>1988177568</reference><reference>2074674709</reference><reference>2096314727</reference></references><venue id="1141821850" type="C">International Colloquium on Automata, Languages and Programming</venue><doi>10.1007/BFb0055113</doi><keywords><keyword weight="0.6256">Formal semantics (linguistics)</keyword><keyword weight="0.73431">Operational semantics</keyword><keyword weight="0.46686">Programming language</keyword><keyword weight="0.68751">Axiomatic semantics</keyword><keyword weight="0.45938">Computer science</keyword><keyword weight="0.64795">Computational semantics</keyword><keyword weight="0.63627">Action semantics</keyword><keyword weight="0.68812">Denotational semantics</keyword><keyword weight="0.63516">Type erasure</keyword><keyword weight="0.67578">Well-founded semantics</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Multi-staged programming provides a new paradigm for constructing efficient solutions to complex problems. Techniques such as program generation, multi-level partial evaluation, and run-time code generation respond to the need for general purpose solutions which do not pay run-time interpretive overheads. This paper provides a foundation for the formal analysis of one such system. We introduce a multi-stage language and present its axiomatic, reduction, and natural semantics. Our axiomatic semantics is an extension of the call-by-value $\lambda$-calculus with staging constructs. We demonstrate the soundness of the axiomatic semantics with respect to the natural semantics. We show that staged-languages can ``go Wrongu0027u0027u0027u0027 in new ways, and devise a type system that screens out such programs. Finally, we present a proof of the soundness of this type system with respect to the reduction semantics, and show how to extend this result to the natural semantics.</abstract></paper>
<paper id="1480779880"><title>Stack size analysis for interrupt-driven programs</title><year>2003</year><authors><author org="&quot;University of California, Berkeley&quot;" id="2165611184">Krishnendu Chatterjee</author><author org="Purdue University" id="2307823297">Di Ma</author><author org="&quot;University of California, Berkeley&quot;" id="2156286033">Rupak Majumdar</author><author org="University of Wisconsin Milwaukee#TAB#" id="2600955108">Tian Zhao</author><author org="&quot;University of California, Berkeley&quot;" id="2707196735">Thomas A. Henzinger</author><author org="Purdue University" id="5014031">Jens Palsberg</author></authors><n_citation>32</n_citation><doc_type>Conference</doc_type><references><reference>1500975741</reference><reference>1546496162</reference><reference>1583904488</reference><reference>2009098458</reference><reference>2030166143</reference><reference>2035216234</reference><reference>2080573945</reference><reference>2093454413</reference><reference>2171496589</reference><reference>2770491639</reference></references><venue id="1137552346" type="C">Static Analysis Symposium</venue><doi>10.1007/3-540-44898-5_7</doi><keywords><keyword weight="0.62553">Interrupt</keyword><keyword weight="0.42238">Crash</keyword><keyword weight="0.43447">Computer science</keyword><keyword weight="0.65769">Call stack</keyword><keyword weight="0.64843">Stack trace</keyword><keyword weight="0.42914">Real-time computing</keyword><keyword weight="0.42819">Turing machine</keyword><keyword weight="0.47039">Program analysis</keyword><keyword weight="0.46272">Time complexity</keyword><keyword weight="0.43906">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We study the problem of determining stack boundedness and the exact maximum stack size for three classes of interrupt-driven programs. Interrupt-driven programs are used in many real-time applications that require responsive interrupt handling. In order to ensure responsiveness, programmers often enable interrupt processing in the body of lower-priority interrupt handlers. In such programs a programming error can allow interrupt handlers to be interrupted in cyclic fashion to lead to an unbounded stack, causing the system to crash. For a restricted class of interrupt-driven programs, we show that there is a polynomial-time procedure to check stack boundedness, while determining the exact maximum stack size is PSPACE-complete. For a larger class of programs, the two problems are both PSPACE-complete, and for the largest class of programs we consider, the two problems are PSPACE-hard and can be solved in exponential time.</abstract></paper>
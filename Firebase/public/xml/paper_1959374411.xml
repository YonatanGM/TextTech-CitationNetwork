<paper id="1959374411"><title>Constructive mathematics as a programming logic I: some principles of theory</title><year>1985</year><authors><author org="Cornell University, Ithaca -- NY" id="2059506051">Robert L. Constable</author></authors><n_citation>29</n_citation><doc_type>Journal</doc_type><references><reference>2078079279</reference><reference>2093541252</reference><reference>2124212956</reference></references><venue id="68263103" type="J">North-holland Mathematics Studies</venue><doi>10.1016/S0304-0208(08)73073-1</doi><keywords><keyword weight="0.61756">Functional logic programming</keyword><keyword weight="0.37366">Combinatorics</keyword><keyword weight="0.41629">Function space</keyword><keyword weight="0.57146">Programming paradigm</keyword><keyword weight="0.48287">Constructivism (mathematics)</keyword><keyword weight="0.3616">Mathematical analysis</keyword><keyword weight="0.51267">Combinatory logic</keyword><keyword weight="0.6161">Inductive programming</keyword><keyword weight="0.53594">Type theory</keyword><keyword weight="0.59467">Logic programming</keyword><keyword weight="0.38579">Mathematics</keyword></keywords><publisher>Elsevier North-Holland, Inc.</publisher><abstract>The design of a programming system is guided by certain beliefs, principles and practical constraints. These considerations are not always manifest from the rules defining the system. In this paper the author discusses some of the principles which have guided the design of the programming logics built at Cornell in the last decade. Most of the necessarily brief discussion concerns type theory with stress on the concepts of function space and quotient types.</abstract></paper>
<paper id="1980647766"><title>An algorithm for optimal lambda calculus reduction</title><year>1989</year><authors><author org="Xerox-PARC" id="1763576553">John Lamping</author></authors><n_citation>224</n_citation><doc_type>Conference</doc_type><references><reference>2010642618</reference><reference>2063068243</reference><reference>2168847106</reference></references><venue id="1160032607" type="C">Symposium on Principles of Programming Languages</venue><doi>10.1145/96709.96711</doi><keywords><keyword weight="0.59134">Deductive lambda calculus</keyword><keyword weight="0.44351">Programming language</keyword><keyword weight="0.6198">Simply typed lambda calculus</keyword><keyword weight="0.62068">Typed lambda calculus</keyword><keyword weight="0.43663">Computer science</keyword><keyword weight="0.61373">Fixed-point combinator</keyword><keyword weight="0.61514">System F</keyword><keyword weight="0.46486">Algorithm</keyword><keyword weight="0.63256">Church encoding</keyword><keyword weight="0.63533">Lambda lifting</keyword><keyword weight="0.57927">Beta normal form</keyword></keywords><publisher>ACM</publisher><abstract>We present an algorithm for lambda expression reduction that avoids any copying that could later cause duplication of work. It is optimal in the sense defined by Levy. The basis of the algorithm is a graphical representation of the kinds of commonality that can arise from substitutions; the idea can be adapted to represent other kinds of expressions besides lambda expressions. The algorithm is also well suited to parallel implementations, consisting of a fixed set of local graph rewrite rules.</abstract></paper>
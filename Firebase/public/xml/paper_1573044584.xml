<paper id="1573044584"><title>Object Invariants in Dynamic Contexts</title><year>2004</year><authors><author org="Microsoft Research,#TAB#" id="710865586">K. Rustan M. Leino</author><author org="ETH Zürich" id="2285904575">Peter Müller</author></authors><n_citation>201</n_citation><doc_type>Conference</doc_type><references><reference>1489778371</reference><reference>1555946950</reference><reference>1583095677</reference><reference>1583826417</reference><reference>1593874741</reference><reference>1783929070</reference><reference>1993836075</reference><reference>1995008247</reference><reference>2013368693</reference><reference>2052087935</reference><reference>2073407646</reference><reference>2094160561</reference><reference>2101928793</reference><reference>2103318645</reference><reference>2107995193</reference><reference>2135868037</reference><reference>2136371406</reference><reference>2142837069</reference><reference>2151131364</reference><reference>2151191515</reference><reference>2156428492</reference><reference>2160456755</reference><reference>2161825580</reference><reference>2295471304</reference><reference>2592015105</reference></references><venue id="1177184315" type="C">European Conference on Object-Oriented Programming</venue><doi>10.1007/978-3-540-24851-4_22</doi><keywords><keyword weight="0.62472">Object-oriented design</keyword><keyword weight="0.4955">Data structure</keyword><keyword weight="0.45062">Programming language</keyword><keyword weight="0.54766">Object-oriented programming</keyword><keyword weight="0.61282">Method</keyword><keyword weight="0.44545">Computer science</keyword><keyword weight="0.48527">Correctness</keyword><keyword weight="0.61575">Object model</keyword><keyword weight="0.45567">Theoretical computer science</keyword><keyword weight="0.50841">Invariant (mathematics)</keyword><keyword weight="0.45634">Software development</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Object invariants describe the consistency of object-oriented data structures and are central to reasoning about the correctness of object-oriented software. Yet, reasoning about object invariants in the presence of object references, methods, and subclassing is difficult. This paper describes a methodology for specifying and verifying object-oriented programs, using object invariants to specify the consistency of data and using ownership to organize objects into contexts. The novelty is that contexts can be dynamic: there is no bound on the number of objects in a context and objects can be transferred between contexts. The invariant of an object is allowed to depend on the fields of the object, on the fields of all objects in transitively-owned contexts, and on fields of objects reachable via given sequences of fields. With these invariants, one can describe a large variety of properties, including properties of cyclic data structures. Object invariants can be declared in or near the classes whose fields they depend on, not necessarily in the class of an owning object. The methodology is designed to allow modular reasoning, even in the presence of subclasses, and is proved sound.</abstract></paper>
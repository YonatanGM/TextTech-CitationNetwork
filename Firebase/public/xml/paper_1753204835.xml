<paper id="1753204835"><title>An Environment for Designing Exceptions in Workflows</title><year>1998</year><authors><author org="Politecnico di Milano, Milano - Italy#TAB#" id="2811252523">Fabio Casati</author><author org="Politecnico di Milano, Milano - Italy#TAB#" id="11395355">Maria Grazia Fugini</author><author org="Politecnico di Milano, Milano - Italy#TAB#" id="2804591909">Isabelle Mirbel</author></authors><n_citation>2</n_citation><doc_type>Conference</doc_type><references><reference>81995812</reference><reference>1529543011</reference><reference>1550995397</reference><reference>1555797260</reference><reference>2010053008</reference><reference>2015234709</reference><reference>2016316023</reference><reference>2052982904</reference><reference>2088024675</reference><reference>2156596449</reference><reference>2170551989</reference><reference>2294861651</reference></references><venue id="1134069326" type="C">Conference on Advanced Information Systems Engineering</venue><doi>10.1007/BFb0054223</doi><keywords><keyword weight="0.43587">Information system</keyword><keyword weight="0.42578">Data mining</keyword><keyword weight="0.43889">Information management</keyword><keyword weight="0.44594">Computer science</keyword><keyword weight="0.44218">Reuse</keyword><keyword weight="0.4418">Knowledge engineering</keyword><keyword weight="0.47591">Schema (psychology)</keyword><keyword weight="0.51053">Active database</keyword><keyword weight="0.48814">Workflow</keyword><keyword weight="0.44159">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>When designing a WorkFlow schema, often exceptional situations, such as abnormal termination or suspension of task execution, have to be dealt with by the designer explicitly, as well as operations which typically occur at the beginning and termination of tasks. This paper shows how the designer can be supported by tools allowing him to capture exceptional behavior within a WF schema by reusing an available set of pre-configured exceptions skeletons. Exceptions are expressed by means of triggers, to be executed on the top of an active database environment; triggers can autonomously treat exceptional events or typical start/termination situations arising in a WF. In particular, the paper deals with the treatment of typical WF exceptional situations which are modeled as general exception skeletons to be included in a new WF schema by simply specializing or instantiating them. Such skeletons, called patterns, are stored in a catalog; the paper describes the catalog structure and its management tools constituting an integrated environment for pattern-based exception design and reuse.</abstract></paper>
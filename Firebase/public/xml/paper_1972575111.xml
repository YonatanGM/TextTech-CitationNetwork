<paper id="1972575111"><title>Subject-oriented design: towards improved alignment of requirements, design, and code</title><year>1999</year><authors><author org="School of Computer Applications, Dublin City University, Dublin 9, Republic of Ireland" id="2104749128">Siobhán Clarke</author><author org="IBM T.J. Watson Research Center, P.O. Box 704, Yorktown Heights, NY" id="2154477604">William Harrison</author><author org="IBM T.J. Watson Research Center, P.O. Box 704, Yorktown Heights, NY" id="2030408828">Harold Ossher</author><author org="IBM T.J. Watson Research Center, P.O. Box 704, Yorktown Heights, NY" id="2109851473">Peri Tarr</author></authors><n_citation>142</n_citation><doc_type>Conference</doc_type><references><reference>1492042465</reference><reference>1511610110</reference><reference>1988995583</reference><reference>1991604845</reference><reference>2031527423</reference><reference>2032415879</reference><reference>2086970510</reference><reference>2088520036</reference><reference>2094282293</reference><reference>2097442212</reference><reference>2114152285</reference><reference>2114696172</reference><reference>2134119432</reference><reference>2138363365</reference><reference>2139907081</reference><reference>2159765281</reference></references><venue id="1138732554" type="C">Conference on Object-Oriented Programming Systems, Languages, and Applications</venue><doi>10.1145/320384.320420</doi><keywords><keyword weight="0.55673">Object-oriented design</keyword><keyword weight="0.44712">Programming language</keyword><keyword weight="0.57832">Software design</keyword><keyword weight="0.45801">Computer science</keyword><keyword weight="0.58916">Systems design</keyword><keyword weight="0.58805">Requirements analysis</keyword><keyword weight="0.58172">Requirement</keyword><keyword weight="0.5867">Software requirements specification</keyword><keyword weight="0.59259">IDEF4</keyword><keyword weight="0.46359">Reliability engineering</keyword><keyword weight="0.56151">Software requirements</keyword></keywords><publisher>ACM</publisher><abstract>In practice, object-oriented design models have been less useful throughout the lifetime of software systems than they should be. Design models are often large and monolithic, and the structure of the designs is generally quite different from that of requirements. As a result, developers tend to discard the design, especially as the system evolves, since it is too difficult to keep its relationship to requirements and code accurate, especially when both are changing. This paper presents a different approach to designing systems, based on flexible decomposition and composition, that closely aligns designs with both requirements specifications and with code. We illustrate how this approach permits the benefits of designs to be maintained throughout a system’s lifetime.</abstract></paper>
<paper id="1483912892"><title>Metrics of Refactoring-based Development: An Experience Report</title><year>2001</year><authors><author org="University of Alberta" id="289916785">Eleni Stroulia</author><author org="University of Alberta" id="2490595043">Rohit Kapoor</author></authors><n_citation>32</n_citation><doc_type /><references><reference>1570222067</reference><reference>1935843737</reference><reference>2151563464</reference><reference>2153887189</reference><reference>2159682002</reference></references><venue id="" type="">OOIS</venue><doi>10.1007/978-1-4471-0719-4_13</doi><keywords><keyword weight="0.47665">Software engineering</keyword><keyword weight="0.46224">Systems engineering</keyword><keyword weight="0.56059">Systems design</keyword><keyword weight="0.5141">Software</keyword><keyword weight="0.58097">Software metric</keyword><keyword weight="0.40906">Engineering</keyword><keyword weight="0.6825">Software requirements specification</keyword><keyword weight="0.64679">Code refactoring</keyword><keyword weight="0.56753">Extensibility</keyword><keyword weight="0.47346">Preventive maintenance</keyword><keyword weight="0.0">Design activities</keyword></keywords><publisher>Springer, London</publisher><abstract>Following a refactorings-based software life-cycle, the nature of the requirements specification and design activities changes drastically. Instead of aiming at identifying the complete set of long-term requirements for the system and designing it in a way that all such foreseen requirements may be accomplished, the system is developed in small increments. To address the system design shortcomings in terms of extensibility, the system is regularly refactored. In this paper, we discuss our experiences with a system, that followed a refactorings-based development and reflect on the trends we have noticed in this project.</abstract></paper>
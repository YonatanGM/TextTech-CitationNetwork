<paper id="1603163314"><title>An efficient verification method for parallel and distributed programs</title><year>1988</year><authors><author org="Department of Computer Science, Technion#TAB#" id="2170306587">Shmuel Katz</author><author org="Department of Computer Science, Technion#TAB#" id="127429266">Doron Peled</author></authors><n_citation>41</n_citation><doc_type /><references><reference>1569068921</reference><reference>1571449242</reference><reference>1984831616</reference><reference>2004306067</reference><reference>2042981544</reference><reference>2062458205</reference><reference>2066210260</reference><reference>2066612386</reference><reference>2073689993</reference><reference>2110425399</reference><reference>2131053137</reference><reference>2166656159</reference><reference>2266118370</reference><reference>2569361512</reference></references><venue id="" type="">Linear Time, Branching Time and Partial Order in Logics and Models for Concurrency, School/Workshop</venue><doi>10.1007/BFb0013032</doi><keywords><keyword weight="0.4751">Programming language</keyword><keyword weight="0.42096">Lattice (order)</keyword><keyword weight="0.46836">Computer science</keyword><keyword weight="0.64007">Correctness</keyword><keyword weight="0.47665">Theoretical computer science</keyword><keyword weight="0.61894">Failure semantics</keyword><keyword weight="0.5511">Temporal logic</keyword><keyword weight="0.50523">Semantics</keyword><keyword weight="0.5146">Interleaving</keyword><keyword weight="0.64168">Formal proof</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We present a formal proof method which is based on a partial order semantics for parallel or distributed programs. In this view, a programu0027s semantics is given by a collection of partial orders of the events which can occur during execution. Rather than using the partial orders directly, the basis of the method assumes the sets of (linear) execution sequences with global states which are consistent with each partial order (each such set is called an interleaving set). The proof rules allow concluding the correctness of certain classes of properties for all execution sequences, even though the property is only demonstrated directly for a subset of the execution sequences. The subset used must include a representative sequence from each interleaving set, and the proof rules guarantee that this is the case when they may be applied. The method employs proof lattices, and is expressed using the temporal logic ISTL*. By choosing a subset with appropriate sequences, simpler intermediate assertions can be used than in previous formal approaches. Moreover, since less direct checking must be done, the method is often much more efficient.</abstract></paper>
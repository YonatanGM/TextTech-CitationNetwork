<paper id="1555216982"><title>Conventional and Uniqueness Typing in Graph Rewrite Systems</title><year>1993</year><authors><author org="University of Nijmegen" id="2512144298">Erik Barendsen</author><author org="University of Nijmegen" id="1964664483">Sjaak Smetsers</author></authors><n_citation>74</n_citation><doc_type>Conference</doc_type><references><reference>1549205822</reference><reference>1569966513</reference><reference>2116293853</reference><reference>2155397441</reference><reference>2912106379</reference><reference>2914702690</reference></references><venue id="1123496967" type="C">Foundations of Software Technology and Theoretical Computer Science</venue><doi>10.1007/3-540-57529-4_42</doi><keywords><keyword weight="0.55141">Uniqueness</keyword><keyword weight="0.44566">Discrete mathematics</keyword><keyword weight="0.51823">Graph property</keyword><keyword weight="0.51487">Functional programming</keyword><keyword weight="0.4592">Computer science</keyword><keyword weight="0.52685">Correctness</keyword><keyword weight="0.46836">Theoretical computer science</keyword><keyword weight="0.49628">Null graph</keyword><keyword weight="0.51852">Wait-for graph</keyword><keyword weight="0.5282">Graph rewriting</keyword><keyword weight="0.48788">Clique-width</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>In this paper we describe a Curry-like type system for graphs and extend it with uniqueness information to indicate that certain objects are only ‘locally accessible’. The correctness of type assignment guarantees that no external access on such an object will take place in the future. We prove that types are preserved under reduction (for both type systems) for a large class of rewrite systems. Adding uniqueness information provides a solution to two problems in implementations of functional languages: efficient space behaviour and interfacing with non-functional operations.</abstract></paper>
<paper id="1537143334"><title>Component-based product line development: the KobrA approach</title><year>2000</year><authors><author org="Fraunhofer Institute for Experimental Software Engineering (IESE)" id="2110818429">Colin Atkinson</author><author org="Fraunhofer Institute for Experimental Software Engineering (IESE)" id="1967273879">Joachim Bayer</author><author org="Fraunhofer Institute for Experimental Software Engineering (IESE)" id="164069180">Dirk Muthig</author></authors><n_citation>160</n_citation><doc_type>Conference</doc_type><references><reference>1513626997</reference><reference>1734109099</reference><reference>1978591382</reference><reference>1991618866</reference><reference>2113770490</reference><reference>2158535304</reference></references><venue id="1190643002" type="C">Software Product Lines</venue><doi>10.1007/978-1-4615-4339-8_16</doi><keywords><keyword weight="0.54655">Domain analysis</keyword><keyword weight="0.46311">Software engineering</keyword><keyword weight="0.45594">Systems engineering</keyword><keyword weight="0.56262">Reuse</keyword><keyword weight="0.44434">Computer science</keyword><keyword weight="0.5948">Software development process</keyword><keyword weight="0.59814">Component-based software engineering</keyword><keyword weight="0.54846">Resource-oriented architecture</keyword><keyword weight="0.57219">Software construction</keyword><keyword weight="0.56938">Software framework</keyword><keyword weight="0.60364">Software development</keyword></keywords><publisher>Springer, Boston, MA</publisher><abstract>The product line and component-based approaches to software engineering both hold the potential to significantly increase the level of reuse in industrial software development and maintenance. They also have complementary strengths, since they address the problem of reuse at opposite ends of the granularity spectrum; product line development essentially supports “reuse in the large” while component based development supports “reuse in the small.” This paper describes a method, Kobr A, that cleanly integrates the two paradigms into a systematic, unified approach to software development and maintenance. Key synergies resulting from this integration include support for the rapid and flexible instantiation of system variants, and the provision of methodological support for component-based framework development.</abstract></paper>
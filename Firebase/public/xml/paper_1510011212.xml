<paper id="1510011212"><title>Abstract Interpretation-Based Certification of Assembly Code</title><year>2002</year><authors><author org="ÉCOLE NORMALE SUPÉRIEURE" id="309290432">Xavier Rival</author></authors><n_citation>27</n_citation><doc_type>Conference</doc_type><references><reference>1539043156</reference><reference>1596995840</reference><reference>1755257908</reference><reference>1874478398</reference><reference>1957506489</reference><reference>2008609084</reference><reference>2014764321</reference><reference>2025554746</reference><reference>2031373197</reference><reference>2040856861</reference><reference>2043100293</reference><reference>2062066235</reference><reference>2142481893</reference></references><venue id="1180547793" type="C">Verification, Model Checking and Abstract Interpretation</venue><doi>10.1007/3-540-36384-X_7</doi><keywords><keyword weight="0.53607">Static program analysis</keyword><keyword weight="0.47403">Programming language</keyword><keyword weight="0.46038">Computer science</keyword><keyword weight="0.51517">Abstract interpretation</keyword><keyword weight="0.54352">Imperative programming</keyword><keyword weight="0.59878">Compiler</keyword><keyword weight="0.57512">Assembly language</keyword><keyword weight="0.52219">Program analysis</keyword><keyword weight="0.5103">Certification</keyword><keyword weight="0.52063">Debugging</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We present a method for analyzing assembly programs based on source program analysis and invariant translation. It is generic in the choice of an abstract domain for representing stores. This method is adapted to the design of certification tools for assembly programs generated by compiling programs written in an imperative language, without writing a specific compiler or modifying an existing one since invariant translation only uses standard debugging information. A prototype was developed for a procedural subset of the C language.</abstract></paper>
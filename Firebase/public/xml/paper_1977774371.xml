<paper id="1977774371"><title>Load Balancing in Distributed Systems</title><year>1982</year><authors><author org="Tandem Computers" id="2138930329">T.C.K. Chou</author><author org="" id="2222350550">J.A. Abraham</author></authors><n_citation>204</n_citation><doc_type>Journal</doc_type><references><reference>62571347</reference><reference>1486083926</reference><reference>1487184349</reference><reference>1536251414</reference><reference>1840555882</reference><reference>2008646959</reference><reference>2025896589</reference><reference>2045058695</reference><reference>2048715540</reference><reference>2056928322</reference><reference>2067936976</reference><reference>2072148579</reference><reference>2095939858</reference><reference>2123442845</reference><reference>2135457341</reference><reference>2139774323</reference><reference>2152879290</reference><reference>2166780994</reference></references><venue id="8351582" type="J">IEEE Transactions on Software Engineering</venue><doi>10.1109/TSE.1982.235574</doi><keywords><keyword weight="0.58424">Replication (computing)</keyword><keyword weight="0.59284">Concurrency control</keyword><keyword weight="0.53958">Load balancing (computing)</keyword><keyword weight="0.4734">Computer science</keyword><keyword weight="0.59931">Distributed memory</keyword><keyword weight="0.5818">Distributed design patterns</keyword><keyword weight="0.47155">Real-time computing</keyword><keyword weight="0.57821">Self-stabilization</keyword><keyword weight="0.64814">Distributed algorithm</keyword><keyword weight="0.57606">Distributed concurrency control</keyword><keyword weight="0.48153">Distributed computing</keyword></keywords><publisher>IEEE</publisher><abstract>In a distributed computing system made up of different types of processors each processor in the system may have different performance and reliability characteristics. In order to take advantage of this diversity of processing power, a modular distributed program should have its modules assigned in such a way that the applicable system performance index, such as execution time or cost, is optimized. This paper describes an algorithm for making an optimal module to processor assignment for a given performance criteria. We first propose a computational model to characterize distributed programs, consisting of tasks and an operational precedence relationship. This model alows us to describe probabilistic branching as well as concurrent execution in a distributed program. The computational model along with a set of seven program descriptors completely specifies a model for dynamic execution of a program on a distributed system. The optimal task to processor assignment is found by an algorithm based on results in Markov decision theory. The algorithm given in this paper is completely general and applicable to N-processor systems.</abstract></paper>
<paper id="1561114351"><title>Generative Programming and Active Libraries</title><year>1998</year><authors><author org="DaimlerChrysler AG#TAB#" id="1971965784">Krzysztof Czarnecki</author><author org="Fachhochschule Heidelberg" id="2574009038">Ulrich W. Eisenecker</author><author org="University of copenhagen" id="1985140975">Robert Gl√ºck</author><author org="Edison Design Group" id="2707669703">David Vandevoorde</author><author org="(Indiana University)" id="2599451122">Todd L. Veldhuizen</author></authors><n_citation>95</n_citation><doc_type>Journal</doc_type><references><reference>11600427</reference><reference>1521547819</reference><reference>1555037657</reference><reference>1555697857</reference><reference>1556133362</reference><reference>1556604985</reference><reference>1581501197</reference><reference>1797198873</reference><reference>1799816933</reference><reference>1912157869</reference><reference>1978220811</reference><reference>1999500280</reference><reference>2000504947</reference><reference>2002181967</reference><reference>2020024606</reference><reference>2026049208</reference><reference>2057731509</reference><reference>2146645075</reference><reference>2165634212</reference><reference>2168348603</reference><reference>2208923056</reference></references><venue id="106296714" type="J">Lecture Notes in Computer Science</venue><doi>10.1007/3-540-39953-4_3</doi><keywords><keyword weight="0.49804">Specification language</keyword><keyword weight="0.4618">Programming language</keyword><keyword weight="0.44929">Computer science</keyword><keyword weight="0.45959">Partial evaluation</keyword><keyword weight="0.45953">Profiling (computer programming)</keyword><keyword weight="0.48459">Abstract syntax tree</keyword><keyword weight="0.50431">Code generation</keyword><keyword weight="0.55856">Programming domain</keyword><keyword weight="0.50812">Standard Template Library</keyword><keyword weight="0.51345">Debugging</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We describe generative programming, an approach to generating customized programming components or systems, and active libraries, which are based on this approach. In contrast to conventional libraries, active libraries may contain metaprograms that implement domain-specific code generation, optimizations, debugging, profiling and testing. Several working examples (Blitz++, GMCL, Xroma) are presented to illustrate the potential of active libraries. We discuss relevant implementation technologies</abstract></paper>
<paper id="1506375872"><title>Test Generation Derived from Model-Checking</title><year>1999</year><authors><author org="Campus de Beaulieu" id="1998327350">Thierry JÃ©ron</author><author org="Campus de Beaulieu" id="2647209376">Pierre Morel</author></authors><n_citation>93</n_citation><doc_type>Conference</doc_type><references><reference>1506339322</reference><reference>1510782929</reference><reference>1526284106</reference><reference>1576341517</reference><reference>1593284044</reference><reference>1813719546</reference><reference>2007672174</reference><reference>2012935476</reference><reference>2023808162</reference><reference>2024851598</reference><reference>2109563237</reference><reference>2112640524</reference><reference>2117189826</reference><reference>2118382442</reference><reference>2157144873</reference><reference>2167004912</reference><reference>2176294340</reference></references><venue id="1162450063" type="C">Computer Aided Verification</venue><doi>10.1007/3-540-48683-6_12</doi><keywords><keyword weight="0.44508">Discrete mathematics</keyword><keyword weight="0.54307">Model checking</keyword><keyword weight="0.46148">Computer science</keyword><keyword weight="0.58623">Correctness</keyword><keyword weight="0.47003">Algorithm</keyword><keyword weight="0.47377">Theoretical computer science</keyword><keyword weight="0.51994">Formal specification</keyword><keyword weight="0.56408">Test case</keyword><keyword weight="0.57191">Strongly connected component</keyword><keyword weight="0.48756">Digraph</keyword><keyword weight="0.47189">Probabilistic automaton</keyword><keyword weight="0.52164">Formal verification</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Model-checking and testing are different activities, at least conceptually. While model-checking consists in comparing two specifications at different abstraction levels, testing consists in trying to find errors or gain some confidence in the correctness of an implementation with respect to a specification by the execution of test cases. Nevertheless, there are also similarities in models and algorithms. We argue for this by giving a new on-the-fly test generation algorithm which is an adaptation of a classical graph algorithm which also serves as a basis of some model-checking algorithms. This algorithm is the Tarjanu0027s algorithm which computes the strongly connected components of a digraph.</abstract></paper>
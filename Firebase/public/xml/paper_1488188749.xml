<paper id="1488188749"><title>Improving JML: For a Safer and More Effective Language</title><year>2003</year><authors><author org="&lt;italic&gt;Concordia University&lt;/italic&gt;" id="206359229">Patrice Chalin</author></authors><n_citation>17</n_citation><doc_type>Conference</doc_type><references><reference>1542923083</reference><reference>1551782231</reference><reference>1555946950</reference><reference>1578560741</reference><reference>1582537688</reference><reference>1583095677</reference><reference>1583826417</reference><reference>1602578987</reference><reference>1627776297</reference><reference>1644882639</reference><reference>1659048632</reference><reference>1993836075</reference><reference>2008037751</reference><reference>2011660287</reference><reference>2013492611</reference><reference>2090962365</reference><reference>2094160561</reference><reference>2121953666</reference><reference>2146455667</reference><reference>2164810907</reference><reference>2168441850</reference><reference>2170898576</reference><reference>2583032417</reference></references><venue id="1169806927" type="C">Formal Methods</venue><doi>10.1007/978-3-540-45236-2_25</doi><keywords><keyword weight="0.535">Specification language</keyword><keyword weight="0.46702">Programming language</keyword><keyword weight="0.46732">Expression (mathematics)</keyword><keyword weight="0.46819">Arbitrary-precision arithmetic</keyword><keyword weight="0.45598">Computer science</keyword><keyword weight="0.49823">Assertion</keyword><keyword weight="0.51313">Formal methods</keyword><keyword weight="0.6032">Java Modeling Language</keyword><keyword weight="0.51953">Eiffel</keyword><keyword weight="0.48384">Semantics</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>An unusually high number of published JML specifications are invalid or inconsistent, including cases from the security critical area of smart card applications. We claim that these specification errors are due to a mismatch between user expectations and the current JML semantics of expressions over numeric types. At the heart of the problem is JML’s language design decision to assign to arithmetic operators the same semantics as in Java. Consequently, JML arithmetic is bounded in precision and more importantly loss of precision occurs stealthily. After a short discussion of JML language design goals and objectives, we introduce JMLa, an adaptation of JML supporting primitive arbitrary precision numeric types. To support our claim that the identified specification errors are due to JML’s divergence from user expectations, we demonstrate that the invalidities and inconsistencies disappear under JMLa semantics with either no, or minor syntactic changes to the specifications. Other advantages of JMLa are illustrated including safety – how it allows an automated static checker like ESC/Java to detect more specification and implementation errors. We also briefly illustrate how these issues are applicable to other assertion-based languages like Eiffel.</abstract></paper>
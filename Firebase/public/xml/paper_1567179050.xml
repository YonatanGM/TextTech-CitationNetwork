<paper id="1567179050"><title>The PEP Tool</title><year>1997</year><authors><author org="Universität Hildesheim" id="2633552300">Bernd Grahlmann</author></authors><n_citation>66</n_citation><doc_type>Conference</doc_type><references><reference>1530330071</reference><reference>1553237719</reference><reference>1571819235</reference><reference>1604240241</reference><reference>1763709409</reference><reference>1937565299</reference><reference>1965237160</reference><reference>2016300863</reference><reference>2080267935</reference><reference>2087409327</reference><reference>2107978495</reference><reference>2161910549</reference></references><venue id="1162450063" type="C">Computer Aided Verification</venue><doi>10.1007/3-540-63166-6_43</doi><keywords><keyword weight="0.47015">Programming language</keyword><keyword weight="0.48214">Model checking</keyword><keyword weight="0.59042">Petri net</keyword><keyword weight="0.45699">Computer science</keyword><keyword weight="0.46146">Automaton</keyword><keyword weight="0.55713">Imperative programming</keyword><keyword weight="0.42904">Algorithm</keyword><keyword weight="0.44866">Theoretical computer science</keyword><keyword weight="0.50879">Graphical user interface</keyword><keyword weight="0.51426">Modular design</keyword><keyword weight="0.46834">Temporal logic</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The PEP tool embeds sophisticated programming and verification components in a user-friendly graphical interface. The basic idea is that the programming component allows the user to design concurrent algorithms in an imperative language, and that the PEP system then generates Petri nets from such programs in order to use Petri net theory for simulation and verification purposes. A key feature is flexibility; its modular design eases the task of adding new interfaces to other verification packages, such as ‘INA’, ‘PROD’ or ‘SMV’.</abstract></paper>
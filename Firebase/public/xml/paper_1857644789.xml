<paper id="1857644789"><title>Multi-version memory: software cache management for concurrent B-trees</title><year>1990</year><authors><author org="Lab. for Comput. Sci., MIT. Cambridge, MA, USA" id="2973570917">W.E. Weihl</author><author org="Lab. for Comput. Sci., MIT. Cambridge, MA, USA" id="2973242720">P. Wang</author></authors><n_citation>31</n_citation><doc_type>Conference</doc_type><references><reference>88010800</reference><reference>169858420</reference><reference>1573565523</reference><reference>1980806195</reference><reference>2015121269</reference><reference>2026942343</reference><reference>2033508089</reference><reference>2036122593</reference><reference>2039071499</reference><reference>2039509099</reference><reference>2057391254</reference><reference>2106626405</reference><reference>2108179552</reference><reference>2116497098</reference><reference>2126990153</reference><reference>2161694911</reference></references><venue id="1191753779" type="C">International Parallel and Distributed Processing Symposium</venue><doi>10.1109/SPDP.1990.143621</doi><keywords><keyword weight="0.6793">Interleaved memory</keyword><keyword weight="0.68249">Uniform memory access</keyword><keyword weight="0.70413">Shared memory</keyword><keyword weight="0.46136">Computer science</keyword><keyword weight="0.47489">Parallel computing</keyword><keyword weight="0.6559">Cache-only memory architecture</keyword><keyword weight="0.70898">Distributed memory</keyword><keyword weight="0.46648">Theoretical computer science</keyword><keyword weight="0.67131">Memory management</keyword><keyword weight="0.67587">Memory map</keyword><keyword weight="0.70142">Distributed shared memory</keyword><keyword weight="0.46434">Distributed computing</keyword></keywords><publisher>IEEE</publisher><abstract>The authors describe a new concurrent B-tree algorithm. The algorithm is designed to work well in large-scale parallel or distributed systems in which the number of processors sharing the tree is large or the communication delay between processors (or between processors and the global memory for a shared-memory system) is large relative to the speed of local computation. The basis of the algorithm is an abstraction that is similar to coherent shared memory, but provides a weaker semantics; this abstraction is called multiversion memory. Multi-version memory uses caches but weakens the semantics of ordinary shared memory by allowing process reading data to be given an old version of the data. This semantics is adequate for the non-leaf nodes in the B-tree algorithms presented. u003e</abstract></paper>
<paper id="1941732106"><title>On-line scheduling in the presence of overload</title><year>1991</year><authors><author org="Texas Univ., Austin, TX, USA" id="2145728887">S. Baruah</author><author org="University of Texas at Austin,#TAB#" id="2974926664">G. Koren</author><author org="University of Texas at Austin,#TAB#" id="2130249704">B. Mishra</author><author org="University of Texas at Austin,#TAB#" id="2973362137">A. Raghunathan</author><author org="University of Texas at Austin,#TAB#" id="2147804138">L. Rosier</author><author org="University of Texas at Austin,#TAB#" id="2082974086">D. Shasha</author></authors><n_citation>127</n_citation><doc_type>Conference</doc_type><references><reference>36750305</reference><reference>194244820</reference><reference>2011670396</reference><reference>2041645394</reference><reference>2109488193</reference><reference>2938317442</reference></references><venue id="1150208541" type="C">Foundations of Computer Science</venue><doi>10.1109/SFCS.1991.185354</doi><keywords><keyword weight="0.55715">Online algorithm</keyword><keyword weight="0.65089">Fixed-priority pre-emptive scheduling</keyword><keyword weight="0.58023">Uniprocessor system</keyword><keyword weight="0.51541">Preemption</keyword><keyword weight="0.54125">Scheduling (computing)</keyword><keyword weight="0.43958">Computer science</keyword><keyword weight="0.44713">Parallel computing</keyword><keyword weight="0.62213">Dynamic priority scheduling</keyword><keyword weight="0.56405">Foreground-background</keyword><keyword weight="0.48883">Computational complexity theory</keyword></keywords><publisher>IEEE Computer Society</publisher><abstract>The preemptive scheduling of sporadic tasks on a uniprocessor is considered. A task may arrive at any time, and is characterized by a value that reflects its importance, an execution time that is the amount of processor time needed to completely execute the task, and a deadline by which the task is to complete execution. The goal is to maximize the sum of the values of the completed tasks. An online scheduling algorithm that achieves optimal performance when the system is underloaded and provides a nontrivial performance guarantee when the system is overloaded is designed. The algorithm is implemented using simple data structures to run at a cost of O(log n) time per task, where n bounds the number of tasks in the system at any instant. Upper bounds on the best performance guarantee obtainable by an online algorithm in a variety of settings are derived. u003e</abstract></paper>
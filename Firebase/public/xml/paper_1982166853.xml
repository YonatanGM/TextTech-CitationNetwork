<paper id="1982166853"><title>Toward Auto-scheduling Compilers*</title><year>1988</year><authors><author org="Center for Supercomputing Research and Development and Department of Electrical and Computer Engineering, University of Illinois at Urbana-Champaign, Urbana, USA" id="2301418095">Constantine D. Polychronopoulos</author></authors><n_citation>25</n_citation><doc_type>Journal</doc_type><references><reference>65279919</reference><reference>74870764</reference><reference>79448102</reference><reference>85339473</reference><reference>97436512</reference><reference>1491178396</reference><reference>1555673550</reference><reference>1604371858</reference><reference>1976611694</reference><reference>1990199656</reference><reference>1995991185</reference><reference>1998336350</reference><reference>2000533899</reference><reference>2008369312</reference><reference>2023633366</reference><reference>2025896589</reference><reference>2043555680</reference><reference>2083734282</reference><reference>2092333800</reference><reference>2098688018</reference><reference>2117412152</reference><reference>2135736783</reference><reference>2140480361</reference></references><venue id="32326811" type="J">The Journal of Supercomputing</venue><doi>10.1007/BF00129782</doi><keywords><keyword weight="0.48101">Programming language</keyword><keyword weight="0.54936">Scheduling (computing)</keyword><keyword weight="0.47898">Computer science</keyword><keyword weight="0.47744">Parallel computing</keyword><keyword weight="0.61986">Compiler</keyword><keyword weight="0.47739">Distributed computing</keyword></keywords><publisher>Springer Nature</publisher><abstract>In this paper we propose a general framework for compiling, scheduling, and executing parallel programs on parallel computers. We discuss important aspects of program partitioning, scheduling, and execution, and consider possible realistic alternatives for each issue. Subsequently we propose a possible implementation of an auto-scheduling compiler and give simple examples to illustrate the principles. Our approach to the entire problem is to utilize program information available to the compiler while, at the same time, allowing for run-time “corrections” and flexibility.</abstract></paper>
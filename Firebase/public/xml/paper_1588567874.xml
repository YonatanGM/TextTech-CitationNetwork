<paper id="1588567874"><title>Safe, Untrusted Agents Using Proof-Carrying Code</title><year>1998</year><authors><author org="Carnegie - Mellon University#TAB#" id="281330718">George C. Necula</author><author org="Carnegie - Mellon University#TAB#" id="2139030624">Peter Lee</author></authors><n_citation>179</n_citation><doc_type /><references><reference>1527145237</reference><reference>1534850143</reference><reference>1590828018</reference><reference>1644882639</reference><reference>1867436870</reference><reference>1974190112</reference><reference>2051632385</reference><reference>2066210260</reference><reference>2079029390</reference><reference>2083469471</reference><reference>2128057448</reference><reference>2134342348</reference><reference>2138381338</reference><reference>2164778826</reference></references><venue id="" type="">Mobile Agents and Security</venue><doi>10.1007/3-540-68671-1_5</doi><keywords><keyword weight="0.60183">Dead code elimination</keyword><keyword weight="0.64443">Unreachable code</keyword><keyword weight="0.45733">Programming language</keyword><keyword weight="0.63985">Source code</keyword><keyword weight="0.46005">Computer science</keyword><keyword weight="0.60886">Code injection</keyword><keyword weight="0.63338">Redundant code</keyword><keyword weight="0.62866">Code generation</keyword><keyword weight="0.69218">Proof-carrying code</keyword><keyword weight="0.62509">Code Access Security</keyword><keyword weight="0.44719">Database</keyword></keywords><publisher>Springer Berlin Heidelberg</publisher><abstract>Proof-Carrying Code (PCC) enables a computer system to determine, automatically and with certainty, that program code provided by another system is safe to install and execute without requiring interpretation or run-time checking. PCC has applications in any computing system in which the safe, efficient, and dynamic installation of code is needed. The key idea is to attach to the code an easily-checkable proof that its execution does not violate the safety policy of the receiving system. This paper describes the design and a typical implementation of Proof-Carrying Code, where the language used for specifying the safety properties is first-order predicate logic. Examples of safety properties described in this paper are memory safety and compliance with data access policies, resource usage bounds, and data abstraction boundaries.</abstract></paper>
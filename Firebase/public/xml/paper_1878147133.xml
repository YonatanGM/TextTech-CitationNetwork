<paper id="1878147133"><title>RML - A New Language and Implementation for Natural Semantics</title><year>1994</year><authors><author org="LinkÃ¶ping; University" id="2299249489">Mikael Pettersson</author></authors><n_citation>14</n_citation><doc_type>Conference</doc_type><references><reference>45961263</reference><reference>183886856</reference><reference>1507396723</reference><reference>1559402073</reference><reference>1580664042</reference><reference>1583597026</reference><reference>1589263172</reference><reference>1594756768</reference><reference>1596403187</reference><reference>1829244603</reference><reference>1973162794</reference><reference>1979240050</reference><reference>1985058553</reference><reference>1990351075</reference><reference>2082433897</reference><reference>2133979298</reference><reference>2142401116</reference><reference>2913158420</reference></references><venue id="2754504537" type="C">International Symposium on Programming Language Implementation and Logic Programming</venue><doi>10.1007/3-540-58402-1_10</doi><keywords><keyword weight="0.47989">Programming language</keyword><keyword weight="0.54731">Computational semantics</keyword><keyword weight="0.45228">Computer science</keyword><keyword weight="0.54994">Object language</keyword><keyword weight="0.58786">Compiler</keyword><keyword weight="0.53314">Natural language programming</keyword><keyword weight="0.54464">Prolog</keyword><keyword weight="0.55161">High-level programming language</keyword><keyword weight="0.51903">First-generation programming language</keyword><keyword weight="0.54873">Low-level programming language</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>RML is a programming language intended for the implementation of Natural Semantics specifications. The basic procedural elements are relations: many-to-many mappings defined by a number of axioms or inference rules. It has control flow, logical variables and (explicit) unification as in Prolog; from ML it borrows a polymorphic type system, data structures, and pattern matching; a facility for separatelycompilable modules also exists. A simple prototype compiler, based on translating RML to Continuation-Passing Style and then to C, has been implemented. Benchmarks indicate that this compiler generates code that is several orders of magnitude faster than Typol, and two times faster than standard Prolog compilers.</abstract></paper>
<paper id="1518271219"><title>Finding Bugs in an Alpha Microprocessor Using Satisfiability Solvers</title><year>2001</year><authors><author org="Chalmers University of Technology" id="2780286042">Per Bjesse</author><author org="Compaq Computer Corporation" id="2631177305">Tim Leonard</author><author org="Compaq Computer Corporation" id="1819203618">Abdel Mokkedem</author></authors><n_citation>111</n_citation><doc_type>Conference</doc_type><references><reference>1494481937</reference><reference>1495266209</reference><reference>1498682591</reference><reference>1506660274</reference><reference>1513300473</reference><reference>1516936561</reference><reference>1549820563</reference><reference>1582162693</reference><reference>1787074469</reference><reference>1814068099</reference><reference>1972065960</reference><reference>1986558678</reference><reference>2340735175</reference><reference>2913459036</reference></references><venue id="1162450063" type="C">Computer Aided Verification</venue><doi>10.1007/3-540-44585-4_44</doi><keywords><keyword weight="0.60609">Model checking</keyword><keyword weight="0.45573">Programming language</keyword><keyword weight="0.4469">Computer science</keyword><keyword weight="0.46363">Satisfiability</keyword><keyword weight="0.45076">Algorithm</keyword><keyword weight="0.51557">Binary decision diagram</keyword><keyword weight="0.45229">Propositional calculus</keyword><keyword weight="0.45239">Theoretical computer science</keyword><keyword weight="0.61329">Bebugging</keyword><keyword weight="0.45759">Register-transfer level</keyword><keyword weight="0.46761">Bounded function</keyword><keyword weight="0.63182">Symbolic trajectory evaluation</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We describe the techniques we have used to search for bugs in the memory subsystem of a next-generation Alpha microprocessor. Our approach is based on two model checking methods that use satisfiability (SAT) solvers rather than binary decision diagrams :[39],"show that the first method, bounded model checking, can reduce the verification runtime from days to minutes on real, deep, microprocessor bugs when compared to a state-of-the-art BDD-based model checker. We also present experimental results showing that the second method, a version of symbolic trajectory evaluation that uses SAT-solvers instead of BDDs, can find as deep bugs, with even shorter runtimes. The tradeoff is that we have to spend more time writing we present :[112],"our experiences with the two SAT-solvers that we have used, and give guidelines for applying a combination of bounded model checking and symbolic trajectory evaluation to industrial strength bugs we have :[143],"found are significantly more complex than those previously :[143],"found with methods based on SAT-solvers.</abstract></paper>
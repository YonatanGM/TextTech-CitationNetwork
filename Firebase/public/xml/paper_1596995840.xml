<paper id="1596995840"><title>VOC: A translation validator for optimizing compilers</title><year>2002</year><authors><author org="Department of Computer Science, New York University Contact" id="2048787978">Lenore D. Zuck</author><author org="Weizmann institute of Science" id="2171343426">Amir Pnueli</author><author org="New-York University &gt;  &gt;  &gt;  &gt;" id="2588242145">Yi Fang</author><author org="Department of Computer Science, New York University Contact" id="2123694577">Benjamin Goldberg</author></authors><n_citation>83</n_citation><doc_type>Journal</doc_type><references><reference>1572729891</reference><reference>1575176197</reference><reference>2040856861</reference><reference>2051632385</reference><reference>2983363186</reference></references><venue id="50368787" type="J">Electronic Notes in Theoretical Computer Science</venue><doi>10.1016/S1571-0661(04)80393-1</doi><keywords><keyword weight="0.60883">Object code</keyword><keyword weight="0.61885">Functional compiler</keyword><keyword weight="0.47659">Programming language</keyword><keyword weight="0.46439">Computer science</keyword><keyword weight="0.58453">Correctness</keyword><keyword weight="0.67961">Compiler correctness</keyword><keyword weight="0.45466">Theoretical computer science</keyword><keyword weight="0.61817">Optimizing compiler</keyword><keyword weight="0.65281">Compiler</keyword><keyword weight="0.63885">Compiler construction</keyword><keyword weight="0.58703">Formal verification</keyword></keywords><publisher>Elsevier</publisher><abstract>Abstract There is a growing awareness, both in industry and academia, of the crucial role of formally proving the correctness of safety-critical components of systems. Most formal verification methods verify the correctness of a high-level representation of the system against a given specification. However, if one wishes to infer from such a verification the correctness of the code which runs on the actual target architecture, it is essential to prove that the high-level representation is correctly implemented at the lower level. That is, it is essential to verify the the correctness of the translation from the high-level source-code representation to the object code, a translation which is typically performed by a compiler (or a code generator in case the source is a specification rather than a programming language). Formally verifying a full-fledged optimizing compiler, as one would verify any other large program, is not feasible due to its size, ongoing evolution and modification, and, possibly, proprietary considerations. The translation validation method used in this paper is a novel approach that offers an alternative to the verification of translators in general and compilers in particular. According to the translation validation approach, rather than verifying the compiler itself, one constructs a validation tool which, after every run of the compiler, formally confirms that the target code produced on that run is a correct translation of the source program The paper presents VOC–a methodology for translation validation of optimizing compilers. We distinguish between structure preserving optimizations, for which we establish a simulation relation between the source and target code based on computational induction, and structure modifying optimizations, for which we develop specialized “meta-rules”. The paper also describes VOC64—a prototype translation validator that automatically produces verification conditions for the global optimizations of the SGI Pro-64 compiler.</abstract></paper>
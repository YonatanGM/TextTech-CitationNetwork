<paper id="1986347924"><title>System-dependence-graph-based slicing of programs with arbitrary interprocedural control flow</title><year>1999</year><authors><author org="Dept. of Comput. &amp; Inf. Sci., Ohio State Univ., Columbus, OH, USA#TAB#" id="2135372096">Saurabh Sinha</author><author org="Computer and Info. Science, Ohio State University, 2015 Neil Avenue, Columbus, OH" id="2984677931">Mary Jean Harrold</author><author org="Computer Science, Oregon State University, Dearborn Hall 307-A, Corvallis, OR" id="1949835151">Gregg Rothermel</author></authors><n_citation>97</n_citation><doc_type>Conference</doc_type><references><reference>1491178396</reference><reference>1506151672</reference><reference>1545867391</reference><reference>1882991369</reference><reference>1980468060</reference><reference>2017971446</reference><reference>2020538887</reference><reference>2047636717</reference><reference>2064625489</reference><reference>2068549754</reference><reference>2109427294</reference><reference>2144344516</reference><reference>2146528052</reference><reference>2293624369</reference></references><venue id="1174403976" type="C">International Conference on Software Engineering</venue><doi>10.1145/302405.302675</doi><keywords><keyword weight="0.63853">Program slicing</keyword><keyword weight="0.44945">Permission</keyword><keyword weight="0.45384">Programming language</keyword><keyword weight="0.44685">Computer science</keyword><keyword weight="0.47689">Control flow</keyword><keyword weight="0.49444">Slicing</keyword><keyword weight="0.5107">Software system</keyword><keyword weight="0.4332">Real-time computing</keyword><keyword weight="0.48007">Computer-aided software engineering</keyword><keyword weight="0.43558">Control system</keyword><keyword weight="0.47564">Application software</keyword></keywords><publisher>IEEE</publisher><abstract>Many algorithms for automating software engineering tasks require program slices. To be applicable to large software systems, these slices must be computed interprocedurally. Slicing techniques based on the system dependence graph (SDG) provide one approach for computing interprocedural slices, but these techniques are defined only for programs in which called procedures necessarily return to call sites. When applied to programs that contain arbitrary interprocedural control flow, existing SDG-based slicing techniques can compute incorrect slices; this limits their applicability. This paper presents an approach to constructing SDGs, and computing slices on SDGs, that accommodates programs with arbitrary interprocedural control flow. The main benefit of our approach is that it allows the use of the SDG-based slicing technique on a wide class of practical programs to which it did not previously apply.</abstract></paper>
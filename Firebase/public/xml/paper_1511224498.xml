<paper id="1511224498"><title>Learning conjunctions of Horn clauses</title><year>1990</year><authors><author org="Dept. of Computer Science, Yale University, New Haven, CT, USA#TAB#" id="689283738">D. Angluin</author><author org="Computer Science, University of Illinois, Urbana," id="2065009677">M. Frazier</author><author org="Computer Science, University of Illinois, Urbana," id="2132255653">L. Pitt</author></authors><n_citation>55</n_citation><doc_type>Conference</doc_type><references><reference>1766442844</reference><reference>1994022788</reference><reference>1999240621</reference><reference>1999647826</reference><reference>2018908820</reference><reference>2019363670</reference><reference>2020114845</reference><reference>2022124343</reference><reference>2066848920</reference><reference>2071210909</reference><reference>2088181725</reference><reference>2091401625</reference><reference>2129113961</reference><reference>2139709458</reference><reference>2142399242</reference><reference>2154952480</reference><reference>2157526632</reference><reference>2428981601</reference><reference>2912171497</reference></references><venue id="1150208541" type="C">Foundations of Computer Science</venue><doi>10.1109/FSCS.1990.89537</doi><keywords><keyword weight="0.56195">Boolean function</keyword><keyword weight="0.46328">Discrete mathematics</keyword><keyword weight="0.54174">Logical equivalence</keyword><keyword weight="0.45905">Combinatorics</keyword><keyword weight="0.0">Polynomial time complexity</keyword><keyword weight="0.61329">Horn clause</keyword><keyword weight="0.52409">Polynomial</keyword><keyword weight="0.67195">Horn-satisfiability</keyword><keyword weight="0.52512">Equivalence (measure theory)</keyword><keyword weight="0.62071">Unit propagation</keyword><keyword weight="0.43136">Mathematics</keyword></keywords><publisher>IEEE</publisher><abstract>An algorithm for learning the class of Boolean formulas that are expressible as conjunctions of Horn clauses is presented. (A Horn clause is a disjunction of literals, all but at most one of which is a negated variable). The algorithm uses equivalence queries and membership queries to produce a formula that is logically equivalent to the unknown formula to be learned. The amount of time used by the algorithm is polynomial in the number of variables and the number of clauses in the unknown formula. u003e</abstract></paper>
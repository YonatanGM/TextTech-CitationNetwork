<paper id="1561085604"><title>Functions as processes</title><year>1990</year><authors><author org="University of Edinburgh," id="2087817183">Robin Milner</author></authors><n_citation>117</n_citation><doc_type>Conference</doc_type><references><reference>1503973138</reference><reference>2025294912</reference><reference>2028613837</reference><reference>2039112578</reference><reference>2088735483</reference><reference>2094935854</reference><reference>2110425399</reference><reference>2136413089</reference><reference>2158942489</reference><reference>2162477369</reference><reference>2911865844</reference></references><venue id="1141821850" type="C">International Colloquium on Automata, Languages and Programming</venue><doi>10.1007/BFb0032030</doi><keywords><keyword weight="0.44879">Discrete mathematics</keyword><keyword weight="0.4368">Combinatorics</keyword><keyword weight="0.42552">Computer science</keyword><keyword weight="0.45279">Theoretical computer science</keyword><keyword weight="0.53572">Process calculus</keyword><keyword weight="0.446">Encoding (memory)</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>This paper exhibits accurate encodings of the λ-calculus in the π-calculus. The former is canonical for calculation with functions, while the latter is a recent step [15] towards a canonical treatment of concurrent processes. With quite simple encodings, two λ-calculus reduction strategies are simulated very closely; each reduction in λ-calculus is mimicked by a short sequence of reductions in π-calculus. Abramskyu0027s precongruence of applicative simulation [1] over λ-calculus is compared with that induced by the encoding of the lazy λ-calculus into π-calculus; a similar comparison is made for call-by-value λ-calculus.</abstract></paper>
<paper id="1556226926"><title>DJ: Dynamic Adaptive Programming in Java</title><year>2001</year><authors><author org="Northeastern, University" id="2073908770">Doug Orleans</author><author org="Northeastern, University" id="2044959418">Karl J. Lieberherr</author></authors><n_citation>81</n_citation><doc_type>Journal</doc_type><references><reference>1515085344</reference><reference>2079806960</reference><reference>2102217676</reference><reference>2111609583</reference><reference>2159765281</reference></references><venue id="106296714" type="J">Lecture Notes in Computer Science</venue><doi>10.1007/3-540-45429-2_5</doi><keywords><keyword weight="0.4696">Programming language</keyword><keyword weight="0.56825">Object-oriented programming</keyword><keyword weight="0.62056">Java annotation</keyword><keyword weight="0.45769">Computer science</keyword><keyword weight="0.61808">Java concurrency</keyword><keyword weight="0.6363">Real time Java</keyword><keyword weight="0.63614">Generics in Java</keyword><keyword weight="0.5623">Reflection (computer programming)</keyword><keyword weight="0.5842">Java</keyword><keyword weight="0.56259">Generic programming</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>DJ is a new pure-Java library for adaptive programming that allows traversal strategies to be constructed and in terpreted dynamically at run-time, as opposed to existing adaptive programming tools that are strictly static. Traversal strategies can be used with adaptive visitors (similar to the Visitor pattern) or in a generic programming style by adapting them to the Java Collections framework. The DJ library makes heavy use of Java reflection and we give some details of this implementation.</abstract></paper>
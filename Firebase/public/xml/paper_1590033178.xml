<paper id="1590033178"><title>The TOOLBUS Coordination Architecture</title><year>1996</year><authors><author org="University of Amsterdam" id="2144792310">Jan A. Bergstra</author><author org="University of Amsterdam" id="1983299346">Paul Klint</author></authors><n_citation>69</n_citation><doc_type>Conference</doc_type><references><reference>1963572625</reference><reference>1965498649</reference><reference>1972478730</reference><reference>1981994545</reference><reference>1987466231</reference><reference>1988327784</reference><reference>1995206801</reference><reference>2013399578</reference><reference>2014923870</reference><reference>2021168805</reference><reference>2026701237</reference><reference>2045267305</reference><reference>2045328215</reference><reference>2058806660</reference><reference>2068480335</reference><reference>2082207996</reference><reference>2085870410</reference><reference>2117081378</reference><reference>2123092416</reference><reference>2124371723</reference><reference>2125294767</reference><reference>2127262541</reference><reference>2128677857</reference><reference>2129334537</reference><reference>2154940799</reference><reference>2914420373</reference></references><venue id="1141157497" type="C">International Conference on Coordination Models and Languages</venue><doi>10.1007/3-540-61052-9_40</doi><keywords><keyword weight="0.47732">Architecture</keyword><keyword weight="0.46411">Computer science</keyword><keyword weight="0.53026">Interoperability</keyword><keyword weight="0.62575">Software system</keyword><keyword weight="0.55177">Software</keyword><keyword weight="0.53236">Inter-process communication</keyword><keyword weight="0.65217">Resource-oriented architecture</keyword><keyword weight="0.62552">Component-based software engineering</keyword><keyword weight="0.62597">Software architecture</keyword><keyword weight="0.47067">Distributed computing</keyword></keywords><publisher>Springer Verlag</publisher><abstract>Building large, heterogeneous, distributed software systems poses serious problems for the software engineer; achieving interoperability of software systems is still a major challenge. We describe an experiment in designing a generic software architecture for solving these problems. To get control over the possible interactions between software components (“tools”) we forbid direct inter-tool communication. Instead, all interactions are controlled by a “script” that formalizes all the desired interactions among tools. This leads to a component interconnection architecture resembling a hardware communication bus, and therefore we will call it a “ToolBus”.</abstract></paper>
<paper id="1979207937"><title>Indexing moving points</title><year>2003</year><authors><author org="Center for Geometric Computing, Department of Computer Science, Duke University, Durham, NC" id="2128565744">Pankaj K. Agarwal</author><author org="Center for Geometric Computing, Department of Computer Science, Duke University, Durham, NC" id="2170557315">Lars Arge</author><author org="Dept. of Computer Science, University of Illinois Urbana, IL" id="2142359535">Jeff Erickson</author></authors><n_citation>275</n_citation><doc_type>Journal</doc_type><references><reference>25426087</reference><reference>1520144421</reference><reference>1537692524</reference><reference>1570560315</reference><reference>1577072106</reference><reference>1599406659</reference><reference>1779898155</reference><reference>1839958774</reference><reference>1938177792</reference><reference>1964691748</reference><reference>1970319631</reference><reference>1982042357</reference><reference>1987458256</reference><reference>1994101999</reference><reference>1997884498</reference><reference>2012386415</reference><reference>2015858208</reference><reference>2026100521</reference><reference>2028747718</reference><reference>2038230692</reference><reference>2043148321</reference><reference>2050459520</reference><reference>2055385473</reference><reference>2058432138</reference><reference>2064311651</reference><reference>2086474457</reference><reference>2091084325</reference><reference>2097224604</reference><reference>2099397891</reference><reference>2101429492</reference><reference>2103465290</reference><reference>2106642566</reference><reference>2128837676</reference><reference>2132445073</reference><reference>2138326732</reference><reference>2138764872</reference><reference>2141394101</reference><reference>2142753649</reference><reference>2142947709</reference><reference>2149906774</reference><reference>2151722709</reference><reference>2152301310</reference><reference>2158713459</reference><reference>2179904348</reference><reference>2639114357</reference></references><venue id="141020589" type="J">Journal of Computer and System Sciences</venue><doi>10.1016/S0022-0000(02)00035-1</doi><keywords><keyword weight="0.46936">Block size</keyword><keyword weight="0.45857">Discrete mathematics</keyword><keyword weight="0.46727">Monotonic function</keyword><keyword weight="0.45551">Combinatorics</keyword><keyword weight="0.50087">Rectangle</keyword><keyword weight="0.51315">Search engine indexing</keyword><keyword weight="0.45234">e</keyword><keyword weight="0.4574">Timestamp</keyword><keyword weight="0.41659">Mathematics</keyword><keyword weight="0.47369">Trajectory</keyword></keywords><publisher>Academic Press, Inc.</publisher><abstract>We propose three indexing schemes for storing a set S of N points in the plane, each moving along a linear trajectory, so that any query of the following form can be answered quickly: Given a rectangle R and a real value t, report all K points of S that lie inside R at time t. We first present an indexing structure that, for any given constant e u003e 0, uses O(N/B) disk blocks and answers a query in O(N/B1/2+e + K/B)I/Os, where B is the block size. It can also report all the points of S that lie inside R during a given time interval. A point can be inserted or deleted, or the trajectory of a point can be changed, in O(log2BN) I/Os. Next, we present a general approach that improves the query time if the queries arrive in chronological order, by allowing the index to evolve over time. We obtain a tradeoff between the query time and the number of times the index needs to be updated as the points move. We also describe an indexing scheme in which the number of I/Os required to answer a query depends monotonically on the difference between the query time stamp t and the current time. Finally, we develop an efficient indexing scheme to answer approximate nearest-neighbor queries among moving points.</abstract></paper>
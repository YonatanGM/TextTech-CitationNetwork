<paper id="1535589004"><title>Using a Visual Formalism for Design Verification in Industrial Environments</title><year>1998</year><authors><author org="OFFIS#TAB#" id="2077097883">Rainer Schl√∂r</author><author org="OFFIS#TAB#" id="2951773993">Bernhard Josko</author><author org="Siemens AG, AUT GT 23" id="2287853013">Dieter Werth</author></authors><n_citation>13</n_citation><doc_type>Journal</doc_type><references><reference>1479692980</reference><reference>1542703180</reference><reference>1577955944</reference><reference>1595158423</reference><reference>1921055447</reference><reference>2001594070</reference><reference>2030224590</reference><reference>2054554282</reference><reference>2080267935</reference><reference>2150119568</reference></references><venue id="106296714" type="J">Lecture Notes in Computer Science</venue><doi>10.1007/BFb0053507</doi><keywords><keyword weight="0.55003">Specification language</keyword><keyword weight="0.51511">Timing diagram</keyword><keyword weight="0.65106">Functional verification</keyword><keyword weight="0.47555">Programming language</keyword><keyword weight="0.46725">Computer science</keyword><keyword weight="0.63848">Intelligent verification</keyword><keyword weight="0.64623">Verification</keyword><keyword weight="0.60177">Formal specification</keyword><keyword weight="0.65539">High-level verification</keyword><keyword weight="0.61221">Formal verification</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>This paper reports experiences and results gained during the evaluation of the visual formalism STD as specification method for formal verification, performed in cooperation with industrial partners. The visual formalism STD (Symbolic Timing Diagrams) was developed continuously since 1993 by OFFIS as a specification method, which satisfies several needs: (1) It is based on the principles used in the familiar notation of timing diagrams (as conventionally used by hardware designers). (2) It is a method amenable to formal verification, using stateof-the art verification tools efficiently (in particular, symbolic modelchecking). (3) It supports compositional verification, which is an approach to verify large designs in a compositional way (breaking up proofs of requirements stated for a full design into a sequence of smaller proof tasks, which imply the global proof task). The formalism (with the supporting tools) has been integrated into an established verification environment (CheckOff-M), which allows to verify industrial-scale designs by model-checking.</abstract></paper>
<paper id="1491807955"><title>An Event-Based Object Model for Distributed Programming</title><year>1995</year><authors><author org="Trinity Coll" id="273097038">Gradimir Starovic</author><author org="Trinity Coll" id="1944145189">Vinny Cahill</author><author org="Trinity Coll" id="115373866">Brendan Tangney</author></authors><n_citation>53</n_citation><doc_type /><references><reference>176150280</reference><reference>1555946950</reference><reference>1589595839</reference><reference>1923743162</reference><reference>1964754696</reference><reference>1965498649</reference><reference>1976125436</reference><reference>1991247646</reference><reference>1992788999</reference><reference>2003574205</reference><reference>2008349102</reference><reference>2074977643</reference><reference>2093415968</reference><reference>2099486837</reference><reference>2105435765</reference><reference>2112377048</reference><reference>2118801004</reference><reference>2128732372</reference><reference>2129136850</reference><reference>2129703934</reference><reference>2131931054</reference><reference>2140970291</reference><reference>2149244483</reference><reference>2153926311</reference><reference>2158148130</reference><reference>2163835031</reference><reference>2745120342</reference></references><venue id="" type="">OOIS</venue><doi>10.1007/978-1-4471-1009-5_7</doi><keywords><keyword weight="0.67033">Active object</keyword><keyword weight="0.64995">Distributed object</keyword><keyword weight="0.5706">Object-oriented programming</keyword><keyword weight="0.55741">Programming paradigm</keyword><keyword weight="0.56173">Concurrency</keyword><keyword weight="0.45434">Computer science</keyword><keyword weight="0.53863">Object model</keyword><keyword weight="0.60677">Distributed concurrency control</keyword><keyword weight="0.63667">Concurrent object-oriented programming</keyword><keyword weight="0.4638">Distributed computing</keyword></keywords><publisher>Trinity College Dublin</publisher><abstract>This paper describes the rationale and design of a new distributed systems programming model based on events, constraints, and objects. The paper describes the inter-object communication or invocation mechanism, and the way in which concurrency, synchronisation, and timing properties are expressed and controlled. The invocation mechanism is unusual in that it is event-based. It encourages loose coupling among the objects and a high degree of encapsulation for each object. Concurrency, synchronisation, and timing properties are expressed in a uniform way using constraints which may be associated with objects and events.</abstract></paper>
<paper id="1574894409"><title>Optimizing Queries with Aggregate Views</title><year>1996</year><authors><author org="Hewlett-Packard Lab.#TAB#" id="2163909284">Surajit Chaudhuri</author><author org="IBM Almaden Research Center" id="2161168953">Kyuseok Shim</author></authors><n_citation>70</n_citation><doc_type>Conference</doc_type><references><reference>1488870204</reference><reference>1538786304</reference><reference>1761301028</reference><reference>1825341804</reference><reference>1988504473</reference><reference>2008116177</reference><reference>2087290458</reference><reference>2102387332</reference><reference>2122265344</reference><reference>2144829796</reference><reference>2153329411</reference><reference>2165674271</reference></references><venue id="1132593990" type="C">Extending Database Technology</venue><doi>10.1007/BFb0014151</doi><keywords><keyword weight="0.4481">Data mining</keyword><keyword weight="0.44856">Computer science</keyword><keyword weight="0.45782">Theoretical computer science</keyword><keyword weight="0.45068">Operator (computer programming)</keyword><keyword weight="0.40692">Predicate (grammar)</keyword><keyword weight="0.0">Enumeration algorithm</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Complex queries, with aggregates, views and nested subqueries are important in decision-support applications. Such queries are represented as multi-block queries where a query block may be a view definition containing aggregates or a correlated nested subquery. Beyond transformations that propagate predicates across blocks, the problem of optimizing such queries has not been addressed adequately. In this paper, we show how such queries can be optimized in a cost-based fashion. The crux of our solution is a careful treatment of group-by and aggregation operators that occur among views.</abstract></paper>
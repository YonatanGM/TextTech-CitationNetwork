<paper id="1541066169"><title>Rule-Based Transactional Object Migration over a Reflective Middleware</title><year>2001</year><authors><author org="Xerox Research Centre Europe" id="2165088218">Damián Arregui</author><author org="Xerox Research Centre Europe" id="1900258130">François Pacull</author><author org="Xerox Research Centre Europe" id="1976838389">Jutta Willamowski</author></authors><n_citation>11</n_citation><doc_type>Journal</doc_type><references><reference>1583265213</reference><reference>1980249022</reference><reference>2003700055</reference><reference>2103554070</reference><reference>2161307885</reference></references><venue id="106296714" type="J">Lecture Notes in Computer Science</venue><doi>10.1007/3-540-45518-3_10</doi><keywords><keyword weight="0.52896">Middleware</keyword><keyword weight="0.55401">Serialization</keyword><keyword weight="0.52909">Programming paradigm</keyword><keyword weight="0.53433">Object-oriented programming</keyword><keyword weight="0.45892">Computer science</keyword><keyword weight="0.50274">Mobile agent</keyword><keyword weight="0.52346">Component-based software engineering</keyword><keyword weight="0.53202">Code mobility</keyword><keyword weight="0.46612">Distributed computing</keyword><keyword weight="0.5003">Communications protocol</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Object migration is an often overlooked topic in distributed object-oriented platforms. Most common solutions provide data serialization and code mobility across several hosts. But existing mechanisms fall short in ensuring consistency when migrating objects, or agents, involved in coordinated interactions with each other, possibly governed by a multi-phase protocol. We propose an object migration scheme addressing this issue, implemented on top of the Coordination Language Facility (CLF). It exploits the particular combination of features in CLF: the resource-based programming paradigm and the communication protocol integrating a negotiation and a transaction phase. We illustrate through examples how our migration mechanism goes beyond classical solutions. It can be fine-tuned to consider different requirements and settings, and thus be adapted to a variety of situations</abstract></paper>
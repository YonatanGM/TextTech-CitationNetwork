<paper id="1752249128"><title>Building a bridge between pointer aliases and program dependences</title><year>1998</year><authors><author org="University of Chicago" id="2283240675">John L. Ross</author><author org="Tel‐Aviv University ," id="2132786051">Shmuel Sagiv</author></authors><n_citation>16</n_citation><doc_type>Conference</doc_type><references><reference>1484019856</reference><reference>1491178396</reference><reference>1503265404</reference><reference>1602885681</reference><reference>1710250545</reference><reference>1966449927</reference><reference>1970061809</reference><reference>1975914482</reference><reference>1984248430</reference><reference>1996094959</reference><reference>2002771912</reference><reference>2004419599</reference><reference>2009911326</reference><reference>2019709986</reference><reference>2023222549</reference><reference>2025554746</reference><reference>2030697178</reference><reference>2043555680</reference><reference>2045326928</reference><reference>2078944436</reference><reference>2087612811</reference><reference>2088126145</reference><reference>2098645109</reference><reference>2102440514</reference><reference>2111695742</reference><reference>2131135493</reference><reference>2135697103</reference><reference>2139356751</reference><reference>2144344516</reference><reference>2145913834</reference><reference>2147088720</reference><reference>2151360539</reference><reference>2152954816</reference></references><venue id="1136861413" type="C">European Symposium on Programming</venue><doi>10.1007/BFb0053573</doi><keywords><keyword weight="0.52272">Pointer (computer programming)</keyword><keyword weight="0.55489">Pointer analysis</keyword><keyword weight="0.48843">Formal language</keyword><keyword weight="0.46909">Programming language</keyword><keyword weight="0.47004">Computer science</keyword><keyword weight="0.55919">Compiler</keyword><keyword weight="0.5975">Optimizing compiler</keyword><keyword weight="0.45928">Theoretical computer science</keyword><keyword weight="0.52024">Alias analysis</keyword><keyword weight="0.59412">Program analysis</keyword><keyword weight="0.4985">Undecidable problem</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>In this paper we present a surprisingly simple reduction of the program dependence problem to the may-alias problem. While both problems are undecidable, providing a reduction between them has great practical importance. Program dependence information is used extensively in compiler optimizations, automatic program parallelizations, code scheduling for super-scale machines, and software engineering tools such as code slicers. When working with languages that support pointers and references, these systems are forced to make very conservative assumptions. This leads to many superfluous program dependences and limits compiler performance and the usability of software engineering tools. Fortunately, there are many algorithms for computing conservative approximations to the may-alias problem. The reduction has the important property of always computing conservative program dependences when used with a conservative may-alias algorithm. We believe that the simplicity of the reduction and the fact that it takes linear time may make it practical for realistic applications.</abstract></paper>
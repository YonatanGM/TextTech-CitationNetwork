<paper id="1853911989"><title>Extending JML Specifications with Temporal Logic</title><year>2002</year><authors><author org="Australian Nat. University" id="2160912903">Kerry Trentelman</author><author org="INRIA Sophia-Antipolis, France" id="2148094435">Marieke Huisman</author></authors><n_citation>37</n_citation><doc_type>Conference</doc_type><references><reference>1522984600</reference><reference>1544646281</reference><reference>1550487903</reference><reference>1984936841</reference><reference>1998490923</reference><reference>2090962365</reference><reference>2094160561</reference><reference>2095529767</reference><reference>2110050316</reference><reference>2135274583</reference><reference>2161825580</reference><reference>2170898576</reference></references><venue id="1191172908" type="C">Algebraic Methodology and Software Technology</venue><doi>10.1007/3-540-45719-4_23</doi><keywords><keyword weight="0.59758">Specification language</keyword><keyword weight="0.51614">Knowledge representation and reasoning</keyword><keyword weight="0.48556">Programming language</keyword><keyword weight="0.46221">Computer science</keyword><keyword weight="0.45377">Theoretical computer science</keyword><keyword weight="0.56277">Java Card</keyword><keyword weight="0.57221">Application programming interface</keyword><keyword weight="0.53471">Temporal logic</keyword><keyword weight="0.67221">Java Modeling Language</keyword><keyword weight="0.54318">Java</keyword><keyword weight="0.51591">Semantics</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>This paper proposes an extension oft he Java Modeling Language (JML) with temporal specifications. The extension is inspired by the patterns and specification language used within the Bandera project, and is especially tailored to specify properties of Java(Card) programs; for example, it allows the exceptional behaviour of methods to be specified. In the tradition of JML, the extension has been designed to be simple, easy and intuitive to use for software engineers. As an example, we show how the JML extension can be used to specify temporal aspects of the JavaCard API. Later, a semantics for the extension is discussed. We show how to translate a subset of the extension back into standard JML, thus allowing the re-use ofe xisting verification techniques for JML. For the u0027newu0027 part of the language, a trace-based semantics is given.</abstract></paper>
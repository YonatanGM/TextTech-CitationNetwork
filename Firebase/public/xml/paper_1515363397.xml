<paper id="1515363397"><title>Incremental Verification by Abstraction</title><year>2001</year><authors><author org="eVrimag" id="245516513">Yassine Lakhnech</author><author org="eVrimag" id="85442675">Saddek Bensalem</author><author org="Carnegie - Mellon University#TAB#" id="2952688929">Sergey Berezin</author><author org="SRI, International#TAB#" id="2091958867">Sam Owre</author></authors><n_citation>75</n_citation><doc_type>Conference</doc_type><references><reference>1484571639</reference><reference>1487396988</reference><reference>1497571013</reference><reference>1502837501</reference><reference>1517157359</reference><reference>1529461858</reference><reference>1540180001</reference><reference>1555814309</reference><reference>1570105559</reference><reference>1590336223</reference><reference>1592102986</reference><reference>1695437353</reference><reference>1783679080</reference><reference>1825148885</reference><reference>1936017528</reference><reference>1978358700</reference><reference>1987073197</reference><reference>2014764321</reference><reference>2025554746</reference><reference>2027755003</reference><reference>2043100293</reference><reference>2071152819</reference><reference>2080593426</reference><reference>2098817244</reference><reference>2158395308</reference><reference>2535608263</reference></references><venue id="1159071770" type="C">Tools and Algorithms for Construction and Analysis of Systems</venue><doi>10.1007/3-540-45319-9_8</doi><keywords><keyword weight="0.49578">Atomic formula</keyword><keyword weight="0.0">Model matching</keyword><keyword weight="0.68086">Functional verification</keyword><keyword weight="0.47843">Programming language</keyword><keyword weight="0.47559">Abstraction</keyword><keyword weight="0.46935">Computer science</keyword><keyword weight="0.47365">Theoretical computer science</keyword><keyword weight="0.67077">Runtime verification</keyword><keyword weight="0.69224">High-level verification</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We present a methodology for constructing abstractions and refining them by analyzing counter-examples. We also present a uniform verification method that combines abstraction, model-checking and deductive verification in a novel way. In particular, it allows and shows how to use the set of reachable states of the abstract system in a deductive proof even when the abstract model does not satisfy the specification and when it simulates the concrete system with respect to a weaker simulation notion than Milneru0027s.</abstract></paper>
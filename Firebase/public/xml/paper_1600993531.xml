<paper id="1600993531"><title>Modeling Software Architecutes and Styles with Graph Grammars and Constraint Solving</title><year>1999</year><authors><author org="Universidad de Buenos Aires." id="2166895911">Dan Hirsch</author><author org="Università dell’Aquila" id="2242511651">Paola Inverardi</author><author org="Universita di Pisa" id="1970207042">Ugo Montanari</author></authors><n_citation>51</n_citation><doc_type>Conference</doc_type><references><reference>1580483840</reference><reference>1586572263</reference><reference>1909063750</reference><reference>1967400027</reference><reference>2024875518</reference><reference>2036929339</reference><reference>2077318760</reference><reference>2096937604</reference><reference>2102296762</reference><reference>2135670602</reference><reference>2162366870</reference><reference>2984454117</reference></references><venue id="1130478978" type="C">IEEE/IFIP International Conference on Software Architecture</venue><doi>10.1007/978-0-387-35563-4_8</doi><keywords><keyword weight="0.50034">Rule-based machine translation</keyword><keyword weight="0.0">Graph</keyword><keyword weight="0.44874">Architecture</keyword><keyword weight="0.47132">Programming language</keyword><keyword weight="0.46443">Computer science</keyword><keyword weight="0.47562">Theoretical computer science</keyword><keyword weight="0.48622">Software</keyword><keyword weight="0.58962">Graph rewriting</keyword><keyword weight="0.53785">Software architecture</keyword><keyword weight="0.47418">Control reconfiguration</keyword></keywords><publisher>Kluwer, B.V.</publisher><abstract>A software architecture style is a class of architectures exhibiting a common pattern. The description of a style must include the structure model of the components and their interactions (i.e., structural topology), the laws governing the dynamic changes in the architecture, and the communication pattern. A simple and natural way to describe a system is by using graphs, and as an extension of this, by using grammars to describe styles. The construction and dynamic evolution of the style will be represented as context-free productions and graph rewriting. To model the evolution of the system we use techniques of constraint solving already applied in the representation of distributed systems. From this approach we obtain an intuitive way to model systems, and a unique language to describe the style (but still a clear separation of coordination and configuration). With these we have a direct way of following the evolution of the system and proving its properties.</abstract></paper>
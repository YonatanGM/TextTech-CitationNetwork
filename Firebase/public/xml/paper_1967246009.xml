<paper id="1967246009"><title>Piecemeal legacy migrating with an architectural pattern language: a case study</title><year>2002</year><authors><author org="Specification of Software Systems, University of Essen, Germany#TAB#" id="2250860430">M. Goedicke</author><author org="Specification of Software Systems, University of Essen, Germany#TAB#" id="2344120076">U. Zdun</author></authors><n_citation>28</n_citation><doc_type>Journal</doc_type><references><reference>46504127</reference><reference>369868522</reference><reference>1499332970</reference><reference>1502457987</reference><reference>1566312660</reference><reference>1581138707</reference><reference>1843304713</reference><reference>1910673522</reference><reference>2021400450</reference><reference>2023453398</reference><reference>2088520036</reference><reference>2110001365</reference><reference>2128196951</reference><reference>2138363365</reference><reference>2167500728</reference></references><venue id="62796702" type="J">Journal of Software Maintenance and Evolution: Research and Practice</venue><doi>10.1002/smr.243</doi><keywords><keyword weight="0.48721">Architecture</keyword><keyword weight="0.0">Large applications</keyword><keyword weight="0.45825">Software engineering</keyword><keyword weight="0.44001">Systems engineering</keyword><keyword weight="0.45124">Computer science</keyword><keyword weight="0.46519">Reuse</keyword><keyword weight="0.46915">Implementation</keyword><keyword weight="0.55427">Pattern language</keyword><keyword weight="0.4446">Emerging technologies</keyword><keyword weight="0.60793">Architectural pattern</keyword><keyword weight="0.47585">Sketch</keyword></keywords><publisher>John Wiley &amp; Sons, Inc.</publisher><abstract>Numerous large applications that have evolved over many years are well-functioning and reliable, but have severe problems regarding flexibility and reuse. Due to the many fixes that were applied in a systemu0027s lifetime, it is often hard to customize, change or exchange system parts. Therefore, it is problematic to migrate such systems to a more flexible architecture or to new technologies. The document archive/retrieval system, discussed in this article, is an example of a large C system that had such problems. As a solution, we will sketch an architectural pattern language that involves patterns well-suited for a piecemeal migration process. The patterns aim at building and composing highly flexible black-box component architectures with an object-oriented glueing layer. We present a re-engineering case study for the document archive/retrieval system based on these patterns. The patterns are used to wrap the existing C implementations and integrate them with an object system. Moreover, the patterns introduce flexibility hooks into the hot spots of the architecture and let components define their required environment. This enables an easier future evolution of the system. The case study demonstrates a pattern language as an approach for piecemeal legacy migration apart from implementation details.</abstract></paper>
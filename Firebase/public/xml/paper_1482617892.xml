<paper id="1482617892"><title>A Hierarchical Approach to Learning the Boolean Multiplexer Function</title><year>1991</year><authors><author org="Computer Science Department, Stanford University, Stanford, CA 94305 USA, 415-941-0336" id="2141641810">John R. Koza</author></authors><n_citation>32</n_citation><doc_type>Conference</doc_type><references><reference>13101954</reference><reference>138562460</reference><reference>184098108</reference><reference>1482827835</reference><reference>1521475723</reference><reference>1555269426</reference><reference>1602713545</reference><reference>1606791384</reference><reference>1607045920</reference><reference>1997272161</reference><reference>2018642704</reference><reference>2106489684</reference><reference>2149706766</reference><reference>2151163048</reference><reference>2481560098</reference></references><venue id="1159491267" type="C">Foundations of Genetic Algorithms</venue><doi>10.1016/B978-0-08-050684-5.50014-8</doi><keywords><keyword weight="0.5301">Population</keyword><keyword weight="0.46445">Computer science</keyword><keyword weight="0.49036">Multiplexer</keyword><keyword weight="0.70578">Genetic programming</keyword><keyword weight="0.69758">Symbolic programming</keyword><keyword weight="0.53644">Computer program</keyword><keyword weight="0.6948">Genetic representation</keyword><keyword weight="0.47262">Artificial intelligence</keyword><keyword weight="0.67711">Evolutionary programming</keyword><keyword weight="0.46182">Machine learning</keyword></keywords><publisher>Elsevier</publisher><abstract>Abstract This paper describes the recently developed genetic programming paradigm which genetically breeds populations of computer programs to solve problems. In genetic programming, the individuals in the population are hierarchical compositions of functions and arguments. Each of these individual computer programs is evaluated for its fitness in handling the problem environment. The size and shape of the computer program needed to solve the problem is not predetermined by the user, but instead emerges from the simulated evolutionary process driven by fitness. In this paper, the operation of the genetic programming paradigm is illustrated with the problem of learning the Boolean 11-multiplexer function.</abstract></paper>
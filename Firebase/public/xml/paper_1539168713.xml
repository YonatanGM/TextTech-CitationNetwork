<paper id="1539168713"><title>Improved Static Multiprocessor Scheduling using Cyclic Task Graphs: A Genetic Approach</title><year>1997</year><authors><author org="Parallel, Emergent and Distributed Architecture Laboratory (PEDAL) Department of Computer Science, The University of Reading Reading, RG6 6AY, United Kingdom" id="140208838">Frode Eika Sandnes</author><author org="Parallel, Emergent and Distributed Architecture Laboratory (PEDAL) Department of Computer Science, The University of Reading Reading, RG6 6AY, United Kingdom" id="1858451556">Graham M. Megson</author></authors><n_citation>16</n_citation><doc_type>Conference</doc_type><references><reference>1589943916</reference><reference>1639032689</reference><reference>1952364572</reference><reference>2015261337</reference><reference>2023449641</reference><reference>2031321843</reference><reference>2095265034</reference><reference>2118514759</reference><reference>2124903056</reference><reference>2125713266</reference><reference>2142183404</reference><reference>2154980792</reference></references><venue id="1195800536" type="C">Parallel Computing</venue><doi>10.1016/S0927-5452(98)80092-0</doi><keywords><keyword weight="0.0">Graph</keyword><keyword weight="0.44695">Digital signal processing</keyword><keyword weight="0.5694">Multiprocessor scheduling</keyword><keyword weight="0.45238">Computer science</keyword><keyword weight="0.49416">Load balancing (computing)</keyword><keyword weight="0.48586">Scheduling (computing)</keyword><keyword weight="0.45831">Parallel computing</keyword><keyword weight="0.46427">Theoretical computer science</keyword><keyword weight="0.47766">Multiprocessing</keyword><keyword weight="0.53678">Schedule</keyword><keyword weight="0.4881">Genetic algorithm</keyword></keywords><publisher>Elsevier</publisher><abstract>Abstract Genetic algorithms have successfully been applied to multiprocessor task graph scheduling. In these previous attempts the schedules are constructed from directed acyclic task graphs. However, recurrent applications such as real-time control and digital signal processing can be expressed as directed cyclic task graphs. This paper presents a method for transforming a cyclic task graph into several alternate acyclic task graphs, The benefits of this are demonstrated through an example where the task graphs become easier to schedule through restructuring. Thus, the new task graphs result in better load balancing and less inter-processor traffic than the acyclic task graphs traditionally used. A genetic algorithm has been used to search for the task graph and schedule that best fit a particular application and hardware configuration. The results are encouraging.</abstract></paper>
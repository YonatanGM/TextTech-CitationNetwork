<paper id="1982262311"><title>Towards imperative modules: reasoning about invariants and sharing of mutable state</title><year>2004</year><authors><author org="Stevens Institute of Technology, Hoboken, NJ, USA;" id="2237376846">D.A. Naumann</author><author org="Microsoft Research,#TAB#" id="2236272296">M. Barnett</author></authors><n_citation>25</n_citation><doc_type>Conference</doc_type><references><reference>1489778371</reference><reference>1504633425</reference><reference>1510845095</reference><reference>1542792783</reference><reference>1556422878</reference><reference>1568894201</reference><reference>1573044584</reference><reference>1593874741</reference><reference>1872021412</reference><reference>1903525885</reference><reference>1989010503</reference><reference>1998070736</reference><reference>2013368693</reference><reference>2035529004</reference><reference>2039330009</reference><reference>2069107692</reference><reference>2097185397</reference><reference>2103591546</reference><reference>2104204098</reference><reference>2108379418</reference><reference>2128180740</reference><reference>2130111506</reference><reference>2132138104</reference><reference>2136371406</reference><reference>2137628566</reference><reference>2138652462</reference><reference>2139722010</reference><reference>2151131364</reference><reference>2156428492</reference><reference>2160456755</reference><reference>2171685273</reference><reference>2789839712</reference></references><venue id="1171002971" type="C">Logic in Computer Science</venue><doi>10.1109/LICS.2004.49</doi><keywords><keyword weight="0.45797">Programming language</keyword><keyword weight="0.54797">Method</keyword><keyword weight="0.53034">Object-oriented programming</keyword><keyword weight="0.45775">Computer science</keyword><keyword weight="0.0">Shared object</keyword><keyword weight="0.45487">Theoretical computer science</keyword><keyword weight="0.50925">Formal specification</keyword><keyword weight="0.43837">Invariant (mathematics)</keyword><keyword weight="0.48004">Modular design</keyword><keyword weight="0.0">Encapsulation (computer programming)</keyword><keyword weight="0.48463">Formal verification</keyword></keywords><publisher>IEEE Computer Society</publisher><abstract>Imperative and object-oriented programs make ubiquitous use of shared mutable objects. Updating a shared object can and often does transgress a boundary that was supposed to be established using static constructs such as a class with private fields. This paper shows how auxiliary fields can be used to express two state-dependent encapsulation disciplines: ownership, a kind of separation, and local co-dependence, a kind of sharing. A methodology is given for specification and modular verification of encapsulated object invariants and shown sound for a class-based language.</abstract></paper>
<paper id="1519659352"><title>Update-Programs Can Update Programs</title><year>1996</year><authors><author org="DM, U. Évora and CITIA" id="2304619042">José Júlio Alferes</author><author org="DCS and CITIA" id="2104852094">Luís Moniz Pereira</author></authors><n_citation>25</n_citation><doc_type /><references><reference>175258934</reference><reference>1485261310</reference><reference>1501726193</reference><reference>1504608774</reference><reference>1593260998</reference><reference>1594099509</reference><reference>1968513265</reference><reference>1971492645</reference><reference>1979064340</reference><reference>1986329319</reference><reference>2072373191</reference><reference>2090798572</reference><reference>2094341147</reference><reference>2118900391</reference><reference>2121111746</reference><reference>2963140379</reference></references><venue id="" type="">NMELP '96 Selected papers from the Non-Monotonic Extensions of Logic Programming</venue><doi>10.1007/BFb0023804</doi><keywords><keyword weight="0.44478">Programming language</keyword><keyword weight="0.4535">Computer science</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>In the recent literature the issue of program change via updating rules (also known as revision rules) has been reduced to the issue of obtaining a new set of models, by means of the update rules, from each of the models of an initial program. Any program whose models are exactly the new set of models will count as an update of the original program. Following the classical approaches to theory updating, it is of course essential to start by specifying precisely how a programu0027s models are to change, before even attempting to specify program change. But to stop there is to go only halfway.</abstract></paper>
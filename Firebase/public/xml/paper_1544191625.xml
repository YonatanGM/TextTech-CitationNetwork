<paper id="1544191625"><title>Principles of Database Conceptual Design</title><year>1978</year><authors><author org="Computer Corporation of America" id="2098743930">John Miles Smith</author><author org="Computer Corporation of America" id="2097408658">Diane C. P. Smith</author></authors><n_citation>29</n_citation><doc_type /><references><reference>2029406036</reference><reference>2039601877</reference><reference>2124141583</reference><reference>2156076209</reference><reference>2165467455</reference></references><venue id="" type="">Proceedings of the NYU Symposium on Data Base Design Techniques I: Requirements and Logical Structures</venue><doi>10.1007/3-540-11214-6_6</doi><keywords><keyword weight="0.54962">Conceptual design</keyword><keyword weight="0.62887">Conceptual schema</keyword><keyword weight="0.46462">Programming language</keyword><keyword weight="0.54567">Abstraction</keyword><keyword weight="0.45744">Computer science</keyword><keyword weight="0.60424">Conceptual graph</keyword><keyword weight="0.62147">Abstract syntax</keyword><keyword weight="0.48986">Hierarchy</keyword><keyword weight="0.43041">Database</keyword><keyword weight="0.56033">Conceptual model (computer science)</keyword><keyword weight="0.53085">Semantics</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Criteria and methodologies for the conceptual design of databases, particularly in large and sophisticated applications, are addressed. For a design to be understandable to user and designer alike, intuitive methods for abstracting concepts from a mass of detail must be employed. Two abstraction methods are particularly important â€” aggregation and generalization. Aggregation forms a concept by abstracting a relationship between other concepts (called components). Generalization forms a concept by abstracting a class of other concepts (called categories). The principle of "object relativity" is essential for the successful integration of abstractions. This principle states that individuals, categories, relationships and components are just different ways of viewing the same abstract objects. Using this principle a design may be hierarchically organized into independently meaningful abstractions. An "abstract syntax" is introduced to specify these abstraction hierarchies. An advantage of this abstract syntax is that some concepts do not have to be arbitrarily classified as "roles". The principle of "individual preservation" is a minimal requirement for maintaining the semantics of aggregation and generalization. It states that every user-invokeable operation must preserve the integrity of individuals. A methodology for designing an abstract syntax specification is outlined. The simplicity of this methodology is directly due to the principles of object relativity and individual preservation.</abstract></paper>
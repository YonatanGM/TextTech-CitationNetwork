<paper id="1824742276"><title>SCENE: a service composition execution environment supporting dynamic changes disciplined through rules</title><year>2006</year><authors><author org="CEFRIEL, Milano, Italy#TAB#" id="2155521484">Massimiliano Colombo</author><author org="CEFRIEL, Milano, Italy#TAB#" id="2110075340">Elisabetta Di Nitto</author><author org="CEFRIEL, Milano, Italy#TAB#" id="2617848466">Marco Mauri</author></authors><n_citation>71</n_citation><doc_type>Conference</doc_type><references><reference>1479758699</reference><reference>1510794891</reference><reference>1660077701</reference><reference>1821563272</reference><reference>1992133864</reference><reference>2007221630</reference><reference>2103087994</reference><reference>2116919285</reference><reference>2134494017</reference></references><venue id="1158589615" type="C">International Conference on Service Oriented Computing</venue><doi>10.1007/11948148_16</doi><keywords><keyword weight="0.51392">Service level</keyword><keyword weight="0.46122">Computer science</keyword><keyword weight="0.4902">Decision support system</keyword><keyword weight="0.4376">Real-time computing</keyword><keyword weight="0.0">Service composition</keyword><keyword weight="0.59217">Business Process Execution Language</keyword><keyword weight="0.0">Service oriented</keyword><keyword weight="0.46463">Negotiation</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Service compositions are created by exploiting existing component services that are, in general, out of the control of the composition developer. The challenge nowadays is to make such compositions able to dynamically reconfigure themselves in order to address the cases when the component services do not behave as expected and when the execution context changes. We argue that the problem has to be tackled at two levels: on the one side, the runtime platform should be flexible enough to support the selection of alternative services, the negotiation of their service level agreements, and the partial replanning of a composition. On the other side, the language used to develop the composition should support the designer in defining the constraints and conditions that regulate selection, negotiation, and replanning actions at runtime. In this paper we present the SCENE platform that partially addresses the above issues by offering a language for composition design that extends the standard BPEL language with rules used to guide the execution of binding and re-binding self-reconfiguration operations.</abstract></paper>
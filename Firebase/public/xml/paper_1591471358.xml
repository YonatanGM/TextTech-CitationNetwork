<paper id="1591471358"><title>Feature-oriented programming: A fresh look at objects</title><year>1997</year><authors><author org="Technische Universität München;" id="2231077129">Christian Prehofer</author></authors><n_citation>355</n_citation><doc_type>Conference</doc_type><references><reference>44345088</reference><reference>136426754</reference><reference>1530263592</reference><reference>1533281337</reference><reference>1550373940</reference><reference>1606263019</reference><reference>1644882639</reference><reference>1739798036</reference><reference>2001098379</reference><reference>2043493366</reference><reference>2045723688</reference><reference>2070552116</reference><reference>2115680394</reference><reference>2133546079</reference><reference>2138659327</reference></references><venue id="1177184315" type="C">European Conference on Object-Oriented Programming</venue><doi>10.1007/BFb0053389</doi><keywords><keyword weight="0.48064">Parameterized complexity</keyword><keyword weight="0.45772">Programming language</keyword><keyword weight="0.54598">Object-oriented programming</keyword><keyword weight="0.53126">Programming paradigm</keyword><keyword weight="0.4472">Computer science</keyword><keyword weight="0.46316">Theoretical computer science</keyword><keyword weight="0.48684">Class hierarchy</keyword><keyword weight="0.50405">Instance variable</keyword><keyword weight="0.58679">Feature model</keyword><keyword weight="0.53855">Java</keyword><keyword weight="0.53175">Feature-oriented programming</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We propose a new model for flexible composition of objects from a set of features. Features are similar to (abstract) subclasses, but only provide the core functionality of a (sub)class. Overwriting other methods is viewed as resolving feature interactions and is specified separately for two features at a time. This programming model allows to compose features (almost) freely in a way which generalizes inheritance and aggregation. For a set of n features, an exponential number of different feature combinations is possible, assuming a quadratic number of interaction resolutions. We present the feature model as an extension of Java and give two translations to Java, one via inheritance and the other via aggregation. We further discuss parameterized features, which work nicely with our feature model and can be translated into Pizza, an extension of Java.</abstract></paper>
<paper id="1578801263"><title>Event Structure Semantics for CCS and Related Languages</title><year>1982</year><authors><author org="Aarhus University," id="88824219">Glynn Winskel</author></authors><n_citation>202</n_citation><doc_type>Conference</doc_type><references><reference>1978840985</reference><reference>1991052229</reference><reference>2006244393</reference><reference>2134326845</reference><reference>2137865376</reference><reference>2140919105</reference></references><venue id="1141821850" type="C">International Colloquium on Automata, Languages and Programming</venue><doi>10.1007/BFb0012800</doi><keywords><keyword weight="0.50069">Subcategory</keyword><keyword weight="0.4725">Synchronization</keyword><keyword weight="0.66661">Operational semantics</keyword><keyword weight="0.44989">Programming language</keyword><keyword weight="0.43396">Computer science</keyword><keyword weight="0.56042">Concurrency</keyword><keyword weight="0.6946">Denotational semantics</keyword><keyword weight="0.5017">Functor</keyword><keyword weight="0.4503">Theoretical computer science</keyword><keyword weight="0.58302">Event structure</keyword><keyword weight="0.52164">Semantics</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>We give denotational semantics to a wide range of parallel programming languages based on the idea of Milner’s CCS [Mil80a], that processes communicate by events of mutual synchronization. Processes are denoted by labeled event structures. Event structures represent concurrency rather directly, as in net theory [Bra80]. The semantics does not simulate concurrency by non-deterministic interleaving. We first define a category E of event structures [NPW79, NPW81, Win80] appropriate to synchronized communication. The category bears a natural relation to a subcategory of trees though an interleaving functor; so results transfer to trees neatly. Then we introduce the concept of a synchronization algebra (S.A.) on labels by adopting an idea of Milner [Mil80b]. An S.A. specifies how two processes synchronize via labels on their events. From each S.A., L, we derive a category EL of labeled event structures with natural operations for composing labeled event structures. In particular the parallel composition L is derived from the product in E. We obtain semantics for a class of CCS-like languages by varying the S.A.. Synchronization algebras are very general so the class is very broad, handling synchrony and asynchrony in a common framework. As a corollary we get an event structure semantics for CCS. When interleaved our semantics is Milner’s synchronization/communication tree semantics [Mil80a]. However our semantics distinguishes more terms as it reflects concurrency. Event structure semantics is at a rather basic level of abstraction but should support all abstract notions of equivalence (see [Mil80a] for examples), including those which take concurrency into account.</abstract></paper>
<paper id="1583539488"><title>COVAMOF: A framework for modeling variability in software product families</title><year>2004</year><authors><author org="University of Groningen" id="2006438081">Marco Sinnema</author><author org="University of Groningen" id="297124487">Sybren Deelstra</author><author org="University of Groningen" id="2608156381">Jos Nijhuis</author><author org="University of Groningen" id="2271217432">Jan Bosch</author></authors><n_citation>226</n_citation><doc_type>Conference</doc_type><references><reference>1496612258</reference><reference>1500563148</reference><reference>1539724948</reference><reference>1554977156</reference><reference>1984544455</reference><reference>2023546887</reference><reference>2114152285</reference><reference>2121789613</reference><reference>2125579889</reference><reference>2129389291</reference><reference>2168663075</reference><reference>2294861651</reference><reference>2464949168</reference></references><venue id="1190643002" type="C">Software Product Lines</venue><doi>10.1007/978-3-540-28630-1_12</doi><keywords><keyword weight="0.43484">Abstraction</keyword><keyword weight="0.45006">Computer science</keyword><keyword weight="0.45155">Theoretical computer science</keyword><keyword weight="0.51195">Software</keyword><keyword weight="0.59701">Software product line</keyword><keyword weight="0.43681">Modular design</keyword><keyword weight="0.0">Industrial software</keyword><keyword weight="0.0">Product family</keyword><keyword weight="0.58497">Software development</keyword><keyword weight="0.49889">Hierarchical organization</keyword></keywords><publisher>Springer</publisher><abstract>A key aspect of variability management in software product families is the explicit representation of the variability. Experiences at several industrial software development companies have shown that a software variability model should do four things: (1) uniformly represent variation points as first-class entities in all abstraction layers (ranging from features to code), (2) allow for the hierarchical organization of the variability, (3) allow for the first-class representation of simple (i.e., one-to-one) and complex (i.e., n-to-m) dependencies, and (4) allow for modeling the relations between dependencies. Existing variability modeling approaches support the first two requirements, but lack support for the latter two. The contribution of this paper is a framework for variability modeling—COVAMOF—that provides support for all four requirements.</abstract></paper>
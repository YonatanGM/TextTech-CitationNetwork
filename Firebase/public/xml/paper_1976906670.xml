<paper id="1976906670"><title>Making reuse cost-effective</title><year>1991</year><authors><author org="Nat. Sci. Found., Washington, DC, USA" id="2222760468">B.H. Barns</author><author org="" id="2311863007">T.B. Bollinger</author></authors><n_citation>138</n_citation><doc_type>Journal</doc_type><references><reference>2032523277</reference><reference>2065985062</reference><reference>2082810026</reference><reference>2135093973</reference><reference>2154614601</reference></references><venue id="6725529" type="J">IEEE Software</venue><doi>10.1109/52.62928</doi><keywords><keyword weight="0.0">Human Problem Solving</keyword><keyword weight="0.62258">Domain engineering</keyword><keyword weight="0.45755">Software engineering</keyword><keyword weight="0.45006">Systems engineering</keyword><keyword weight="0.44777">Computer science</keyword><keyword weight="0.674">Reuse</keyword><keyword weight="0.44213">Assertion</keyword><keyword weight="0.50967">Average cost</keyword><keyword weight="0.46035">Software</keyword></keywords><publisher>IEEE</publisher><abstract>Until reuse is better understood, significant reductions in the cost of building large systems will not be possible. This assertion is based primarily on the belief that the defining characteristic of good reuse is not the reuse of software per se, but the reuse of human problem solving. Analytical approaches for making good reuse investments are suggested in terms of increasing a quality-of-investment measure, Q, which is simply the ratio of reuse benefits to reuse investments. The first strategy for increasing Q is to increase the level of consumer reuse. The second technique for increasing Q is to reduce the average cost of reusing work products by making them easy and inexpensive to reuse. The third strategy is to reduce investment costs. Reuse strategies, and reuse and parameterizations, are discussed. u003e</abstract></paper>
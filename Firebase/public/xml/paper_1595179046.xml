<paper id="1595179046"><title>Model Checking of Unrestricted Hierarchical State Machines</title><year>2001</year><authors><author org="Lucent Technologies'" id="2016987025">Michael Benedikt</author><author org="Lucent Technologies'" id="2634395717">Patrice Godefroid</author><author org="University of Wisconsin" id="341386833">Thomas W. Reps</author></authors><n_citation>59</n_citation><doc_type>Conference</doc_type><references><reference>260642817</reference><reference>1491036809</reference><reference>1504739534</reference><reference>1505355949</reference><reference>1520729440</reference><reference>1589224558</reference><reference>1590891429</reference><reference>1655990431</reference><reference>1905205673</reference><reference>2030166143</reference><reference>2074070820</reference><reference>2080573945</reference><reference>2088140535</reference><reference>2093080079</reference><reference>2098645109</reference><reference>2151670874</reference><reference>2158487182</reference></references><venue id="1141821850" type="C">International Colloquium on Automata, Languages and Programming</venue><doi>10.1007/3-540-48224-5_54</doi><keywords><keyword weight="0.49883">Kripke structure</keyword><keyword weight="0.44541">Context-free language</keyword><keyword weight="0.5474">Model checking</keyword><keyword weight="0.45251">Computer science</keyword><keyword weight="0.571">Finite-state machine</keyword><keyword weight="0.4596">Theoretical computer science</keyword><keyword weight="0.48981">Software system</keyword><keyword weight="0.48189">Reachability problem</keyword><keyword weight="0.47913">Abstract machine</keyword><keyword weight="0.47062">Recursion</keyword><keyword weight="0.45098">Distributed computing</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>Hierarchical State Machines (HSMs) are a natural model for representing the behavior of software systems. In this paper, we investigate a variety of model-checking problems for an extension of HSMs in which state machines are allowed to call each other recursively.</abstract></paper>
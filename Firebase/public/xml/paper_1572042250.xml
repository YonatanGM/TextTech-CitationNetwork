<paper id="1572042250"><title>Weaving multiple aspects in sequence diagrams</title><year>2007</year><authors><author org="IRISA/INRIA, Rennes-Cedex, France" id="2152184369">Jacques Klein</author><author org="IRISA/INRIA, Rennes-Cedex, France" id="2030045634">Franck Fleurey</author><author org="IRISA, Université de Rennes 1, Rennes cedex, France#TAB#" id="2807702182">Jean-Marc Jézéquel</author></authors><n_citation>57</n_citation><doc_type>Conference</doc_type><references><reference>1532079015</reference><reference>1553047397</reference><reference>1554081253</reference><reference>1599611955</reference><reference>1610570299</reference><reference>1855341394</reference><reference>1967389447</reference><reference>1972746808</reference><reference>1978613757</reference><reference>1992036716</reference><reference>2004191252</reference><reference>2090727480</reference><reference>2111141292</reference><reference>2112970105</reference><reference>2115248168</reference><reference>2167049910</reference><reference>2897840903</reference><reference>2914171696</reference></references><venue id="1194005070" type="C">Aspect-Oriented Software Development</venue><doi>10.1007/978-3-540-75162-5_7</doi><keywords><keyword weight="0.51786">Sequence diagram</keyword><keyword weight="0.46838">Weaving</keyword><keyword weight="0.45864">Programming language</keyword><keyword weight="0.73171">Join point</keyword><keyword weight="0.49229">Model-driven architecture</keyword><keyword weight="0.45777">Computer science</keyword><keyword weight="0.42138">Real-time computing</keyword><keyword weight="0.4792">Code generation</keyword><keyword weight="0.68449">Pointcut</keyword><keyword weight="0.53593">Kermeta</keyword><keyword weight="0.46532">Semantics</keyword></keywords><publisher>Springer Berlin Heidelberg</publisher><abstract>Handling aspects within models looks promising for managing crosscutting concerns early in the software life-cycle, up from programming to design, analysis and even requirements. At the modeling level, even complex behavioral aspects can easily be described for instance as pairs of sequence diagrams: one for the pointcut specifying the behavior to detect, and the second one for an advice representing the wanted behavior at the join point. While this is fine for informal documentation purposes, or even intuitive enough when a single aspect has to be woven, a more precise semantics of both join point detection and advice weaving is needed for using these modeling artifacts for Model Driven Engineering activities such as code generation or test synthesis. This paper proposes various interpretations for pointcuts that allow multiple behavioral aspects to be statically woven. The idea is to allow join points to match a pointcut even when some extra-messages occur in between. However, with this new way of specifying join points, the composition of the advice with the detected part cannot any longer be just a replacement of the detected part by the advice. We have to consider the events (or the messages) of the join point, but also the events which occur between them, and merge them with the behavior specified within the advice. We thus also propose a formal definition of a new merge operator, and describe its implementation on the Kermeta platform.</abstract></paper>
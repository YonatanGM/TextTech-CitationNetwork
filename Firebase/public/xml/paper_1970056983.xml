<paper id="1970056983"><title>Highly resilient correctors for polynomials</title><year>1992</year><authors><author org="Department of Computer Science, University of California Berkeley, CA, USA." id="2776863972">Peter Gemmell</author><author org="Department of Computer Science, University of California Berkeley, CA, USA." id="466258520">Madhu Sudan</author></authors><n_citation>137</n_citation><doc_type>Journal</doc_type><references><reference>1594962164</reference><reference>1596412683</reference><reference>1607280525</reference><reference>2033361557</reference><reference>2094878497</reference><reference>2100061495</reference><reference>2154317379</reference></references><venue id="147953040" type="J">Information Processing Letters</venue><doi>10.1016/0020-0190(92)90195-2</doi><keywords><keyword weight="0.43988">Autocorrection</keyword><keyword weight="0.47117">Discrete mathematics</keyword><keyword weight="0.5475">Finite field</keyword><keyword weight="0.51345">Program transformation</keyword><keyword weight="0.59378">Polynomial</keyword><keyword weight="0.4198">Unit cost</keyword><keyword weight="0.4529">Fault tolerance</keyword><keyword weight="0.0">Multivariate polynomials</keyword><keyword weight="0.44325">Mathematics</keyword><keyword weight="0.50343">Theory of computation</keyword></keywords><publisher>Elsevier North-Holland, Inc.</publisher><abstract>We consider the problem of correcting programs that compute multivariate polynomials over large finite fields and give an efficient procedure to transform any program that computes a multivariate polynomial ⨍ correctly on a 12+δ fraction of its inputs (δu003e0) into a randomized program that computes ⨍ correctly on every input with high probability. This shows that programs computing polynomials are “resilient” to a high fraction of errors. The resilience shown in this paper is better than that of the previously known correction procedures and is close to the information theoretic optimum. The running time of the correction procedure is polynomial in the degree of ⨍, the number of variables, and 1δ, where calls to the incorrect program are assessed a unit cost per call. An important consequence of this result is that the nxn permanent is resilient to errors of up to 12−p(n) for any polynomial p(n).</abstract></paper>
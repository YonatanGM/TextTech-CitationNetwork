<paper id="1480905303"><title>Efficient Indexing for Constraint and Temporal Databases</title><year>1997</year><authors><author org="Bell-Labs" id="2162647527">Sridhar Ramaswamy</author></authors><n_citation>46</n_citation><doc_type>Conference</doc_type><references><reference>25426087</reference><reference>1554228447</reference><reference>1820949069</reference><reference>1994101999</reference><reference>2004788871</reference><reference>2085088576</reference><reference>2118269922</reference><reference>2131620262</reference><reference>2136963423</reference><reference>2151135734</reference><reference>2161694911</reference><reference>2165467455</reference><reference>2901608006</reference></references><venue id="1165285842" type="C">International Conference on Database Theory</venue><doi>10.1007/3-540-62222-5_61</doi><keywords><keyword weight="0.47754">Block size</keyword><keyword weight="0.52936">Data structure</keyword><keyword weight="0.47554">Data modeling</keyword><keyword weight="0.45672">Discrete mathematics</keyword><keyword weight="0.43054">Computer science</keyword><keyword weight="0.49967">Linear space</keyword><keyword weight="0.50788">Search engine indexing</keyword><keyword weight="0.51431">Temporal database</keyword><keyword weight="0.48898">Database theory</keyword><keyword weight="0.48196">Spatiotemporal database</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We examine new I/O-efficient techniques for indexing problems in constraint and temporal data models. We present algorithms for these problems that are considerably simpler than previous solutions. Our solutions are unique in the sense that they only use B+-trees rather than special-purpose data structures. Indexing for many general constraint data models can be reduced to interval intersection. We present a new algorithm for this problem using a query-time/space tradeoff, which achieves the optimal query time O(logB n+t/B) I/Ou0027s in linear space O(n/B) using B+-trees. (Here, n is the number of intervals, t the number of intervals in the output of a query, and B the disk block size.) It is easy to update this data structure, but small worst-case bounds do not seem possible. Previous approaches have achieved these bounds but are fairly complex and rely mostly on reducing the interval intersection problem to special cases of two-dimensional search. Some of them can also handle updates in O(logB n) I/Ou0027s amortized. Indexing in many temporal models becomes a generalization of interval management, where each temporal object is characterized by an interval and a key. There are many different ways of querying these objects, and we achieve optimal bounds for many of these queries. These bounds are achieved using a modification of the technique used for the constraint indexing problem. Our technique is much simpler than other techniques that have been used for achieving similar bounds.</abstract></paper>
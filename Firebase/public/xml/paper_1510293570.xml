<paper id="1510293570"><title>Inferring LISP programs from examples</title><year>1975</year><authors><author org="Artificial Intelligence Laboratory, Department of Computer Science, Stanford University, Stanford, California" id="2440983750">David E. Shaw</author><author org="Artificial Intelligence Laboratory, Department of Computer Science, Stanford University, Stanford, California" id="2556280202">William R. Swartout</author><author org="Artificial Intelligence Laboratory, Department of Computer Science, Stanford University, Stanford, California" id="2237799081">C. Cordell Green</author></authors><n_citation>41</n_citation><doc_type>Conference</doc_type><references><reference>2076343783</reference><reference>2079453942</reference></references><venue id="1203999783" type="C">International Joint Conference on Artificial Intelligence</venue><doi>10.7916/D89K4K6X</doi><keywords><keyword weight="0.48226">Programming language</keyword><keyword weight="0.46838">Computer science</keyword><keyword weight="0.71779">Lisp</keyword><keyword weight="0.46748">Theoretical computer science</keyword><keyword weight="0.4658">Auxiliary function</keyword><keyword weight="0.67493">Preprocessor</keyword><keyword weight="0.55012">Heuristics</keyword><keyword weight="0.68221">Fexpr</keyword><keyword weight="0.53394">Recursion</keyword></keywords><publisher>Morgan Kaufmann Publishers Inc.</publisher><abstract>A program is described which infers certain recursive LISP programs from single example input-output pairs Synthesized programs may recur in more than one argument, and may involve the synthesis of auxiliary functions An actual user session with the program, called EXAMPLE, is presented, and the operation of the program and its important heuristics are outlined.</abstract></paper>
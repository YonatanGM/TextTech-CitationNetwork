<paper id="1615603009"><title>Dynamically Composable Collaborations with Delegation Layers</title><year>2002</year><authors><author org="Siemens AG" id="1803786443">Klaus Ostermann</author></authors><n_citation>102</n_citation><doc_type>Conference</doc_type><references><reference>1511610110</reference><reference>1533109738</reference><reference>1550373940</reference><reference>1564310313</reference><reference>1579278367</reference><reference>1592272620</reference><reference>1739798036</reference><reference>1977917264</reference><reference>2015554455</reference><reference>2033868415</reference><reference>2041387310</reference><reference>2056821525</reference><reference>2069037543</reference><reference>2077830885</reference><reference>2082340512</reference><reference>2086970510</reference><reference>2103574963</reference><reference>2111962255</reference><reference>2115680394</reference><reference>2132055297</reference><reference>2137252778</reference><reference>2138363365</reference><reference>2151959546</reference><reference>2169934995</reference><reference>2913965119</reference><reference>2913972837</reference><reference>2914317223</reference></references><venue id="1177184315" type="C">European Conference on Object-Oriented Programming</venue><doi>10.1007/3-540-47993-7_4</doi><keywords><keyword weight="0.51967">Late binding</keyword><keyword weight="0.45311">Programming language</keyword><keyword weight="0.58657">Mixin</keyword><keyword weight="0.51538">Object-oriented programming</keyword><keyword weight="0.50724">Compile time</keyword><keyword weight="0.44239">Computer science</keyword><keyword weight="0.44663">Theoretical computer science</keyword><keyword weight="0.67509">Delegation</keyword><keyword weight="0.48843">Virtual class</keyword><keyword weight="0.51152">Type safety</keyword><keyword weight="0.46652">Semantics</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>It has been recognized in several works that a slice of behavior affecting a set of collaborating classes is a better unit of reuse than a single class. Different techniques and language extensions have been suggested to express such slices in programming languages. We propose delegation layers, an approach that scales the OO mechanisms for single objects, such as delegation, late binding, and subtype polymorphism, to sets of collaborating objects. Technically, delegation layers combine and generalize delegation and virtual class concepts. Due to their runtime semantics, delegation layers are more flexible than previous compile time approaches like mixin layers.</abstract></paper>
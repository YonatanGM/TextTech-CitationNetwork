<paper id="1763516863"><title>Network-aware distributed computing: A case study</title><year>1998</year><authors><author org="Carnegie - Mellon University#TAB#" id="2252487331">Hongsuda Tangmunarunkit</author><author org="Carnegie - Mellon University#TAB#" id="2203016445">Peter Steenkiste</author></authors><n_citation>13</n_citation><doc_type>Conference</doc_type><references><reference>1969240521</reference><reference>1972885889</reference><reference>2038595811</reference><reference>2109595453</reference><reference>2123479795</reference><reference>2124899771</reference><reference>2132607274</reference><reference>2135055886</reference><reference>2753542457</reference></references><venue id="2755546534" type="C">International Parallel Processing Symposium</venue><doi>10.1007/3-540-64359-1_687</doi><keywords><keyword weight="0.47254">Concurrency</keyword><keyword weight="0.4741">Computer science</keyword><keyword weight="0.0">Network aware</keyword><keyword weight="0.50929">Testbed</keyword><keyword weight="0.0">Performance model</keyword><keyword weight="0.46532">Matrix multiplication</keyword><keyword weight="0.48624">Distributed computing</keyword><keyword weight="0.54895">Network performance</keyword><keyword weight="0.0">Network conditions</keyword><keyword weight="0.45801">Computation</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The development of network-aware applications, i.e. applications that dynamically adapt to network conditions, has had some success in the domain of multimedia applications, but progress has been very slow for distributed computing applications. The reason is that the relationship between application performance and network performance is typically more complex for that class of applications, making adaptation difficult. In this paper we introduce two adaptation methods for distributed computing applications, one based on a performance model and another based on balancing computation and communication time. We illustrate the two methods using a simple distributed application (matrix multiply) and compare their performance. We show that both methods can correctly estimate the best number of nodes to use on our testbed. We also show that both methods have weaknesses. Model-based adaptation requires an accurate performance model and is sensitive to errors in measurements of the system parameters. The ratio-based method is more robust but less general.</abstract></paper>
<paper id="1982205631"><title>Efficiently computing static single assignment form and the control dependence graph</title><year>1991</year><authors><author org="IBM Research Division Yorktown Heights, NY#TAB#" id="2777978467">Ron Cytron</author><author org="IBM Research Division Yorktown Heights, NY#TAB#" id="2706396683">Jeanne Ferrante</author><author org="IBM Research Division Yorktown Heights, NY#TAB#" id="2078595754">Barry K. Rosen</author><author org="IBM Research Division Yorktown Heights, NY#TAB#" id="2010226721">Mark N. Wegman</author><author org="Brown University, Providence, RI" id="2226456482">F. Kenneth Zadeck</author></authors><n_citation>1827</n_citation><doc_type>Journal</doc_type><references><reference>178660737</reference><reference>1491178396</reference><reference>1559577056</reference><reference>1964714157</reference><reference>1966449927</reference><reference>1969077685</reference><reference>1969198146</reference><reference>1970061809</reference><reference>1975914482</reference><reference>1984914680</reference><reference>1988503504</reference><reference>1990087033</reference><reference>1991133357</reference><reference>1997493115</reference><reference>2008441811</reference><reference>2010452422</reference><reference>2014259743</reference><reference>2023200270</reference><reference>2023850308</reference><reference>2037545122</reference><reference>2038282408</reference><reference>2045693727</reference><reference>2045818721</reference><reference>2049105156</reference><reference>2064625489</reference><reference>2065826255</reference><reference>2079671074</reference><reference>2086643496</reference><reference>2088126145</reference><reference>2101811680</reference><reference>2102890180</reference><reference>2103795388</reference><reference>2111379929</reference><reference>2111695742</reference><reference>2118866757</reference><reference>2144344516</reference></references><venue id="41449414" type="J">ACM Transactions on Programming Languages and Systems</venue><doi>10.1145/115372.115320</doi><keywords><keyword weight="0.58299">Program optimization</keyword><keyword weight="0.55901">Data structure</keyword><keyword weight="0.5423">Global value numbering</keyword><keyword weight="0.54402">Program transformation</keyword><keyword weight="0.57931">Control flow graph</keyword><keyword weight="0.45807">Computer science</keyword><keyword weight="0.47157">Algorithm</keyword><keyword weight="0.55124">Dominator</keyword><keyword weight="0.58454">Static single assignment form</keyword><keyword weight="0.53874">Data flow diagram</keyword></keywords><publisher>ACM</publisher><abstract>In optimizing compilers, data structure choices directly influence the power and efficiency of practical program optimization. A poor choice of data structure can inhibit optimization or slow compilation to the point that advanced optimization features become undesirable. Recently, static single assignment form and the control dependence graph have been proposed to represent data flow and control flow properties of programs. Each of these previously unrelated techniques lends efficiency and power to a useful class of program optimizations. Although both of these structures are attractive, the difficulty of their construction and their potential size have discouraged their use. We present new algorithms that efficiently compute these data structures for arbitrary control flow graphs. The algorithms use {\em dominance frontiers}, a new concept that may have other applications. We also give analytical and experimental evidence that all of these data structures are usually linear in the size of the original program. This paper thus presents strong evidence that these structures can be of practical use in optimization.</abstract></paper>
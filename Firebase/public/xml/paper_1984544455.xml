<paper id="1984544455"><title>Implementing product line variabilities</title><year>2001</year><authors><author org="Centre for Software Reliability, Department of Computing Science, University of Newcastle, NE1 7RU Newcastle upon Tyne, United Kingdom" id="2974505138">Critina Gacek</author><author org="Fraunhofer Institute for Experimental Software Engineering, Sauerwiesen 6, D-67661 Kaiserslautern, Germany" id="2230177336">Michalis Anastasopoules</author></authors><n_citation>231</n_citation><doc_type>Conference</doc_type><references><reference>1500250067</reference><reference>1544810854</reference><reference>1561114351</reference><reference>1649464997</reference><reference>2115458362</reference><reference>2138363365</reference></references><venue id="2626575568" type="C">Symposium on Software Reusability</venue><doi>10.1145/375212.375269</doi><keywords><keyword weight="0.64252">Product engineering</keyword><keyword weight="0.54846">Domain analysis</keyword><keyword weight="0.58851">Domain engineering</keyword><keyword weight="0.45044">Systems engineering</keyword><keyword weight="0.4637">Software engineering</keyword><keyword weight="0.46118">Computer science</keyword><keyword weight="0.64589">Feature model</keyword><keyword weight="0.63451">Product design specification</keyword><keyword weight="0.72292">Software product line</keyword><keyword weight="0.59255">Requirement prioritization</keyword><keyword weight="0.61859">New product development</keyword></keywords><publisher>ACM</publisher><abstract>Software product lines have numerous members. Thus, a product line infrastructure must cover various systems. This is the significant difference to usual software systems and the reason for additional requirements on the various assets present during software product line engineering. It is imperative that they support the description of the product line as a whole, as well as its instantiation for the derivation of individual products. Literature has already addressed how to create and instantiate generic product line assets, such as domain models and architectures to generate instance specific ones [1, 2, 3], yet little attention has been given on how to actually deal with this genericity at the code level. This paper addresses the issue of handling product line variability at the code level. To this end various implementation approaches are examined with respect to their use in a product line context.</abstract></paper>
<paper id="1549993237"><title>Improved algorithms for the permuted kernel problem</title><year>1993</year><authors><author org="Bull CP8, France#TAB#" id="2115493875">Jacques Patarin</author><author org="CNET, France Telecom, France" id="2211994766">Pascal Chauvaud</author></authors><n_citation>11</n_citation><doc_type>Conference</doc_type><references><reference>90698540</reference><reference>1602747136</reference><reference>2079116027</reference></references><venue id="1153524033" type="C">International Cryptology Conference</venue><doi>10.1007/3-540-48329-2_33</doi><keywords><keyword weight="0.48761">Kernel (linear algebra)</keyword><keyword weight="0.50043">Identification scheme</keyword><keyword weight="0.4437">Computer science</keyword><keyword weight="0.46079">Algorithm</keyword><keyword weight="0.45792">Theoretical computer science</keyword><keyword weight="0.48473">Gaussian elimination</keyword><keyword weight="0.4894">Independent equation</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>In 1989, Adi Shamir published a new asymmetric identification scheme, based on the intractability of the Permuted Kernel Problem (PKP) [3]. In 1992, an algorithm to solve the PKP problem was suggested by J. Georgiades [2], and also in 1992 T. Baritaud, M. Campana, P. Chauvaud and H. Gilbert [1] have independently found another algorithm for this problem. These algorithms still need huge amount of time and/or memory in order to solve the PKP problem with the values suggested by A. Shamir.In this paper, we will see that it is possible to solve the PKP problem using less time that which was needed in [1] and [2], and much less memory than that needed in [1].First we will investigate how the ideas of [1] and [2] can be combined. This will enable us to obtain a little reduction in the time needed. Then, some new ideas will enable us to obtain a considerable reduction in the memory required, and another small reduction in time.Since our new algorithms are quicker and more practical than previous algorithms they confirm the idea stated in [1] that for strong security requirements, the smallest values (n = 32, m = 16, p = 251) mentioned in [3] are not recommended.</abstract></paper>
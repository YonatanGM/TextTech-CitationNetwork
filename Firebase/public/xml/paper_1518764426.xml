<paper id="1518764426"><title>Using Partial-Order Semantics to Avoid the State Explosion Problem in Asynchronous Systems</title><year>1990</year><authors><author org="&lt;italic&gt;Concordia University&lt;/italic&gt;" id="1899568246">David K. Probst</author><author org="&lt;italic&gt;Concordia University&lt;/italic&gt;" id="2163429371">Hon F. Li</author></authors><n_citation>32</n_citation><doc_type>Conference</doc_type><references><reference>1491037212</reference><reference>2029005287</reference><reference>2078638727</reference><reference>2103798031</reference><reference>2150320481</reference></references><venue id="1162450063" type="C">Computer Aided Verification</venue><doi>10.1007/BFb0023728</doi><keywords><keyword weight="0.4019">Small number</keyword><keyword weight="0.46987">Asynchronous communication</keyword><keyword weight="0.57245">Model checking</keyword><keyword weight="0.52535">Nondeterministic algorithm</keyword><keyword weight="0.53276">Concurrency</keyword><keyword weight="0.44175">Computer science</keyword><keyword weight="0.40195">Enumeration</keyword><keyword weight="0.45188">Algorithm</keyword><keyword weight="0.45388">Theoretical computer science</keyword><keyword weight="0.42716">Semantics</keyword><keyword weight="0.54345">Liveness</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We avoid state explosion in model checking of delay-insensitive VLSI systems by not using states. Systems are networks of communicating finite-state nonsequential processes with well-behaved nondeterministic choice. A specification strategy based on partial orders allows precise description of the branching and recurrence structure of processes. Process behaviors are modelled by pomsets, but (discrete) sets of pomsets with implicit branching structure are replaced by pomtrees, which have finite presentations by (automaton-like) behavior machines. The latter distinguish both concurrency and branching points, and define a finite recurrence structure. Safety and liveness checking are integrated. In contrast to state methods, our methods do not require enumeration or recording of states. We avoid separate consideration of execution sequences that do not differ in their partial order, and ensure termination by recording only a small number of system loop cutpoints â€” in the form of system behavior states. In spite of the name, behavior states are not states.</abstract></paper>
<paper id="1481685549"><title>A Framework for Supporting Views in Component Oriented Information Systems</title><year>2003</year><authors><author org="Université des Sciences et Technologies de Lille" id="2604944131">Olivier Caron</author><author org="Université des Sciences et Technologies de Lille" id="2159832001">Bernard Carré</author><author org="Université des Sciences et Technologies de Lille" id="2122815062">Alexis Muller</author><author org="Université des Sciences et Technologies de Lille" id="1992921720">Gilles Vanwormhoudt</author></authors><n_citation>9</n_citation><doc_type>Journal</doc_type><references><reference>164561938</reference><reference>237349009</reference><reference>1480261479</reference><reference>1487672899</reference><reference>1540752944</reference><reference>1543353458</reference><reference>2012380991</reference><reference>2017081644</reference><reference>2019896107</reference><reference>2084346214</reference><reference>2112691528</reference><reference>2137027610</reference><reference>2626304854</reference></references><venue id="106296714" type="J">Lecture Notes in Computer Science</venue><doi>10.1007/978-3-540-45242-3_16</doi><keywords><keyword weight="0.5556">Information system</keyword><keyword weight="0.46837">Software engineering</keyword><keyword weight="0.46333">Computer science</keyword><keyword weight="0.54817">Software design pattern</keyword><keyword weight="0.52892">Business logic</keyword><keyword weight="0.58978">Database schema</keyword><keyword weight="0.53212">Component-based software engineering</keyword><keyword weight="0.49129">Materialized view</keyword><keyword weight="0.47633">Traceability</keyword><keyword weight="0.45198">Database</keyword><keyword weight="0.45357">Distributed computing</keyword><keyword weight="0.51173">Design pattern</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The Component Oriented Design of Information Systems is spreading. After being used for gaining in reusability at the architectural level, components are nowadays applied at the business logic level. We focus here on the design of multiple functional views in such information systems, specially within the EJB framework. Traditionally, in the database context, this problem is solved by the notion of view-schemas applied to a database schema. We present a composition-oriented approach grounded on the splitting of entities according to views requirements. Two original design patterns are formulated and capture the main issues of the approach. The first one is concerned with the management of the split component and its conceptual identity. The second offers a solution for relationships among such components. Finally, we apply these patterns to the EJB framework. This framework improves evolution and traceability of views.</abstract></paper>
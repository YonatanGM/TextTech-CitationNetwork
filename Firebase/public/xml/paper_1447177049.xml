<paper id="1447177049"><title>Interactive Transformations from Object-Oriented Models to Component-Based Models</title><year>2011</year><authors><author org="University of Macau" id="2305056381">Dan Li</author><author org="University of Macau" id="2164105355">Xiaoshan Li</author><author org="UNU IIST" id="2159399964">Zhiming Liu</author><author org="University of Oslo" id="1925871413">Volker Stolz</author></authors><n_citation>11</n_citation><doc_type>Conference</doc_type><references><reference>6896398</reference><reference>1482962177</reference><reference>1508017011</reference><reference>1545978847</reference><reference>1826589537</reference><reference>1896185571</reference><reference>1971065095</reference><reference>1998455310</reference><reference>2005543934</reference><reference>2021306790</reference><reference>2024034783</reference><reference>2108495135</reference><reference>2140545609</reference><reference>2141352548</reference><reference>2167500728</reference></references><venue id="2760652811" type="C">Formal Aspects of Component Software</venue><doi>10.1007/978-3-642-35743-5_7</doi><keywords><keyword weight="0.61894">Sequence diagram</keyword><keyword weight="0.63428">Component diagram</keyword><keyword weight="0.61901">Model transformation</keyword><keyword weight="0.46705">Programming language</keyword><keyword weight="0.52927">Object-oriented programming</keyword><keyword weight="0.45516">Computer science</keyword><keyword weight="0.45854">Theoretical computer science</keyword><keyword weight="0.60205">Component (UML)</keyword><keyword weight="0.56249">Computer-aided software engineering</keyword><keyword weight="0.53497">Reusability</keyword><keyword weight="0.60933">Class diagram</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Consider an object-oriented model with a class diagram, and a set of object sequence diagrams, each representing the design of object interactions for a use case. This article discusses how such an OO design model can be automatically transformed into a component-based model for the purpose of reusability, maintenance, and more importantly, distributed and independent deployment. We present the design and implementation of a tool that transforms an object-oriented model to a component-based model, which are both formally defined in the rCOS method of model driven design of component-based software, in an interactive, stepwise manner. The transformation is designed using QVT Relations and implemented as part of the rCOS CASE tool.</abstract></paper>
<paper id="1968889995"><title>ML with extended pattern matching and subtypes</title><year>1988</year><authors><author org="Laboratory for Computer Science, MIT," id="2009093468">Lalita Jategaonkar</author><author org="Department of Computer Science; Stanford University" id="2125383417">John Mitchell</author></authors><n_citation>74</n_citation><doc_type>Conference</doc_type><references><reference>1519382205</reference><reference>1549804464</reference><reference>1770006921</reference><reference>1969093922</reference><reference>2027657506</reference><reference>2041659737</reference><reference>2100738443</reference><reference>2171425038</reference><reference>2173184982</reference></references><venue id="1162793720" type="C">International Conference on Functional Programming</venue><doi>10.1145/62678.62702</doi><keywords><keyword weight="0.63687">Type system</keyword><keyword weight="0.45203">Programming language</keyword><keyword weight="0.67769">Standard ML</keyword><keyword weight="0.43244">Computer science</keyword><keyword weight="0.54343">Programming style</keyword><keyword weight="0.44581">Theoretical computer science</keyword><keyword weight="0.57517">Type inference</keyword><keyword weight="0.45247">Typing</keyword><keyword weight="0.57268">Pattern matching</keyword><keyword weight="0.6353">Duck typing</keyword></keywords><publisher>ACM</publisher><abstract>We extend a fragment of the programming language Standard ML by incorporating a more general form of record pattern matching and providing for user-declared subtypes. Together, these two enhancements may be used to support a restricted object-oriented programming style. In keeping with the framework of Standard ML, we present typing rules for the language, and develop an efficient type inference algorithm. We prove that the algorithm is sound with respect to the typing rules, and that it infers a most general typing for every typable expression.</abstract></paper>
<paper id="1982264408"><title>Fine grained object protection in UNIX</title><year>1993</year><authors><author org="" id="2985699696">Marie Rose Low</author><author org="" id="1945196828">Bruce Christianson</author></authors><n_citation>7</n_citation><doc_type>Journal</doc_type><references><reference>109873528</reference><reference>2099137371</reference></references><venue id="50071195" type="J">Operating Systems Review</venue><doi>10.1145/160551.160555</doi><keywords><keyword weight="0.45019">Programming language</keyword><keyword weight="0.67206">Unix filesystem</keyword><keyword weight="0.44725">Computer science</keyword><keyword weight="0.52688">Object type</keyword><keyword weight="0.66092">TMPDIR</keyword><keyword weight="0.64198">Unix</keyword><keyword weight="0.61619">Unix file types</keyword><keyword weight="0.57107">Discretionary access control</keyword><keyword weight="0.62268">Unix signal</keyword><keyword weight="0.69207">Unix architecture</keyword><keyword weight="0.46033">Operating system</keyword></keywords><publisher>ACM</publisher><abstract>In this document we describe and discuss a solution, called UNIX Access Table Protection (UATP), to the problem of providing a secure environment for persistent object types with fine grained protection on a UNIX system. UATP requires no modifications to the UNIX kernel. Useru0027s on UNIX have discretionary access control over their directories and files. By using these controls in a particular way, this paper shows a way in which a hierarchy of protection domains can be set up to enable object methods and type instances to be managed securely and to be protected from unauthorised use. The document also describes how a particular object type, a UATP-kernel, which executes in these protection domains (in the same way as all other objects) can be used to provide fine grained protection for all other objects which are installed and running in the manner described here.</abstract></paper>
<paper id="1895954544"><title>The fusion calculus: expressiveness and symmetry in mobile processes</title><year>1998</year><authors><author org="R. Inst. of Technol., Stockholm, Sweden" id="152237314">J. Parrow</author><author org="" id="2136817152">B. Victor</author></authors><n_citation>204</n_citation><doc_type>Conference</doc_type><references><reference>1526102560</reference><reference>1548151249</reference><reference>2001299902</reference><reference>2027689693</reference><reference>2057814731</reference><reference>2072848882</reference><reference>2107253221</reference><reference>2128932399</reference><reference>2151782428</reference><reference>2162477369</reference><reference>2165407648</reference><reference>2170626879</reference></references><venue id="1171002971" type="C">Logic in Computer Science</venue><doi>10.1109/LICS.1998.705654</doi><keywords><keyword weight="0.4403">Discrete mathematics</keyword><keyword weight="0.64843">Simply typed lambda calculus</keyword><keyword weight="0.65279">Typed lambda calculus</keyword><keyword weight="0.61463">Lambda cube</keyword><keyword weight="0.6215">Natural deduction</keyword><keyword weight="0.42591">Computer science</keyword><keyword weight="0.62996">System F</keyword><keyword weight="0.61006">Calculus of communicating systems</keyword><keyword weight="0.66644">Church encoding</keyword><keyword weight="0.64377">Process calculus</keyword><keyword weight="0.44598">Calculus</keyword></keywords><publisher>IEEE Computer Society</publisher><abstract>We present the fusion calculus as a significant step towards a canonical calculus of concurrency. It simplifies and extends the /spl pi/-calculus. The fusion calculus contains the polyadic /spl pi/-calculus as a proper subcalculus and thus inherits all its expressive power. The gain is that fusion contains actions akin to updating a shared state, and a scoping construct for bounding their effects. Therefore it is easier to represent computational models such as concurrent constraints formalisms. It is also easy to represent the so called strong reduction strategies in the /spl lambda/-calculus, involving reduction under abstraction. In the /spl lambda/-calculus these tasks require elaborate encodings. Our results on the fusion calculus in this paper are the following. We give a structured operational semantics in the traditional style. The novelty lies in a new kind of action, fusion actions for emulating updates of a shared state. We prove that the calculus contains the /spl pi/-calculus as a subcalculus. We define and motivate the bisimulation equivalence and prove a simple characterization of its induced congruence, which is given two versions of a complete axiomatization for finite terms. The expressive power of the calculus is demonstrated by giving a straight-forward encoding of the strong lazy /spl lambda/-calculus, which admits reduction under /spl lambda/ abstraction.</abstract></paper>
<paper id="1498946538"><title>Houdini, an Annotation Assistant for ESC/Java</title><year>2001</year><authors><author org="Compaq Systems Research Center" id="2130341195">Cormac Flanagan</author><author org="Compaq Systems Research Center" id="710865586">K. Rustan M. Leino</author></authors><n_citation>321</n_citation><doc_type>Conference</doc_type><references><reference>1497571013</reference><reference>1613836731</reference><reference>1983119041</reference><reference>1992431017</reference><reference>2042751794</reference><reference>2043100293</reference><reference>2084974764</reference><reference>2096601022</reference><reference>2102389857</reference><reference>2109875364</reference></references><venue id="1169806927" type="C">Formal Methods</venue><doi>10.1007/3-540-45251-6_29</doi><keywords><keyword weight="0.69516">ESC/Java</keyword><keyword weight="0.48335">Annotation</keyword><keyword weight="0.46182">Programming language</keyword><keyword weight="0.45062">Predicate abstraction</keyword><keyword weight="0.44469">Computer science</keyword><keyword weight="0.60939">Java annotation</keyword><keyword weight="0.60838">Extended static checking</keyword><keyword weight="0.45346">Call site</keyword><keyword weight="0.48462">Modular design</keyword><keyword weight="0.53645">Java</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>A static program checker that performs modular checking can check one program module for errors without needing to analyze the entire program. Modular checking requires that each module be accompanied by annotations that specify the module. To help reduce the cost of writing specifications, this paper presents Houdini, an annotation assistant for the modular checker ESC/Java. To infer suitable ESC/Java annotations for a given program, Houdini generates a large number of candidate annotations and uses ESC/Java to verify or refute each of these annotations. The paper describes the design, implementation, and preliminary evaluation of Houdini.</abstract></paper>
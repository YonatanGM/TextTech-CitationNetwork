<paper id="1533167340"><title>rCOS: a formal model-driven engineering method for component-based software</title><year>2012</year><authors><author org="School of Computer Science and Engineering, Beihang University, Beijing, China 100191 and Macao Polytechnic Institute, Macau, China#TAB#" id="2160970684">Wei Ke</author><author org="Faculty of Science and Technology University of Macau Macau China" id="2164105355">Xiaoshan Li</author><author org="UNU-IIST, Macau, China#TAB#" id="2159399964">Zhiming Liu</author><author org="UNU-IIST, Macau, China and Department of Informatics, University of Oslo, Oslo, Norway 0316#TAB#" id="1925871413">Volker Stolz</author></authors><n_citation>16</n_citation><doc_type>Journal</doc_type><references><reference>1447177049</reference><reference>1503973138</reference><reference>1505389040</reference><reference>1508017011</reference><reference>1511110335</reference><reference>1520247825</reference><reference>1541118615</reference><reference>1553263010</reference><reference>1583910698</reference><reference>1857327297</reference><reference>1882245948</reference><reference>1970495662</reference><reference>1971099164</reference><reference>1973153065</reference><reference>1998455310</reference><reference>2005543934</reference><reference>2012211446</reference><reference>2015688007</reference><reference>2024034783</reference><reference>2045170496</reference><reference>2063163522</reference><reference>2078095655</reference><reference>2100505193</reference><reference>2110425399</reference><reference>2111706174</reference><reference>2113061194</reference><reference>2113131398</reference><reference>2124209077</reference><reference>2139158240</reference><reference>2142812159</reference><reference>2153887189</reference><reference>2154774499</reference><reference>2156507352</reference><reference>2167500728</reference><reference>2199154280</reference><reference>2293287097</reference><reference>2296704551</reference></references><venue id="134228058" type="J">Frontiers of Computer Science in China</venue><doi>10.1007/s11704-012-2901-5</doi><keywords><keyword weight="0.54951">Software deployment</keyword><keyword weight="0.61383">Software design</keyword><keyword weight="0.46665">Computer science</keyword><keyword weight="0.55282">Systems design</keyword><keyword weight="0.45338">Theoretical computer science</keyword><keyword weight="0.0">Artificial intelligence</keyword><keyword weight="0.61709">Software development process</keyword><keyword weight="0.62669">Software development</keyword><keyword weight="0.59695">System integration</keyword><keyword weight="0.48069">Software engineering</keyword><keyword weight="0.61014">Model-driven architecture</keyword><keyword weight="0.62735">Component-based software engineering</keyword><keyword weight="0.45005">Machine learning</keyword></keywords><publisher>SP Higher Education Press</publisher><abstract>Model-driven architecture (MDA) has become a main stream technology for software-intensive system design. The main engineering principle behind it is that the inherent complexity of software development can only be mastered by building, analyzing and manipulating system models. MDA also deals with system complexity by providing component-based design techniques, allowing independent component design, implementation and deployment, and then system integration and reconfiguration based on component interfaces. The model of a system in any stage is an integration of models of different viewpoints. Therefore, for a model-driven method to be applied effectively, it must provide a body of techniques and an integrated suite of tools for model construction, validation, and transformation. This requires a number of modeling notations for the specification of different concerns and viewpoints of the system. These notations should have formally defined syntaxes and a unified theory of semantics. The underlying theory of the method is needed to underpin the development of tools and correct use of tools in software development, as well as to formally verify and reason about properties of systems in mission-critical applications. The modeling notations, techniques, and tools must be designed so that they can be used seamlessly in supporting development activities and documentation of artifacts in software design processes. This article presents such a method, called the rCOS, focusing on the models of a system at different stages in a software development process, their semantic integration, and how they are constructed, analyzed, transformed, validated, and verified.</abstract></paper>
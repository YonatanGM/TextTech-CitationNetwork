<paper id="1554683232"><title>Refinement Calculus, Part I: Sequential Nondeterministic Programs</title><year>1989</year><authors><author org="Ã…bo Akademi University" id="2108467651">Ralph-Johan Back</author></authors><n_citation>112</n_citation><doc_type>Conference</doc_type><references><reference>156257448</reference><reference>1501421016</reference><reference>1512077518</reference><reference>1536271633</reference><reference>1552647623</reference><reference>1666576026</reference><reference>1965662337</reference><reference>1986499471</reference><reference>1989877393</reference><reference>2000302396</reference><reference>2011444209</reference><reference>2023299380</reference><reference>2025812198</reference><reference>2030865387</reference><reference>2036395016</reference><reference>2038814435</reference><reference>2038952689</reference><reference>2076964487</reference><reference>2080441874</reference><reference>2082036629</reference><reference>2082724648</reference><reference>2086070079</reference><reference>2087713039</reference><reference>2103953153</reference><reference>2110050316</reference><reference>2110425399</reference><reference>2110846749</reference><reference>2116365783</reference><reference>2137865376</reference><reference>2147543351</reference><reference>2148817888</reference><reference>2166656159</reference><reference>2173852369</reference><reference>2914206182</reference></references><venue id="2758012628" type="C">REX Workshop on Stepwise Refinement of Distributed Systems, Models, Formalisms, Correctness</venue><doi>10.1007/3-540-52559-9_60</doi><keywords><keyword weight="0.57862">Predicate transformer semantics</keyword><keyword weight="0.41263">Inverse</keyword><keyword weight="0.48976">Monotonic function</keyword><keyword weight="0.45498">Programming language</keyword><keyword weight="0.67265">Refinement calculus</keyword><keyword weight="0.50964">Nondeterministic algorithm</keyword><keyword weight="0.4365">Computer science</keyword><keyword weight="0.41788">Top-down and bottom-up design</keyword><keyword weight="0.58352">Refinement</keyword><keyword weight="0.47964">Predicate (grammar)</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>A lattice theoretic framework for the calculus of program refinement is presented. Specifications and program statements are combined into a single (infinitary) language of commands which permits miraculous, angelic and demonic statements to be used in the description of program behavior. The weakest precondition calculus is extended to cover this larger class of statements and a game-theoretic interpretation is given for these constructs. The language is complete, in the sense that every monotonic predicate transformer can be expressed in it. The usual program constructs can be defined as derived notions in this language. The notion of inverse statements is defined and its use in formalizing the notion of data refinement is shown.</abstract></paper>
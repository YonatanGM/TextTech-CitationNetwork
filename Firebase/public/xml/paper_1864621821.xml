<paper id="1864621821"><title>An approach to automatic detection of software failures</title><year>1995</year><authors><author org="Bell Canada Software Reliability Lab., Waterloo Univ., Ont., Canada" id="2225444389">M. Hlady</author><author org="Bell Canada Software Reliability Lab., Waterloo Univ., Ont., Canada" id="2574484932">R. Kovacevic</author><author org="Bell Canada Software Reliability Lab., Waterloo Univ., Ont., Canada" id="2462094061">J.J. Li</author><author org="Bell Canada Software Reliability Lab., Waterloo Univ., Ont., Canada" id="2306383363">B.R. Pekilis</author><author org="Bell Canada Software Reliability Lab., Waterloo Univ., Ont., Canada" id="2636219801">D. Prairie</author><author org="Bell Canada Software Reliability Lab., Waterloo Univ., Ont., Canada" id="2308996621">T. Savor</author><author org="Bell Canada Software Reliability Lab., Waterloo Univ., Ont., Canada" id="2989113694">R.E. Seviora</author><author org="Bell Canada Software Reliability Lab., Waterloo Univ., Ont., Canada" id="2047671062">D. Simser</author><author org="Bell Canada Software Reliability Lab., Waterloo Univ., Ont., Canada" id="2677708971">A. Vorobiev</author></authors><n_citation>27</n_citation><doc_type>Conference</doc_type><references><reference>2099529102</reference><reference>2151688527</reference><reference>2152651705</reference><reference>2171441042</reference></references><venue id="1157832733" type="C">International Symposium on Software Reliability Engineering</venue><doi>10.1109/ISSRE.1995.497672</doi><keywords><keyword weight="0.45884">Programming language</keyword><keyword weight="0.46659">Computer science</keyword><keyword weight="0.54862">Software system</keyword><keyword weight="0.43813">Real-time computing</keyword><keyword weight="0.45712">Theoretical computer science</keyword><keyword weight="0.49361">Software</keyword><keyword weight="0.56365">Specification language</keyword><keyword weight="0.5398">Supervisor</keyword><keyword weight="0.5156">Software prototyping</keyword><keyword weight="0.51887">Software fault tolerance</keyword><keyword weight="0.57051">Formal specification</keyword><keyword weight="0.51467">Finite-state machine</keyword><keyword weight="0.4449">Reliability engineering</keyword></keywords><publisher>IEEE</publisher><abstract>The focus of this paper is on an approach to the automatic failure detection of reactive software systems called specification-based supervision. Assumed is that the software is specified in a formalism based on communicating extended finite state machines (CEFSMs). The major difficulty in supervising such systems is that the supervisor must account for all possible behaviors that are permissible under the non-determinism present in the specification. An approach to the automatic detection of failures based on the theory of beliefs is presented. This theory was developed to deal with the nondeterminism present in CEFSM based formalisms. The specification language SDL, standardized by the International Telecommunication Union, is used as a concrete example. In the theory of beliefs, each behavioral alternative is represented as a separate belief of one or more specification CEFSMs. Beliefs are combined into consistent belief sets that represent legitimate external behaviors. A consistent belief set representing a behavior that does not match the actually observed behavior is terminated. If all consistent belief sets have been terminated, the observed behavior is not legitimate and is reported as a failure of the target software system. A prototype implementation of a belief-based supervisor was developed. The implementation was used to monitor execution of a small telephone exchange. Both the supervisor and exchange were emulated on a workstation. Statistics characterizing the number of consistent belief sets are presented.</abstract></paper>
<paper id="1978780448"><title>Workcrews: an abstraction for controlling parallelism</title><year>1989</year><authors><author org="" id="2687994063">Mark T. Vandevoorde</author><author org="" id="2161569699">Eric S. Roberts</author></authors><n_citation>96</n_citation><doc_type>Journal</doc_type><references><reference>1983587324</reference><reference>1992002174</reference><reference>2040046786</reference><reference>2060550191</reference><reference>2089467286</reference><reference>2093415968</reference><reference>2114958150</reference><reference>2170708288</reference></references><venue id="148521650" type="J">International Journal of Parallel Programming</venue><doi>10.1007/BF01407910</doi><keywords><keyword weight="0.58524">Instruction-level parallelism</keyword><keyword weight="0.40698">Data processing</keyword><keyword weight="0.41579">Abstraction</keyword><keyword weight="0.65786">Task parallelism</keyword><keyword weight="0.45381">Computer science</keyword><keyword weight="0.45324">Parallel computing</keyword><keyword weight="0.0">Parallel processing</keyword><keyword weight="0.47917">Queue</keyword><keyword weight="0.4817">Multiprocessing</keyword><keyword weight="0.6487">Data parallelism</keyword><keyword weight="0.45205">Distributed computing</keyword></keywords><publisher>Kluwer Academic Publishers</publisher><abstract>In implementing parallel programs, it is important to find strategies for controlling parallelism that make the most effective use of available resources. In this paper, we introduce a dynamic strategy called WorkCrews for controlling the use of parallelism on small-scale, tightly-coupled multiprocessors. In the WorkCrew model, tasks are assigned to a finite set ofworkers. As in other mechanisms for specifying parallelism, each worker can enqueue subtasks for concurrent evaluation by other workers as they become idle. The WorkCrew paradigm has two advantages. First, much of the work associated with task division can be deferred until a new worker actually undertakes the subtask and avoided altogether if the original worker ends up executing the subtask serially. Second, the ordering of queue requests under WorkCrews favors coarse-grained subtasks, which reduces further the overhead of task decomposition.</abstract></paper>
<paper id="1570560315"><title>STAR-Tree: An Efficient Self-Adjusting Index for Moving Objects</title><year>2002</year><authors><author org="AT&amp;T Research Lab" id="2951299038">Cecilia Magdalena Procopiuc</author><author org="â€¢ Duke University#TAB#" id="2128565744">Pankaj K. Agarwal</author><author org="University of Illinois." id="1989084025">Sariel Har-Peled</author></authors><n_citation>63</n_citation><doc_type>Conference</doc_type><references><reference>1979207937</reference><reference>1982042357</reference><reference>2002039836</reference><reference>2011467929</reference><reference>2032521898</reference><reference>2064311651</reference><reference>2086474457</reference><reference>2099397891</reference><reference>2101429492</reference><reference>2151135734</reference><reference>2158713459</reference></references><venue id="1159482685" type="C">Algorithm Engineering and Experimentation</venue><doi>10.1007/3-540-45643-0_14</doi><keywords><keyword weight="0.54714">R-tree</keyword><keyword weight="0.45959">Data mining</keyword><keyword weight="0.44358">Data set</keyword><keyword weight="0.0">Nearest neighbour</keyword><keyword weight="0.0">Database query</keyword><keyword weight="0.44594">Computer science</keyword><keyword weight="0.58612">Range query (data structures)</keyword><keyword weight="0.51472">Search engine indexing</keyword><keyword weight="0.63194">Spatial query</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We present a new technique called STAR-tree, based on R*- tree, for indexing a set of moving points so that various queries, including range queries, time-slice queries, and nearest-neighbor queries, can be answered efficiently. A novel feature of the index is that it is self-adjusting in the sense that it re-organizes itself locally whenever its query performance deteriorates. The index provides tradeoffs between storage and query performance and between time spent in updating the index and in answering queries. We present detailed performance studies and compare our methods with the existing ones under a varying type of data sets and queries. Our experiments show that the index proposed here performs considerably better than the previously known ones.</abstract></paper>
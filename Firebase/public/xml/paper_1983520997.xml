<paper id="1983520997"><title>Knowledge-based program analysis</title><year>1990</year><authors><author org="Dept. of Comput. Sci., Illinois, Univ., Urbana, IL, USA#TAB#" id="2974372443">M.T. Harandi</author><author org="" id="2974789607">J.Q. Ning</author></authors><n_citation>159</n_citation><doc_type>Journal</doc_type><references><reference>1976303542</reference><reference>2105670123</reference><reference>2169232645</reference></references><venue id="6725529" type="J">IEEE Software</venue><doi>10.1109/52.43052</doi><keywords><keyword weight="0.48578">Heuristic</keyword><keyword weight="0.47826">Programming language</keyword><keyword weight="0.48201">Software engineering</keyword><keyword weight="0.56075">Object-oriented programming</keyword><keyword weight="0.45982">Systems engineering</keyword><keyword weight="0.47199">Computer science</keyword><keyword weight="0.60441">Source code</keyword><keyword weight="0.60777">Knowledge-based systems</keyword><keyword weight="0.0">Program maintenance</keyword><keyword weight="0.66196">Program analysis</keyword></keywords><publisher>IEEE Computer Society Press</publisher><abstract>Automatic program analysis is regarded here as both the mechanized process of understanding high-level concepts from program text and the use of those concepts to guide program maintenance. A knowledge-based program analysis tool called PAT, which realizes this concept, is described. PAT uses an object-oriented framework to represent programming concepts and a heuristic-based concept-recognition mechanism to derive high-level functional concepts from the source code. As an example, a segment of a much larger program written in a Pascal-like language is analyzed using PAT. u003e</abstract></paper>
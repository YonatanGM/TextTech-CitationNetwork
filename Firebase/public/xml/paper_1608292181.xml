<paper id="1608292181"><title>The Regular Real-Time Languages</title><year>1998</year><authors><author org="University of California" id="2707196735">Thomas A. Henzinger</author><author org="University of California" id="1979323527">Jean-François Raskin</author><author org="University of Namur," id="2259502985">Pierre-Yves Schobbens</author></authors><n_citation>105</n_citation><doc_type>Conference</doc_type><references><reference>1536897809</reference><reference>1552159734</reference><reference>1607529814</reference><reference>1928422391</reference><reference>2030263557</reference><reference>2040127143</reference><reference>2049696538</reference><reference>2101508170</reference><reference>2140028191</reference><reference>2153775415</reference></references><venue id="1141821850" type="C">International Colloquium on Automata, Languages and Programming</venue><doi>10.1007/BFb0055086</doi><keywords><keyword weight="0.48077">Specification language</keyword><keyword weight="0.45613">Discrete mathematics</keyword><keyword weight="0.41601">Computer science</keyword><keyword weight="0.52415">Satisfiability</keyword><keyword weight="0.51895">Boolean satisfiability problem</keyword><keyword weight="0.5224">Finite-state machine</keyword><keyword weight="0.60168">Decidability</keyword><keyword weight="0.52002">Timed automaton</keyword><keyword weight="0.52491">Regular language</keyword><keyword weight="0.50517">Temporal logic</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>A specification formalism for reactive systems defines a class of Ω-languages. We call a specification formalism fully decidable if it is constructively closed under boolean operations and has a decidable satisfiability (nonemptiness) problem. There are two important, robust classes of Ω-languages that are definable by fully decidable formalisms. The Ω -reqular languages are definable by finite automata, or equivalcntly, by the Sequential Calculus. The counter-free Ω-regular languages are definable by temporal logic, or equivalcntly, by the first-order fragment of the Sequential Calculus. The gap between both classes can be closed by finite counting (using automata connectives), or equivalently, by projection (existential second-order quantification over letters).</abstract></paper>
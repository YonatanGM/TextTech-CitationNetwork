<paper id="1971941065"><title>Unification factoring for efficient execution of logic programs</title><year>1995</year><authors><author org="Dept. of Computer Science, SUNY at Stony Brook, Stony Brook, NY" id="2128922288">S. Dawson</author><author org="Dept. of Computer Science, SUNY at Stony Brook, Stony Brook, NY" id="2165621803">C. R. Ramakrishnan</author><author org="Dept. of Computer Science, SUNY at Stony Brook, Stony Brook, NY" id="1990835124">I. V. Ramakrishnan</author><author org="Dept. of Computer Science, SUNY at Stony Brook, Stony Brook, NY" id="2064107187">K. Sagonas</author><author org="Dept. of Computer Science, SUNY at Stony Brook, Stony Brook, NY" id="2053543515">S. Skiena</author><author org="Dept. of Computer Science, SUNY at Stony Brook, Stony Brook, NY" id="2291248690">T. Swift</author><author org="Dept. of Computer Science, SUNY at Stony Brook, Stony Brook, NY" id="2163362677">D. S. Warren</author></authors><n_citation>16</n_citation><doc_type>Conference</doc_type><references><reference>3821108</reference><reference>189277522</reference><reference>202866673</reference><reference>1507341471</reference><reference>1538230433</reference><reference>1966096098</reference><reference>1968639270</reference><reference>1970074386</reference><reference>1979966822</reference><reference>2004916435</reference><reference>2044968981</reference><reference>2055858190</reference><reference>2124004121</reference><reference>2164155814</reference></references><venue id="1160032607" type="C">Symposium on Principles of Programming Languages</venue><doi>10.1145/199448.199509</doi><keywords><keyword weight="0.49002">Set theory</keyword><keyword weight="0.47278">Programming language</keyword><keyword weight="0.47271">Computer science</keyword><keyword weight="0.49124">Source code</keyword><keyword weight="0.57565">Unification</keyword><keyword weight="0.49273">Automaton</keyword><keyword weight="0.50163">Decidability</keyword><keyword weight="0.4733">Theoretical computer science</keyword><keyword weight="0.57797">Prolog</keyword><keyword weight="0.57855">Logic programming</keyword><keyword weight="0.55151">Factoring</keyword></keywords><publisher>ACM</publisher><abstract>The efficiency of resolution-based logic programming languages, such as Prolog, depends critically on selecting and executing sets of applicable clause heads to resolve against subgoals. Traditional approaches to this problem have focused on using indexing to determine the smallest possible applicable set. Despite their usefulness, these approaches ignore the non-determinism inherent in many programming languages to the extent that they do not attempt to optimize execution after the applicable set theory has been determined. Unification factoring seeks to rectify this omission by regarding the indexing and unification phases of clause resolution as a single process. This paper formalizes that process through the construction of factoring automata . A polynomial-time algorithm is given for constructing optimal factoring automata which preserve the clause selection strategy of Prolog. More generally, when the clause selection strategy is not fixed, constructing such an optimal automaton is shown to be NP-complete, solving an open trie minimization problem. Unification factoring is implemented through a source code transformation that preserves the full semantics of Prolog. This transformation is specified in the paper, and using it, several well-known programs show performance improvements of up to 100% across three different systems. A prototype of unification factoring is available by anonymous ftp.</abstract></paper>
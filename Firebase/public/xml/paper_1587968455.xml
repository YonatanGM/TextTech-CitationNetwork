<paper id="1587968455"><title>Logic Machine Architecture: Inference Mechanisms</title><year>1982</year><authors><author org="Northern Illinois University,," id="2282435515">Ewing L. Lusk</author><author org="Northwestern University" id="2113235922">William McCune</author><author org="Northern Illinois University,," id="2919002613">Ross A. Overbeek</author></authors><n_citation>24</n_citation><doc_type>Conference</doc_type><references><reference>1595229828</reference><reference>2085193930</reference></references><venue id="1134440762" type="C">Conference on Automated Deduction</venue><doi>10.1007/BFb0000053</doi><keywords><keyword weight="0.46212">Kernel (linear algebra)</keyword><keyword weight="0.41806">Demodulation</keyword><keyword weight="0.47779">Programming language</keyword><keyword weight="0.50767">Inference</keyword><keyword weight="0.46233">Computer science</keyword><keyword weight="0.51179">Automated theorem proving</keyword><keyword weight="0.62271">Lisp</keyword><keyword weight="0.44943">Algorithm</keyword><keyword weight="0.4629">Theoretical computer science</keyword><keyword weight="0.49526">Automation</keyword><keyword weight="0.54516">Rule of inference</keyword><keyword weight="0.49627">Mathematical logic</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Logic Machine Architecture (LMA) is a layered implementation of theorem-proving tools. The kernel of formula storage, retrieval, and manipulation primitives (layers 0 and 1) is described elsewhere[2]. The layer described here (layer 2) contains resolution- and equality-based inference rules, subsumption, and demodulation. It is designed to provide all of the tools required to create a theorem-prover with minimal effort. Although LMA is currently implemented in Pascal, an interface to LISP will be included in the original release. This paper includes the design principles and techniques used in layer 2, as well as two simple theorem provers which illustrate the services of layer 2 â€” one written in LISP and the other in Pascal.</abstract></paper>
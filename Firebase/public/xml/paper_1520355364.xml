<paper id="1520355364"><title>Logical and Computational Aspects of Programming with Sets/Bags/Lists</title><year>1991</year><authors><author org="University of Pennsylvania" id="2169421516">Val Breazu-Tannen</author><author org="University of Pennsylvania" id="1953889436">Ramesh Subrahmanyam</author></authors><n_citation>79</n_citation><doc_type>Conference</doc_type><references><reference>1507693023</reference><reference>1585022015</reference><reference>2005318605</reference><reference>2110338707</reference><reference>2114980032</reference><reference>2148517439</reference><reference>2153320571</reference><reference>2162602286</reference><reference>2165467455</reference><reference>2172307690</reference></references><venue id="1141821850" type="C">International Colloquium on Automata, Languages and Programming</venue><doi>10.1007/3-540-54233-7_125</doi><keywords><keyword weight="0.44423">Discrete mathematics</keyword><keyword weight="0.53249">Logical conjunction</keyword><keyword weight="0.55885">Lambda calculus</keyword><keyword weight="0.56305">Primitive recursive function</keyword><keyword weight="0.45816">Algebra</keyword><keyword weight="0.43939">Computer science</keyword><keyword weight="0.57917">Denotational semantics</keyword><keyword weight="0.50578">Equivalence (measure theory)</keyword><keyword weight="0.51723">Mathematical proof</keyword><keyword weight="0.54847">Partial function</keyword><keyword weight="0.59307">Recursion</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We study issues that arise in programming with primitive recursion over non-free datatypes such as lists, bags and sets. Programs written in this style can lack a meaning in the sense that their outputs may be sensitive to the choice of input expression. We are, thus, naturally lead to a set-theoretic denotational semantics with partial functions. We set up a logic for reasoning about the definedness of terms and a deterministic and terminating evaluator. The logic is shown to be sound in the model, and its recursion free fragment is shown to be complete for proving definedness of recursion free programs. The logic is then shown to be as strong as the evaluator, and this implies that the evaluator is compatible with the provable equivalence between different set (or bag, or list) expression . Oftentimes,the same non-free datatype may have different presentations, and it is not clear a priori whether programming and reasoning with the two presentations are equivalent. We formulate these questions, precisely, in the context of alternative presentations of the list, bag, and set datatypes and study some aspects of these questions. In particular, we establish back-and-forth translations between the two presentations, from which it follows that they are equally expressive, and prove results relating proofs of program properties, in the two presentations.</abstract></paper>
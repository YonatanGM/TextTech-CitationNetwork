<paper id="1875718612"><title>Using dependent types to certify the safety of assembly code</title><year>2005</year><authors><author org="Computer Science Division, University of California Berkeley, CA" id="1963810295">Matthew Harren</author><author org="Computer Science Division, University of California Berkeley, CA" id="281330718">George C. Necula</author></authors><n_citation>16</n_citation><doc_type>Conference</doc_type><references><reference>145782308</reference><reference>1565113942</reference><reference>1582456956</reference><reference>1602573351</reference><reference>1655226010</reference><reference>1976394633</reference><reference>1995594295</reference><reference>2005907808</reference><reference>2041673946</reference><reference>2044253896</reference><reference>2069107692</reference><reference>2098806455</reference><reference>2114771706</reference><reference>2135248810</reference><reference>2140566629</reference><reference>2151480972</reference><reference>2155374739</reference><reference>2156268601</reference><reference>2161280002</reference></references><venue id="1137552346" type="C">Static Analysis Symposium</venue><doi>10.1007/11547662_12</doi><keywords><keyword weight="0.45671">Programming language</keyword><keyword weight="0.5695">Source code</keyword><keyword weight="0.45265">Computer science</keyword><keyword weight="0.48034">Static analysis</keyword><keyword weight="0.51885">Type inference</keyword><keyword weight="0.52803">Assembly language</keyword><keyword weight="0.52049">Basic block</keyword><keyword weight="0.49038">Unavailability</keyword><keyword weight="0.50826">Dependent type</keyword><keyword weight="0.56192">Type safety</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>There are many source-level analyses or instrumentation tools that enforce various safety properties. In this paper we present an infrastructure that can be used to check independently that the assembly output of such tools has the desired safety properties. By working at assembly level we avoid the complications with unavailability of source code, with source-level parsing, and we certify the code that is actually :[64],"novel feature of the framework is an extensible dependently-typed framework that supports type inference and mutation of dependent values in memory. The type system can be extended with new types as needed for the source-level tool that is certified. Using these dependent types, we are able to express the invariants enforced by CCured, a source-level instrumentation tool that guarantees type safety in legacy C programs. We can therefore check that the x86 assembly code resulting from compilation with CCured is in fact type-safe.</abstract></paper>
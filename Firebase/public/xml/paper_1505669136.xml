<paper id="1505669136"><title>Behavior consistent inheritance in UML</title><year>2000</year><authors><author org="Institut für Informationssysteme, Technische Universität Wien" id="216094903">Markus Stumptner</author><author org="School of Computer and Information Science, University of South Australia#TAB#" id="2242930301">Michael Schrefl</author></authors><n_citation>23</n_citation><doc_type>Conference</doc_type><references><reference>204413636</reference><reference>1495002195</reference><reference>1521194428</reference><reference>1555527432</reference><reference>1555729963</reference><reference>1995008247</reference><reference>1998017916</reference><reference>2099529102</reference><reference>2112694783</reference><reference>2134026332</reference><reference>2135490787</reference><reference>2161345141</reference><reference>2169802556</reference></references><venue id="1176514135" type="C">International Conference on Conceptual Modeling</venue><doi>10.1007/3-540-45393-8_38</doi><keywords><keyword weight="0.42159">Information system</keyword><keyword weight="0.45936">Hierarchical control system</keyword><keyword weight="0.43246">Data mining</keyword><keyword weight="0.45377">Notation</keyword><keyword weight="0.53008">Petri net</keyword><keyword weight="0.48869">Unified Modeling Language</keyword><keyword weight="0.44388">Computer science</keyword><keyword weight="0.54925">Finite-state machine</keyword><keyword weight="0.43155">Design methods</keyword><keyword weight="0.49496">Entity–relationship model</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Object-oriented design methods express the behavior an object exhibits over time, i.e., the object life cycle, by notations based on Petri nets or state charts. The paper considers the specialization of life cycles via inheritance relationships as a combination of extension and refinement, viewed in the context of UML state machines. Extension corresponds to the addition of states and actions, refinement refers to the decomposition of states into substates. We use the notions of observation consistency and invocation consistency to compare the behavior of object life cycles and present a set of rules to check for behavior consistency of UML state machines, based on a one-to-one mapping of a meaningful subset of state machines to Object/Behavior Diagrams.</abstract></paper>
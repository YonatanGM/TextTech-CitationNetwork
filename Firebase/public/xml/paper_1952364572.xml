<paper id="1952364572"><title>A hybrid genetic algorithm applied to automatic parallel controller code generation</title><year>1996</year><authors><author org="Dept. of Comput. Sci., Reading Univ., UK" id="140208838">F.E. Sandnes</author><author org="" id="1858451556">G.M. Megson</author></authors><n_citation>13</n_citation><doc_type>Journal</doc_type><references><reference>2031321843</reference><reference>2095265034</reference><reference>2124903056</reference><reference>2154399037</reference></references><venue id="183885566" type="J">Real-time Systems</venue><doi>10.1109/EMWRTS.1996.557799</doi><keywords><keyword weight="0.49775">Control theory</keyword><keyword weight="0.48985">Digital signal processor</keyword><keyword weight="0.45983">Computer science</keyword><keyword weight="0.4989">Scheduling (computing)</keyword><keyword weight="0.48037">Parallel computing</keyword><keyword weight="0.55348">Code generation</keyword><keyword weight="0.46462">Real-time computing</keyword><keyword weight="0.0">Parallel software</keyword><keyword weight="0.5122">Very-large-scale integration</keyword><keyword weight="0.54585">Genetic algorithm</keyword><keyword weight="0.57834">Speedup</keyword></keywords><publisher>IEEE</publisher><abstract>High performance real-time digital controllers employ parallel hardware such as transputers and digital signal processors to achieve short response times when this is not achievable with conventional uni-processor systems. Implementing such fine-grained parallel software is error-prone and difficult. We show how a hybrid genetic algorithm can be applied to automate this parallel code generation for a set of regular control problems such that significant speedup is obtained with few constraints on hardware. Genetic algorithms are particularly suited to this problem since the mapping problem is combinatorial in nature. However, one drawback of the genetic algorithm is that it is sensitive to small changes in the problem size. To overcome this problem the presented approach partitions the original problem into sub-problems, called boxes. The scheduling of these boxes is similar to the VLSI placement problem.</abstract></paper>
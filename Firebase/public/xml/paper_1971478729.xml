<paper id="1971478729"><title>From business process models to process-oriented software systems</title><year>2009</year><authors><author org="Queensland University of Technology Brisbane Australia" id="2168261166">Chun Ouyang</author><author org="University of Tartu and Queensland University of Technology, Brisbane, Australia" id="2250777962">Marlon Dumas</author><author org="Eindhoven university of Technology, Eindhoven," id="270949118">Wil M. P. Van Der Aalst</author><author org="Queensland University of Technology Brisbane Australia" id="1987818517">Arthur H. M. Ter Hofstede</author><author org="Queensland University of Technology Brisbane Australia" id="1983458687">Jan Mendling</author></authors><n_citation>198</n_citation><doc_type>Journal</doc_type><references><reference>207610428</reference><reference>1522730781</reference><reference>1526574658</reference><reference>1529322076</reference><reference>1540770095</reference><reference>1566454408</reference><reference>1815267001</reference><reference>1998638247</reference><reference>2007845800</reference><reference>2011847110</reference><reference>2037166321</reference><reference>2049061097</reference><reference>2059518671</reference><reference>2071557726</reference><reference>2097145414</reference><reference>2126728257</reference><reference>2127628615</reference><reference>2143753066</reference><reference>2145391336</reference><reference>2146438805</reference><reference>2153074919</reference><reference>2157527989</reference><reference>2162868766</reference><reference>2169696634</reference><reference>2174443976</reference><reference>2406648761</reference><reference>2798871575</reference><reference>2911625174</reference></references><venue id="142627899" type="J">ACM Transactions on Software Engineering and Methodology</venue><doi>10.1145/1555392.1555395</doi><keywords><keyword weight="0.61158">Workflow Management Coalition</keyword><keyword weight="0.44713">Systems engineering</keyword><keyword weight="0.45248">Computer science</keyword><keyword weight="0.51167">Enterprise software</keyword><keyword weight="0.55943">Process modeling</keyword><keyword weight="0.61735">Business Process Execution Language</keyword><keyword weight="0.60294">Business process modeling</keyword><keyword weight="0.68">XPDL</keyword><keyword weight="0.62592">Business Process Model and Notation</keyword><keyword weight="0.53539">Software development</keyword></keywords><publisher>ACM</publisher><abstract>Several methods for enterprise systems analysis rely on flow-oriented representations of business operations, otherwise known as business process models. The Business Process Modeling Notation (BPMN) is a standard for capturing such models. BPMN models facilitate communication between domain experts and analysts and provide input to software development projects. Meanwhile, there is an emergence of methods for enterprise software development that rely on detailed process definitions that are executed by process engines. These process definitions refine their counterpart BPMN models by introducing data manipulation, application binding, and other implementation details. The de facto standard for defining executable processes is the Business Process Execution Language (BPEL). Accordingly, a standards-based method for developing process-oriented systems is to start with BPMN models and to translate these models into BPEL definitions for subsequent refinement. However, instrumenting this method is challenging because BPMN models and BPEL definitions are structurally very different. Existing techniques for translating BPMN to BPEL only work for limited classes of BPMN models. This article proposes a translation technique that does not impose structural restrictions on the source BPMN model. At the same time, the technique emphasizes the generation of readable (block-structured) BPEL code. An empirical evaluation conducted over a large collection of process models shows that the resulting BPEL definitions are largely block-structured. Beyond its direct relevance in the context of BPMN and BPEL, the technique presented in this article addresses issues that arise when translating from graph-oriented to block-structure flow definition languages.</abstract></paper>
<paper id="1586272280"><title>A Kernel Language for Algebraic Specification and Implementation - Extended Abstract</title><year>1983</year><authors><author org="University of Edinburgh," id="2063404503">Donald Sannella</author><author org="UniversitÃ¤t Passau" id="2069719606">Martin Wirsing</author></authors><n_citation>85</n_citation><doc_type>Conference</doc_type><references><reference>1496607686</reference><reference>1507387938</reference><reference>1540695267</reference><reference>1541153481</reference><reference>1543545626</reference><reference>1549434492</reference><reference>1601937816</reference><reference>1756661417</reference><reference>1925601792</reference><reference>1966748830</reference><reference>1975103985</reference><reference>1983608286</reference><reference>1989177109</reference><reference>2012721044</reference><reference>2035625685</reference><reference>2055364993</reference></references><venue id="1189194555" type="C">Fundamentals of Computation Theory</venue><doi>10.1007/3-540-12689-9_122</doi><keywords><keyword weight="0.59111">Algebraic specification</keyword><keyword weight="0.5836">Specification language</keyword><keyword weight="0.43966">Discrete mathematics</keyword><keyword weight="0.47033">Programming language</keyword><keyword weight="0.56766">Programming language specification</keyword><keyword weight="0.45509">Computer science</keyword><keyword weight="0.46675">Theoretical computer science</keyword><keyword weight="0.55486">Formal specification</keyword><keyword weight="0.56865">Language Of Temporal Ordering Specification</keyword><keyword weight="0.48555">Semantics</keyword><keyword weight="0.5062">Recursion</keyword><keyword weight="0.51159">Transitive relation</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>A kernel specification language called ASL is presented. ASL comprises five fundamental but powerful specification-building operations and has a simple semantics. Behavioural abstraction with respect to a set of observable sorts can be expressed, and (recursive) parameterised specifications can be defined using a more powerful and more expressive parameterisation mechanism than usual. A simple notion of implementation permitting vertical and horizontal composition (i.e. it is transitive and monotonic) is adopted and compared with previous more elaborate notions. A collection of identities is given which can provide a foundation for the development of programs by transformation.</abstract></paper>
<paper id="1595694410"><title>Implementational Reflection in Silica</title><year>1991</year><authors><author org="Xerox Palo Alto Research Center#TAB#" id="2171930786">Ramana Rao</author></authors><n_citation>62</n_citation><doc_type>Conference</doc_type><references><reference>2018028877</reference><reference>2060546968</reference><reference>2078434561</reference><reference>2086970510</reference><reference>2125299991</reference><reference>2125692076</reference><reference>2129368011</reference><reference>2132055297</reference><reference>2134762177</reference><reference>2154067205</reference><reference>2168287017</reference></references><venue id="1177184315" type="C">European Conference on Object-Oriented Programming</venue><doi>10.1007/BFb0057026</doi><keywords><keyword weight="0.68303">Common Lisp</keyword><keyword weight="0.52793">Open implementation</keyword><keyword weight="0.47127">Programming language</keyword><keyword weight="0.52498">Clos network</keyword><keyword weight="0.46257">Computer science</keyword><keyword weight="0.0">Computational reflection</keyword><keyword weight="0.56157">User interface</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The value of computational reflection has been explored in a number of programming language efforts. The major claim of this paper is that an ostensibly broader view of reflection, which we call implementational reflection, can be applied to the design of other kinds of systems, accruing the same benefits that arise in the programming language case. The domain of window systems in general, and the Silica window system in particular are used to illustrate how reflection can be applied more broadly. Silica is a CLOS-based window system that is a part of the Common Lisp Interface Manager, an emerging user interface programming standard for Common Lisp.</abstract></paper>
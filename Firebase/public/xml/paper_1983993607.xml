<paper id="1983993607"><title>Dynamic Software Product Lines</title><year>2008</year><authors><author org="SINTEFICT, Trondheim" id="303352219">S. Hallsteinsen</author><author org="(Loyola College in Maryland)" id="2575727783">M. Hinchey</author><author org="Sogang University" id="2116746466">Sooyong Park</author><author org="university of Hildesheim" id="2298524033">K. Schmid</author></authors><n_citation>311</n_citation><doc_type>Journal</doc_type><references><reference>91480578</reference><reference>175636070</reference><reference>1481078745</reference><reference>1990911977</reference><reference>2002237220</reference><reference>2147525347</reference><reference>2155272711</reference><reference>2622540447</reference></references><venue id="178916657" type="J">IEEE Computer</venue><doi>10.1109/MC.2008.123</doi><keywords><keyword weight="0.47325">Mass customization</keyword><keyword weight="0.46988">Market segmentation</keyword><keyword weight="0.53919">Domain engineering</keyword><keyword weight="0.45097">Software engineering</keyword><keyword weight="0.44614">Computer science</keyword><keyword weight="0.48437">Software</keyword><keyword weight="0.59286">Software product line</keyword><keyword weight="0.43601">Documentation</keyword><keyword weight="0.55319">Software development</keyword><keyword weight="0.53455">New product development</keyword></keywords><publisher>IEEE Computer Society</publisher><abstract>The Software Engineering Institute (SEI) defines an SPL as a set of software-intensive systems that share a common, managed set of features satisfying the specific needs of a particular market segment or mission. A fundamental principle of SPLs is variability management, which involves separating the product line into three parts - common components, parts common to some but not all products, and individual products with their own specific requirements - and managing these throughout development. Using SPLs seeks to maximize reusable variation and eliminate wasteful generic development of components used only once. Although traditional SPL engineering recognizes that variation points are bound at different stages of development, and possibly also at runtime, it typically binds variation points before delivery of the software. In contrast, DSPL engineers typically arenu0027t concerned with pre-runtime variation points. However, they recognize that in practice mixed approaches might be viable, where some variation points related to the environmentu0027s static properties are bound before runtime and others related to the dynamic properties are bound at runtime.</abstract></paper>
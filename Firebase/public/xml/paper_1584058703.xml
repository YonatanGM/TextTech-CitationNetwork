<paper id="1584058703"><title>Soft Scheduling for Hardware</title><year>2001</year><authors><author org="AT&amp;T Laboratories, Cambridge," id="2161161904">Richard Sharp</author><author org="Cambridge Univ." id="163000670">Alan Mycroft</author></authors><n_citation>7</n_citation><doc_type>Conference</doc_type><references><reference>1555915743</reference><reference>1595601404</reference><reference>1608643563</reference><reference>1829244603</reference><reference>1853445766</reference><reference>2023299380</reference><reference>2042202727</reference><reference>2068528206</reference><reference>2123572303</reference><reference>2168822998</reference><reference>2293770661</reference></references><venue id="1137552346" type="C">Static Analysis Symposium</venue><doi>10.1007/3-540-47764-0_4</doi><keywords><keyword weight="0.63836">Fixed-priority pre-emptive scheduling</keyword><keyword weight="0.68329">Fair-share scheduling</keyword><keyword weight="0.56293">Scheduling (computing)</keyword><keyword weight="0.46609">Computer science</keyword><keyword weight="0.60914">Flow shop scheduling</keyword><keyword weight="0.45675">Real-time computing</keyword><keyword weight="0.67162">Two-level scheduling</keyword><keyword weight="0.65415">Rate-monotonic scheduling</keyword><keyword weight="0.67848">Dynamic priority scheduling</keyword><keyword weight="0.45926">Computer hardware</keyword><keyword weight="0.62949">Round-robin scheduling</keyword><keyword weight="0.47364">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Hardware designs typically combine parallelism and resourcesharing; a circuitu0027s correctness relies on shared resources being accessed mutually exclusively. Conventional high-level synthesis systems guarantee mutual exclusion by statically serialising access to shared resources during a compile-time process called scheduling. This approach suffers from two problems: (i ) there is a large class of practical designs which cannot be scheduled statically; and (ii) a statically fixed schedule removes some opportunities for parallelism leading to less efficient circuits. This paper surveys the expressivity of current scheduling methods and presents a new approach which alleviates the above problems: first scheduling logic is automatically generated to resolve contention for shared resources dynamically; then static analysis techniques remove redundant scheduling :[114],"call our method Soft Scheduling to highlight the analogy with Soft Typing: the aim is to retain the flexibility of dynamic scheduling whilst using static analysis to remove as many dynamic checks as possible.</abstract></paper>
<paper id="1511461976"><title>Modeling and Composing Service-Based nd Reference Process-Based Multi-enterprise Processes</title><year>2000</year><authors><author org="MCC#TAB#" id="2297191827">Hans Schuster</author><author org="MCC#TAB#" id="2941797918">Dimitrios Georgakopoulos</author><author org="MCC#TAB#" id="2799084875">Andrzej Cichocki</author><author org="MCC#TAB#" id="2665640846">Donald Baker</author></authors><n_citation>142</n_citation><doc_type>Conference</doc_type><references><reference>39280257</reference><reference>1648435844</reference><reference>1896429318</reference><reference>2034873286</reference><reference>2055487721</reference><reference>2089975742</reference><reference>2125568274</reference><reference>2126010944</reference></references><venue id="1134069326" type="C">Conference on Advanced Information Systems Engineering</venue><doi>10.1007/3-540-45140-4_17</doi><keywords><keyword weight="0.44284">Information system</keyword><keyword weight="0.47631">Information integration</keyword><keyword weight="0.44335">Information management</keyword><keyword weight="0.47637">Late binding</keyword><keyword weight="0.44152">Computer science</keyword><keyword weight="0.50409">Process modeling</keyword><keyword weight="0.47477">Implementation</keyword><keyword weight="0.46488">Systems architecture</keyword><keyword weight="0.4853">Workflow</keyword><keyword weight="0.45197">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Multi-enterprise processes (MEPs) are workflows consisting of a set of activities that are implemented by different enterprises. Tightly coupled Virtual Enterprises (VEs) typically agree on abstract MEPs (reference MEPs), to which each enterprise contributes single-enterprise processes (SEPs) that implement and refine the activities in the reference MEP. On the other end of the spectrum, loosely coupled VEs use service-based MEPs that fuse together heterogeneous services implemented and provided by different enterprises. Existing process models usually couple activities with their implementation. Therefore, they cannot effectively support such MEPs. In this paper, we introduce a Polymorphic Process Model (PPM) that supports both reference process- and service-based MEPs. To accomplish this, PPM decouples activity interface from activity implementation, and provides process polymorphism to support their mapping. In particular, PPM determines activity types from the activity interfaces, permits activity interface subtyping, and provides for the mapping of MEP activity types to concrete implementations via interface matching. We illustrate that these key PPM capabilities permit the late binding and use of multiple activity implementations within a MEP without modifying the MEP at run time or enumerating the alternative implementation at specification time.</abstract></paper>
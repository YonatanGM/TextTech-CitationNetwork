<paper id="1970712452"><title>Modula: A language for modular multiprogramming</title><year>1977</year><authors><author org="Institut für Informatik, Eidgenössische Technische Hochschule, Zürich, Switzerland" id="2327738716">Niklaus Wirth</author></authors><n_citation>148</n_citation><doc_type>Journal</doc_type><references><reference>2080133536</reference><reference>2131791649</reference><reference>2792939069</reference></references><venue id="122199241" type="J">Software - Practice and Experience</venue><doi>10.1002/spe.4380070102</doi><keywords><keyword weight="0.4288">Synchronization</keyword><keyword weight="0.46933">Programming language</keyword><keyword weight="0.52297">Programmer</keyword><keyword weight="0.45044">Computer science</keyword><keyword weight="0.50703">Multiprocessing</keyword><keyword weight="0.52875">Data type</keyword><keyword weight="0.47717">Computer multitasking</keyword><keyword weight="0.43791">Process control</keyword><keyword weight="0.5">Modular design</keyword><keyword weight="0.77576">Modula</keyword><keyword weight="0.45572">Operating system</keyword></keywords><publisher>John Wiley &amp; Sons, Ltd.</publisher><abstract>This paper defines a language called Modula, which is intended primarily for programming dedicated computer systems, including process control systems on smaller machines. The language is largely based on Pascal, but in addition to conventional block structure it introduces a so-called module structure. A module is a set of procedures, data types and variables, where the programmer has precise control over the names that are imported from and exported to the environment. Modula includes general multiprocessing facilities, namely processes, interface modules and signals. It also allows the specification of facilities that represent a computeru0027s specific peripheral devices. Those given in this paper pertain to the PDP-11.</abstract></paper>
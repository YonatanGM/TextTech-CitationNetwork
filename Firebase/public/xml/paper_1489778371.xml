<paper id="1489778371"><title>Friends need a bit more: Maintaining invariants over shared state</title><year>2004</year><authors><author org="Microsoft Research,#TAB#" id="2236272296">Michael Barnett</author><author org="Stevens Institute of Technology," id="2237376846">David A. Naumann</author></authors><n_citation>109</n_citation><doc_type>Conference</doc_type><references><reference>101802158</reference><reference>219793899</reference><reference>1510845095</reference><reference>1527032490</reference><reference>1573044584</reference><reference>1593874741</reference><reference>1620267008</reference><reference>1982262311</reference><reference>1993836075</reference><reference>1995008247</reference><reference>1998070736</reference><reference>2013368693</reference><reference>2030601112</reference><reference>2052087935</reference><reference>2090551028</reference><reference>2107995193</reference><reference>2130111506</reference><reference>2136371406</reference><reference>2137628566</reference><reference>2151131364</reference><reference>2152929251</reference><reference>2160456755</reference><reference>2161825580</reference><reference>2569787747</reference></references><venue id="1159310735" type="C">Mathematics of Program Construction</venue><doi>10.1007/978-3-540-27764-4_5</doi><keywords><keyword weight="0.41725">Discrete mathematics</keyword><keyword weight="0.47327">Separation logic</keyword><keyword weight="0.49155">Object-oriented programming</keyword><keyword weight="0.48802">Friendship</keyword><keyword weight="0.45628">Computer science</keyword><keyword weight="0.47658">Type theory</keyword><keyword weight="0.45806">Theoretical computer science</keyword><keyword weight="0.49544">Soundness</keyword><keyword weight="0.4972">Java Modeling Language</keyword><keyword weight="0.46548">Software development</keyword><keyword weight="0.43611">Distributed computing</keyword><keyword weight="0.5173">Formal verification</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>In the context of a formal programming methodology and verification system for ownership-based invariants in object-oriented programs, a friendship system is defined. Friendship is a flexible protocol that allows invariants expressed over shared state. Such invariants are more expressive than those allowed in exisiting ownership type systems because they link objects that are not in the same ownership domain. Friendship permits the modular verification of cooperating classes. This paper defines friendship, sketches a soundness proof, and provides several realistic examples.</abstract></paper>
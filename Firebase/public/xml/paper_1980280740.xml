<paper id="1980280740"><title>Software reliability via run-time result-checking</title><year>1997</year><authors><author org="&quot;University of California, Berkeley&quot;" id="2129296980">Hal Wasserman</author><author org="City Univ. of Hong Kong, Kowloon, Hong Kong; and Univ. of California, Berkeley" id="2163096604">Manuel Blum</author></authors><n_citation>182</n_citation><doc_type>Journal</doc_type><references><reference>174553187</reference><reference>1481582196</reference><reference>1487800348</reference><reference>1594335079</reference><reference>1594962164</reference><reference>1964234068</reference><reference>1970056983</reference><reference>1972300923</reference><reference>1975715978</reference><reference>1982248598</reference><reference>1985623009</reference><reference>1994135885</reference><reference>1996839061</reference><reference>2002032317</reference><reference>2005722951</reference><reference>2006912660</reference><reference>2018925011</reference><reference>2033361557</reference><reference>2053086236</reference><reference>2064968474</reference><reference>2080132708</reference><reference>2082647621</reference><reference>2094694686</reference><reference>2094878497</reference><reference>2097206148</reference><reference>2097331548</reference><reference>2132605415</reference><reference>2140681135</reference><reference>2146584722</reference><reference>2161852911</reference><reference>2293988196</reference><reference>2336485197</reference></references><venue id="118992489" type="J">Journal of the ACM</venue><doi>10.1145/268999.269003</doi><keywords><keyword weight="0.47352">Computer science</keyword><keyword weight="0.46909">Theoretical computer science</keyword><keyword weight="0.46311">Fourier transform</keyword><keyword weight="0.53718">Software</keyword><keyword weight="0.50201">Fault tolerance</keyword><keyword weight="0.44063">Linear map</keyword><keyword weight="0.5439">Software quality</keyword><keyword weight="0.53498">Randomness</keyword><keyword weight="0.55785">Debugging</keyword></keywords><publisher>ACM</publisher><abstract>We review the field of result-checking, discussing simple checkers and self-correctors. We argue that such checkers could profitably be incorporated in software as an aid to efficient debugging and enhanced reliability. We consider how to modify traditional checking methodologies to make them more appropriate for use in real-time, real-number computer systems. In particular, we suggest that checkers should be allowed to use stored randomness: that is, that they should be allowed to generate, preprocess, and store random bits prior to run-time, and then to use this information repeatedly in a series of run-time checks. In a case study of checking a general real-number linear transformation (e.g., a Fourier Transform), we present a simple checker which uses stored randomness, and a self-corrector which is particularly efficient if stored randomness is employed.</abstract></paper>
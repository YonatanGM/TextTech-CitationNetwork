<paper id="1518530753"><title>Studying the evolution and enhancement of software features</title><year>2000</year><authors><author org="" id="2436865416">Potts</author></authors><n_citation>62</n_citation><doc_type>Conference</doc_type><references><reference>1875319849</reference><reference>2065046873</reference><reference>2110537096</reference><reference>2114052939</reference><reference>2117919522</reference><reference>2133694682</reference><reference>2142255038</reference><reference>2169547242</reference></references><venue id="1160919455" type="C">International Conference on Software Maintenance</venue><doi>10.1109/ICSM.2000.883033</doi><keywords><keyword weight="0.50653">Problem domain</keyword><keyword weight="0.425">Systems engineering</keyword><keyword weight="0.50815">Software architecture description</keyword><keyword weight="0.44349">Computer science</keyword><keyword weight="0.49789">Software system</keyword><keyword weight="0.56658">Feature model</keyword><keyword weight="0.49676">Software maintenance</keyword><keyword weight="0.49882">Reference architecture</keyword><keyword weight="0.49751">Software architecture</keyword><keyword weight="0.57845">Word processing</keyword></keywords><publisher>IEEE Computer Society</publisher><abstract>The evolution and enhancement of features during system evolution can have significant effects on its coherence as well as its internal architecture. Studying the evolution of system features and concepts across a product line from an external or problem domain perspective can inform the process of identifying and designing future features. We show how we derive three primary views (morphological, functional, and an object view), from the user-level structures and operations of a system, using a case study of Microsoft Wordu0027s evolution. We show how these views illustrate feature evolution over three versions of Word. Lastly, we discuss the lessons learned from our study of feature evolution.</abstract></paper>
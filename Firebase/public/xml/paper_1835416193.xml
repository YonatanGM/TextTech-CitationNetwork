<paper id="1835416193"><title>The implementation and performance evaluation of the ADMS query optimizer: integrating query result caching and matching</title><year>1994</year><authors><author org="University of Maryland-College Park" id="2442082751">Chungmin Melvin Chen</author><author org="University of Maryland-College Park" id="258753967">Nicholas Roussopoulos</author></authors><n_citation>120</n_citation><doc_type>Conference</doc_type><references><reference>99733817</reference><reference>1506761546</reference><reference>1530765221</reference><reference>1552081212</reference><reference>1993291251</reference><reference>1998147193</reference><reference>2008907861</reference><reference>2030148067</reference><reference>2041387176</reference><reference>2044236594</reference><reference>2047809518</reference><reference>2071395959</reference><reference>2073987830</reference><reference>2111062386</reference><reference>2116476518</reference><reference>2133384222</reference><reference>2136476431</reference><reference>2152475379</reference><reference>2153329411</reference><reference>2160967997</reference><reference>2165456041</reference><reference>2295596515</reference><reference>2912093648</reference></references><venue id="1132593990" type="C">Extending Database Technology</venue><doi>10.1007/3-540-57818-8_61</doi><keywords><keyword weight="0.65135">Query throughput</keyword><keyword weight="0.71393">Query optimization</keyword><keyword weight="0.62563">Web search query</keyword><keyword weight="0.49578">Pointer (computer programming)</keyword><keyword weight="0.45418">Data mining</keyword><keyword weight="0.64617">Query expansion</keyword><keyword weight="0.59638">Cache</keyword><keyword weight="0.45253">Computer science</keyword><keyword weight="0.64098">Sargable</keyword><keyword weight="0.45145">Database</keyword><keyword weight="0.50237">Speedup</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>In this paper, we describe the design and evaluation of the ADMS optimizer. Capitalizing on a structure called Logical Access Path Schema to model the derivation relationship among cached query results, the optimizer is able to perform query matching coincidently with the optimization and generate more efficient query plans using cached results. The optimizer also features data caching and pointer caching, alternative cache replacement strategies, and different cache update strategies. An extensive set of experiments were conducted and the results showed that pointer caching and dynamic cache update strategies substantially speedup query computations and, thus, increase query throughput under situations with fair query correlation and update load. The requirement of the cache space is relatively small and the extra computation overhead introduced by the caching and matching mechanism is more than offset by the time saved in query processing.</abstract></paper>
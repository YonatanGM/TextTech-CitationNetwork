<paper id="1500197053"><title>Scheduling Unit Jobs with Compatible Release Dates on Parallel Machines with Nonstationary Speeds</title><year>1995</year><authors><author org="University of British Columbia, #TAB#" id="2695542807">Maurice Queyranne</author><author org="Technische UniversitÃ¤t Berlin, Fachbereich Mathematik (MA 6-1)" id="2139750485">Andreas S. Schulz</author></authors><n_citation>22</n_citation><doc_type>Conference</doc_type><references><reference>32729003</reference><reference>1498671329</reference><reference>1968143987</reference><reference>2020059491</reference><reference>2031612682</reference><reference>2032912812</reference><reference>2042275390</reference><reference>2075265959</reference><reference>2164278127</reference><reference>2912533262</reference><reference>2912832025</reference></references><venue id="1184093072" type="C">Integer Programming and Combinatorial Optimization</venue><doi>10.1007/3-540-59408-6_60</doi><keywords><keyword weight="0.45223">Truncation</keyword><keyword weight="0.45909">Mathematical optimization</keyword><keyword weight="0.40557">Compatibility (mechanics)</keyword><keyword weight="0.43161">Computer science</keyword><keyword weight="0.49216">Scheduling (computing)</keyword><keyword weight="0.50417">Polyhedron</keyword><keyword weight="0.50148">Convex hull</keyword><keyword weight="0.50461">Greedy algorithm</keyword><keyword weight="0.45755">Operator (computer programming)</keyword><keyword weight="0.61454">Supermodular function</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We consider the problem of nonpreemptively scheduling a set of jobs with identical processing requirements (unit jobs) on parallel machines with nonstationary speeds. In addition to the case of uniform machines, this allows for such predictable effects as operator learning and tool wear and tear, as well as such planned activities as machine upgrades, maintenance and the preassignment of other operations, all of which may affect the available processing speed of the machine at different points in time. We also allow release dates that satisfy a certain compatibility property. We show that the convex hull of feasible completion time vectors is a supermodular polyhedron. For nonidentical but compatible release dates, the supermodular function defining this polyhedron is the Dilworth truncation of a (non supermodular) function defined in a natural way from the release dates. This supermodularity result implies that the total weighted flow time can be minimized by a greedy algorithm. Supermodular polyhedra thus provide a general framework for several unit job, parallel machine scheduling problems and for their solution methods.</abstract></paper>
<paper id="1907597480"><title>A linguistic characterization of bounded oracle computation and probabilistic polynomial time</title><year>1998</year><authors><author org="Stanford Univ., CA, , USA" id="2125383417">J. Mitchell</author><author org="" id="2582270910">M. Mitchell</author><author org="" id="2217951042">A. Scedrov</author></authors><n_citation>64</n_citation><doc_type>Conference</doc_type><references><reference>1560272532</reference><reference>1829244603</reference><reference>1965442792</reference><reference>1966212263</reference><reference>1988177568</reference><reference>1994676271</reference><reference>1997143185</reference><reference>2021257181</reference><reference>2037524393</reference><reference>2069792094</reference><reference>2084788336</reference><reference>2911865844</reference></references><venue id="1150208541" type="C">Foundations of Computer Science</venue><doi>10.1109/SFCS.1998.743523</doi><keywords><keyword weight="0.57868">Simply typed lambda calculus</keyword><keyword weight="0.44528">Computer science</keyword><keyword weight="0.55757">System F</keyword><keyword weight="0.56968">Oracle</keyword><keyword weight="0.46624">Theoretical computer science</keyword><keyword weight="0.61213">NP-easy</keyword><keyword weight="0.58901">Pure type system</keyword><keyword weight="0.46501">Discrete mathematics</keyword><keyword weight="0.45647">Combinatorics</keyword><keyword weight="0.57538">Typed lambda calculus</keyword><keyword weight="0.4726">Algebra</keyword><keyword weight="0.38079">Linguistics</keyword><keyword weight="0.55516">Dependent type</keyword><keyword weight="0.55948">Curryâ€“Howard correspondence</keyword></keywords><publisher>IEEE Computer Society</publisher><abstract>We present a higher-order functional notation for polynomial-time computation with an arbitrary 0, 1-valued oracle. This formulation provides a linguistic characterization for classes such as NP and BPP, as well as a notation for probabilistic polynomial-time functions. The language is derived from Hofmannu0027s adaptation of Bellantoni-Cook safe recursion, extended to oracle computation via work derived from that of Kapron and Cook. Like Hofmannu0027s language, ours is an applied typed lambda calculus with complexity bounds enforced by a type system. The type system uses a modal operator to distinguish between two sorts of numerical expressions. Recursion can take place on only one of these sorts. The proof that the language captures precisely oracle polynomial time is model-theoretic, using adaptations of various techniques from category theory.</abstract></paper>
<paper id="1582760478"><title>Towards an Epistemic Approach to Reasoning about Concurrent Programs</title><year>1992</year><authors><author org="Free University of Amsterdam#TAB#" id="2106214946">Wiebe van der Hoek</author><author org="University of Nijmegen" id="2120329399">M. van Hulst</author><author org="University of Nijmegen" id="2982843554">John-Jules Ch. Meyer</author></authors><n_citation>5</n_citation><doc_type /><references><reference>1512867836</reference><reference>1531751116</reference><reference>1769219634</reference><reference>1984831616</reference><reference>1988699312</reference><reference>1994227541</reference><reference>2000176482</reference><reference>2022205872</reference><reference>2032265482</reference><reference>2045478049</reference><reference>2073981447</reference><reference>2088135026</reference><reference>2110425399</reference></references><venue id="" type="">Proceedings of the REX Workshop on Sematics: Foundations and Applications</venue><doi>10.1007/3-540-56596-5_37</doi><keywords><keyword weight="0.60811">Epistemic modal logic</keyword><keyword weight="0.46107">Programming language</keyword><keyword weight="0.45704">Computer science</keyword><keyword weight="0.56002">Communicating sequential processes</keyword><keyword weight="0.42764">Algorithm</keyword><keyword weight="0.47223">Interleaving</keyword><keyword weight="0.40436">Computation</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We show how epistemic logic may be used to reason about concurrent programs. Starting out from Halpern u0026 Mosesu0027 interpretation of knowledge in the context of distributed systems, where they use the interleaving model, we extend this to a setting where also truly concurrent computations can be modelled, viz. posets of action labels. Moreover, and more importantly, we prepare grounds for the verification of concurrent programs. We focus on a variant of the well-known 1978-version of Hoareu0027s Concurrent Sequential Processes (CSP) to see how the details work out for a concrete and simple language.</abstract></paper>
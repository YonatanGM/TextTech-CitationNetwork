<paper id="1595620876"><title>Concurrent garbage collection on stock hardware</title><year>1987</year><authors><author org="AT&amp;T Bell Lab, Murray Hill, NJ" id="2172281910">Stephen C. North</author><author org="AT&amp;T Bell Lab, Murray Hill, NJ" id="324107302">John H. Reppy</author></authors><n_citation>37</n_citation><doc_type>Conference</doc_type><references><reference>1770006921</reference><reference>1978055044</reference><reference>1983156473</reference><reference>2012099766</reference><reference>2028080565</reference><reference>2032593204</reference><reference>2049384349</reference><reference>2063886664</reference><reference>2076878931</reference><reference>2079813853</reference><reference>2088126145</reference><reference>2099305192</reference><reference>2112630372</reference><reference>2127007340</reference><reference>2130376240</reference><reference>2158364508</reference><reference>2158525816</reference><reference>2161531345</reference></references><venue id="1162793720" type="C">International Conference on Functional Programming</venue><doi>10.1007/3-540-18317-5_8</doi><keywords><keyword weight="0.57357">Pointer (computer programming)</keyword><keyword weight="0.57187">Indirection</keyword><keyword weight="0.61992">Garbage</keyword><keyword weight="0.448">Programming language</keyword><keyword weight="0.71261">Manual memory management</keyword><keyword weight="0.44853">Computer science</keyword><keyword weight="0.65238">Memory management</keyword><keyword weight="0.69725">Garbage collection</keyword><keyword weight="0.44047">Computer hardware</keyword><keyword weight="0.68283">Memory leak</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We have demonstrated a practical design for memory management in a concurrent system running on stack hardware. Under our modification of Brooksu0027 forwarding pointers, the only runtime costs, owing to storage reclamation, incurred by user processes are an extra level of indirection when accessing object contents and the need to scavenge when updating mutable objects. Therefore, we believe that our system can successfully off-load much of the cost of memory management to, otherwise unused, dead-time.</abstract></paper>
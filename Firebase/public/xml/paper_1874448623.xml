<paper id="1874448623"><title>Mechanical Transformation of Logic Definitions augmented with Type Information into Prolog Procedures: Some Experiments</title><year>1994</year><authors><author org="University of Namur," id="2408579227">Pierre De Boeck</author><author org="University of Namur," id="2158192849">Baudouin Le Charlier</author></authors><n_citation>5</n_citation><doc_type>Conference</doc_type><references><reference>30159670</reference><reference>49192976</reference><reference>50128451</reference><reference>1488560674</reference><reference>1501017496</reference><reference>1579672261</reference><reference>1585925557</reference><reference>1600851604</reference><reference>1829389880</reference><reference>2034493279</reference><reference>2069076448</reference></references><venue id="1168175394" type="C">Logic-based Program Synthesis and Transformation</venue><doi>10.1007/978-1-4471-3234-9_19</doi><keywords><keyword weight="0.58516">Analyser</keyword><keyword weight="0.0">Logic program</keyword><keyword weight="0.47576">Programming language</keyword><keyword weight="0.0">Type checking</keyword><keyword weight="0.43827">Reuse</keyword><keyword weight="0.45821">Computer science</keyword><keyword weight="0.45774">Permutation</keyword><keyword weight="0.44999">Algorithm</keyword><keyword weight="0.45909">Theoretical computer science</keyword><keyword weight="0.60583">Prolog</keyword><keyword weight="0.51584">Executable</keyword></keywords><publisher>Springer, London</publisher><abstract>This paper describes experiments done with a static type analyser to transform pure logic definitions (the so-called logic descriptions [7]) into executable Prolog procedures. The presented static analyser can be used in a final transformation component of a logic program synthesis system such as the systems described in [8, 18]. The paper recalls the notion of a logic description and discusses how type information can be used to relate the logic description to its intended meaning. Then the analyser and the underlying notions of type, and abstract substitution are presented. It is explained how type and mode information can be combined to derive Prolog procedures that are correct wrt given directionalities. The type analyser is able to derive procedures producing correct and well typed results, by finding correct permutations of literals in clauses. Practicality of the analyser is illustrated on three examples. It is shown that: (1) there are several (more or less clever) ways to combine type and mode information to help the analyser finding solutions, (2) explicit type checking can be avoided most of the time at run-time, (3) the analyser is able to find multidirectional procedures in many cases, (4) no share constraints are useful to find more solutions when restricted uses are chosen for the procedures (allowing for elaborate optimizations). The analyser is also useful to combine pure and impure logic procedures as it allows to reuse any Prolog procedure provided that it is given a behaviour.</abstract></paper>
<paper id="1576135198"><title>Compactly Representing First-Order Structures for Static Analysis</title><year>2002</year><authors><author org="Tel‐Aviv University ," id="1980901250">Roman Manevich</author><author org="IBM T.J. Watson research center" id="1961305742">G. Ramalingam</author><author org="IBM T.J. Watson research center" id="2593155335">John Field</author><author org="IBM T.J. Watson research center" id="2181284719">Deepak Goyal</author><author org="Tel‐Aviv University ," id="1345056057">Mooly Sagiv</author></authors><n_citation>25</n_citation><doc_type>Conference</doc_type><references><reference>1494199306</reference><reference>1498792107</reference><reference>1537003042</reference><reference>1557880268</reference><reference>1578141429</reference><reference>1955766098</reference><reference>1987469449</reference><reference>2007541742</reference><reference>2015809097</reference><reference>2030224590</reference><reference>2054120966</reference><reference>2054796180</reference><reference>2069437435</reference><reference>2098495346</reference><reference>2098590705</reference><reference>2170577595</reference><reference>2914559425</reference></references><venue id="1137552346" type="C">Static Analysis Symposium</venue><doi>10.1007/3-540-45789-5_16</doi><keywords><keyword weight="0.51232">Data structure</keyword><keyword weight="0.45549">Computer science</keyword><keyword weight="0.51033">Abstract interpretation</keyword><keyword weight="0.52755">Static analysis</keyword><keyword weight="0.53657">Binary decision diagram</keyword><keyword weight="0.46201">Algorithm</keyword><keyword weight="0.47181">Theoretical computer science</keyword><keyword weight="0.49563">First-order logic</keyword><keyword weight="0.5035">Data type</keyword><keyword weight="0.54978">Program analysis</keyword><keyword weight="0.495">Boolean data type</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>A fundamental bottleneck in applying sophisticated static analyses to large programs is the space consumed by abstract program states. This is particularly true when analyzing programs that make extensive use of heap-allocated data. The TVLA (Three-Valued Logic Analysis) program analysis and verification system models dynamic allocation precisely by representing program states as first-order structures. In such a representation, a finite collection of predicates is used to define states; the predicates range over a universe of individuals that may evolve--expand and contract--during analysis. Evolving first-order structures can be used to encode a wide variety of analyses, including most analyses whose abstract states are represented by directed graphs or maps. This paper addresses the problem of space consumption in such analyses by describing and evaluating two novel structure representation techniques. One technique uses ordered binary decision diagrams (OBDDs); the other uses a variant of a functional map data structure. Using a suite of benchmark analysis problems, we systematically compare the new representations with TVLAu0027s existing state representation. The results show that both the OBDD and functional implementations reduce space consumption in TVLA by a factor of 4 to 10 relative to the current TVLA state representation, without compromising analysis time. In addition to TVLA, we believe that our results are applicable to many program analysis systems that represent states as graphs, maps, or other structures of similar complexity.</abstract></paper>
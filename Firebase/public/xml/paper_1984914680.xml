<paper id="1984914680"><title>An interval-based approach to exhaustive and incremental interprocedural data-flow analysis</title><year>1990</year><authors><author org="IBM - T. J. Watson Research Center, Yorktown Heights, NY" id="2547328848">Michael Burke</author></authors><n_citation>116</n_citation><doc_type>Journal</doc_type><references><reference>79448102</reference><reference>110734221</reference><reference>1964583443</reference><reference>1964714157</reference><reference>1965253335</reference><reference>1966449927</reference><reference>1969077685</reference><reference>1970357395</reference><reference>1972961187</reference><reference>1980856286</reference><reference>1981131019</reference><reference>1981577498</reference><reference>1990199656</reference><reference>1991133357</reference><reference>1995405030</reference><reference>2006084860</reference><reference>2010194128</reference><reference>2015143242</reference><reference>2016558072</reference><reference>2021437589</reference><reference>2022043656</reference><reference>2023222549</reference><reference>2023541076</reference><reference>2025168586</reference><reference>2038202164</reference><reference>2038282408</reference><reference>2040588708</reference><reference>2043555680</reference><reference>2047615655</reference><reference>2050464392</reference><reference>2053152889</reference><reference>2060630116</reference><reference>2066575220</reference><reference>2077617866</reference><reference>2087493276</reference><reference>2090893462</reference><reference>2096139068</reference><reference>2103795388</reference><reference>2104734478</reference><reference>2116098983</reference><reference>2118382442</reference><reference>2119179558</reference><reference>2124153277</reference><reference>2146441023</reference><reference>2162436812</reference></references><venue id="41449414" type="J">ACM Transactions on Programming Languages and Systems</venue><doi>10.1145/78969.78963</doi><keywords><keyword weight="0.45507">Programming language</keyword><keyword weight="0.45342">Computer science</keyword><keyword weight="0.54104">Data-flow analysis</keyword><keyword weight="0.47282">Algorithm</keyword><keyword weight="0.47209">Theoretical computer science</keyword><keyword weight="0.50988">Compiler</keyword><keyword weight="0.57267">Call graph</keyword><keyword weight="0.5826">Alias analysis</keyword><keyword weight="0.5297">Interval arithmetic</keyword><keyword weight="0.56271">Transitive closure</keyword><keyword weight="0.50494">Sparse matrix</keyword><keyword weight="0.51353">Data flow diagram</keyword></keywords><publisher>ACM</publisher><abstract>We reformulate interval analysis so that it can he applied to any monotone data-flow problem, including the nonfast problems of flow-insensitive interprocedural analysis. We then develop an incremental interval analysis technique that can be applied to the same class of problems. When applied to flow-insensitive interprocedural data-flow problems, the resulting algorithms are simple, practical, and efficient. With a single update, the incremental algorithm can accommodate any sequence of program changes that does not alter the structure of the program call graph. It can also accommodate a large class of structural changes. For alias analysis, we develop an incremental algorithm that obtains the exact solution as computed by an exhaustive algorithm. Finally, we develop a transitive closure algorithm that is particularly well suited to the very sparse matrices associated with the problems we address.</abstract></paper>
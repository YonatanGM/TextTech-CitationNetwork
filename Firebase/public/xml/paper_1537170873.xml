<paper id="1537170873"><title>Computing circumscriptive databases, I: theory and algorithms</title><year>1995</year><authors><author org="Cornell University, Ithaca -- NY" id="321207788">Anil Nerode</author><author org="University of Maryland-College Park" id="2109621001">Raymond T. Ng</author><author org="University of Maryland-College Park" id="2261167843">V. S. Subrahmanian</author></authors><n_citation>27</n_citation><doc_type>Journal</doc_type><references><reference>1994801292</reference><reference>1998363560</reference><reference>2004352874</reference><reference>2037688519</reference><reference>2086010529</reference><reference>2141751591</reference><reference>2143659798</reference><reference>2913309218</reference></references><venue id="59933527" type="J">Information &amp; Computation</venue><doi>10.1006/inco.1995.1005</doi><keywords><keyword weight="0.53033">Query language</keyword><keyword weight="0.47117">Programming language</keyword><keyword weight="0.54552">Relational database</keyword><keyword weight="0.47061">Theoretical computer science</keyword><keyword weight="0.50586">Integer programming</keyword><keyword weight="0.49787">Linear programming</keyword><keyword weight="0.5462">Compile time</keyword><keyword weight="0.46015">Unification</keyword><keyword weight="0.45406">Algorithm</keyword><keyword weight="0.53369">Circumscription</keyword><keyword weight="0.52552">Relational database management system</keyword><keyword weight="0.39731">Mathematics</keyword><keyword weight="0.44168">Database</keyword></keywords><publisher>Academic Press, Inc.</publisher><abstract>Abstract Though circumscription was introduced by McCarthy over a decade ago, there has been relatively little work on algorithms for computing circumscriptive databases. In this paper, we develop algorithms to compute the preferred models of circumscriptive databases at compile-time using mixed integer linear programming techniques. Two advantages of this (bottom-up) approach are that it makes efficient re-use of previous computations and it provides much faster run-time performance. Some other advantages of using linear programming to automate deduction at compile time are that its re-optimization facilities elegantly accommodate database updates and also that it leads to a completely declarative formulation in which ordering of rules and literals in rule bodies plays no real role. Finally, we plan to use a standard relational database system as our run-time environment; this should yield relatively fast run-time processing, and provide a more expressive query language in which aggregates and the like can be expressed easily.</abstract></paper>
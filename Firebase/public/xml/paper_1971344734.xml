<paper id="1971344734"><title>Analysis of recursive types in Lisp-like languages</title><year>1992</year><authors><author org="" id="2280153189">Edward Wang</author><author org="" id="2982727484">Paul N. Hilfinger</author></authors><n_citation>10</n_citation><doc_type>Conference</doc_type><references><reference>1970061809</reference><reference>1975914482</reference><reference>1982582946</reference><reference>2001507716</reference><reference>2045818721</reference><reference>2061285335</reference><reference>2071996346</reference><reference>2075872176</reference><reference>2088064948</reference><reference>2088126145</reference><reference>2094337139</reference><reference>2102890180</reference><reference>2139966078</reference><reference>2166822586</reference></references><venue id="1162793720" type="C">International Conference on Functional Programming</venue><doi>10.1145/141471.141544</doi><keywords><keyword weight="0.0">Graph</keyword><keyword weight="0.53253">Alias</keyword><keyword weight="0.47745">Programming language</keyword><keyword weight="0.0">Type checking</keyword><keyword weight="0.45889">Computer science</keyword><keyword weight="0.61711">Lisp</keyword><keyword weight="0.4901">Grammar</keyword><keyword weight="0.68478">Algebraic data type</keyword><keyword weight="0.47105">Theoretical computer science</keyword><keyword weight="0.73453">Recursive data type</keyword><keyword weight="0.54793">Recursion</keyword></keywords><publisher>ACM</publisher><abstract>We introduce a new algorithm to analyze recursive, structured types. It derives information from object uses (accesser functions with type checking), as well as from object allocation. The type description is a form of graph grammar and is naturally finite even in the presence of loops. The intended use of the algorithm is to discover and remove unnecessary type checks, but it can be augmented to provide alias information as well.</abstract></paper>
<paper id="1978509573"><title>Mixed computation of Prolog programs</title><year>1988</year><authors><author org="Department of Computing, Imperial College of Science and Technology, London, England" id="2149647896">D. A. Fuller</author><author org="Department of Computing, Imperial College of Science and Technology, London, England" id="2147258895">S. Abramsky</author></authors><n_citation>25</n_citation><doc_type>Journal</doc_type><references><reference>272607959</reference><reference>1512455034</reference><reference>1566968514</reference><reference>1574621558</reference><reference>1912157869</reference><reference>1996081324</reference><reference>2049583580</reference><reference>2057731509</reference><reference>2067693540</reference><reference>2132063146</reference></references><venue id="165364243" type="J">New Generation Computing</venue><doi>10.1007/BF03037134</doi><keywords><keyword weight="0.43613">Residual</keyword><keyword weight="0.48101">Programming language</keyword><keyword weight="0.53596">Partial evaluation</keyword><keyword weight="0.46141">Computer science</keyword><keyword weight="0.59436">Correctness</keyword><keyword weight="0.46196">Theoretical computer science</keyword><keyword weight="0.55784">Compiler</keyword><keyword weight="0.5761">Prolog</keyword><keyword weight="0.48234">Computation</keyword></keywords><publisher>Ohmsha</publisher><abstract>This paper describes theoretical as well as implementation issues involved in the design of amix partial evaluator, starting from an interpretive specification using Prolog as the source language. First, the general theory of mixed computation is shown, together with the description of some of the problems involved in it. After this, the design of amix partial evaluator for a subset of Prolog is explained. Here, three algorithms with increasing complexity are shown. Finally, a correctness criterion for themix process is presented, together with the proof that the previously shown algorithms generate correct residual programs.</abstract></paper>
<paper id="1964669678"><title>BIASED SEARCH TREES</title><year>1985</year><authors><author org="University of Wisconsin-Madison" id="2642208471">Samuel W. Bent</author><author org="University of Wisconsin-Madison" id="1965422134">Daniel Dominic Sleator</author><author org="University of Wisconsin-Madison" id="350567680">Robert Endre Tarjan</author></authors><n_citation>128</n_citation><doc_type>Journal</doc_type><references><reference>46530334</reference><reference>1969218606</reference><reference>1972027649</reference><reference>1986022261</reference><reference>1989524012</reference><reference>2009319645</reference><reference>2018804864</reference><reference>2021615496</reference><reference>2026166434</reference><reference>2046792522</reference><reference>2049311920</reference><reference>2068373264</reference><reference>2092885083</reference><reference>2112198603</reference><reference>2130055503</reference></references><venue id="153560523" type="J">SIAM Journal on Computing</venue><doi>10.1137/0214041</doi><keywords><keyword weight="0.57144">Scapegoat tree</keyword><keyword weight="0.58833">Geometry of binary search trees</keyword><keyword weight="0.56581">Beam search</keyword><keyword weight="0.43759">Theoretical computer science</keyword><keyword weight="0.62314">Weight-balanced tree</keyword><keyword weight="0.56941">Jump search</keyword><keyword weight="0.63495">Ternary search tree</keyword><keyword weight="0.60637">Binary search tree</keyword><keyword weight="0.39656">Mathematics</keyword><keyword weight="0.56631">Search tree</keyword></keywords><publisher>Society for Industrial and Applied Mathematics</publisher><abstract>We consider the problem of storing items from a totally ordered set in a search tree so that the access time for a given item depends on a known estimate of the access frequency of the item. We describe two related classes of biased search trees whose average access time is within a constant factor of the minimum and that are easy to update under insertions, deletions and more radical update operations. We present and analyze efficient update algorithms for biased search trees. We list several applications of such trees.</abstract></paper>
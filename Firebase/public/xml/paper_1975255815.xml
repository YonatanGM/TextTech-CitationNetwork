<paper id="1975255815"><title>Specification matching of software components</title><year>1997</year><authors><author org="Xerox Corp., Webster, NY." id="309463339">Amy Moormann Zaremski</author><author org="Carnegie Mellon University, Pittsburgh Pa" id="1584891692">Jeannette M. Wing</author></authors><n_citation>480</n_citation><doc_type>Journal</doc_type><references><reference>163839833</reference><reference>1498870459</reference><reference>1535103785</reference><reference>1583095677</reference><reference>1588324477</reference><reference>1604010699</reference><reference>1956559956</reference><reference>1968856744</reference><reference>1973565420</reference><reference>1995008247</reference><reference>1996575083</reference><reference>2000735653</reference><reference>2006763843</reference><reference>2037789583</reference><reference>2047181711</reference><reference>2059295282</reference><reference>2069159459</reference><reference>2071172532</reference><reference>2078095352</reference><reference>2090855673</reference><reference>2091007968</reference><reference>2100591395</reference><reference>2104182286</reference><reference>2107016388</reference><reference>2111164171</reference><reference>2118003450</reference><reference>2119600129</reference><reference>2126129257</reference><reference>2155024699</reference><reference>2160107280</reference><reference>2161825580</reference><reference>2165871256</reference><reference>2398663808</reference></references><venue id="142627899" type="J">ACM Transactions on Software Engineering and Methodology</venue><doi>10.1145/261640.261641</doi><keywords><keyword weight="0.58503">Software design</keyword><keyword weight="0.47081">Programming language</keyword><keyword weight="0.46466">Computer science</keyword><keyword weight="0.6181">Design by contract</keyword><keyword weight="0.62345">Formal specification</keyword><keyword weight="0.46355">Theoretical computer science</keyword><keyword weight="0.58676">Component-based software engineering</keyword><keyword weight="0.59434">Formal methods</keyword><keyword weight="0.63246">Software requirements specification</keyword><keyword weight="0.60063">Software construction</keyword><keyword weight="0.57898">Software development</keyword></keywords><publisher>ACM</publisher><abstract>Specification matching is a way to compare two software components, based on descriptions of the componentu0027s behaviors. In the context of software reuse and library retrieval, it can help determine whether one component can be substituted for another or how one can be modified to fit the requirements of the other. In the context of object-oriented programming, it can help determine when one type is a behavioral subtype of another. We use formal specifications to describe the behavior of software components and, hence, to determine whether two components match. We give precise definitions of not just exact match, but, more relevantly, various flavors of relaxed match. These definitions capture the notions of generalization, specialization, and substitutability of software components. Since our formal specifications are pre- and postconditions written as predicates in first-order logic, we rely on theorem proving to determine match and mismatch. We give examples from our implementation of specification matching using the Larch Prover.</abstract></paper>
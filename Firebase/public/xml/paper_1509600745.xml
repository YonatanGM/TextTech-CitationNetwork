<paper id="1509600745"><title>Uniprocessor Garbage Collection Techniques</title><year>1992</year><authors><author org="University of Texas" id="2166593280">Paul R. Wilson</author></authors><n_citation>598</n_citation><doc_type>Conference</doc_type><references><reference>1568808662</reference><reference>1595620876</reference><reference>1597122400</reference><reference>1965336482</reference><reference>1965601529</reference><reference>1967121117</reference><reference>1969235224</reference><reference>1972307439</reference><reference>1972496983</reference><reference>1973638350</reference><reference>1978899144</reference><reference>1982231409</reference><reference>1983156473</reference><reference>1987079491</reference><reference>1987691231</reference><reference>2000387981</reference><reference>2005907808</reference><reference>2012099766</reference><reference>2016136767</reference><reference>2024787240</reference><reference>2028048148</reference><reference>2028080565</reference><reference>2028431783</reference><reference>2045255985</reference><reference>2046866979</reference><reference>2049820860</reference><reference>2050083119</reference><reference>2053986424</reference><reference>2055957613</reference><reference>2058528876</reference><reference>2058821858</reference><reference>2061248378</reference><reference>2061995249</reference><reference>2062662828</reference><reference>2063886664</reference><reference>2076584579</reference><reference>2076599476</reference><reference>2076602346</reference><reference>2076878931</reference><reference>2079813853</reference><reference>2080953060</reference><reference>2083276428</reference><reference>2086972019</reference><reference>2088414851</reference><reference>2127007340</reference><reference>2130376240</reference><reference>2131129592</reference><reference>2138557520</reference><reference>2141157907</reference><reference>2156956446</reference><reference>2158364508</reference><reference>2158525816</reference><reference>2159608022</reference><reference>2161531345</reference><reference>2165971729</reference><reference>2200732047</reference></references><venue id="1160224924" type="C">International Symposium on Memory Management</venue><doi>10.1007/BFb0017182</doi><keywords><keyword weight="0.48033">Free list</keyword><keyword weight="0.58174">Garbage</keyword><keyword weight="0.49781">Uniprocessor system</keyword><keyword weight="0.45869">Virtual memory</keyword><keyword weight="0.42987">Computer science</keyword><keyword weight="0.6779">Manual memory management</keyword><keyword weight="0.42801">Parallel computing</keyword><keyword weight="0.42526">Real-time computing</keyword><keyword weight="0.57964">Reference counting</keyword><keyword weight="0.59567">Hazard pointer</keyword><keyword weight="0.71767">Garbage collection</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We survey basic garbage collection algorithms, and variations such as incremental and generational collection. The basic algorithms include reference counting, mark-sweep, mark-compact, copying, and treadmill collection. Incremental techniques can keep garbage collection pause times short, by interleaving small amounts of collection work with program execution. Generational schemes improve efficiency and locality by garbage collecting a smaller area more often, while exploiting typical lifetime characteristics to avoid undue overhead from long-lived objects.</abstract></paper>
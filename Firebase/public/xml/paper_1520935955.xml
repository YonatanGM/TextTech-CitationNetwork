<paper id="1520935955"><title>Tabling for non-monotonic programming</title><year>1999</year><authors><author org="Department of Computer Science, SUNY at Stony Brook, Stony Brook, NY 11794&amp;dash" id="2291248690">Terrance Swift</author></authors><n_citation>71</n_citation><doc_type>Journal</doc_type><references><reference>12636371</reference><reference>36835666</reference><reference>47323645</reference><reference>177476951</reference><reference>185907670</reference><reference>1491076378</reference><reference>1503973138</reference><reference>1511711492</reference><reference>1518621415</reference><reference>1520957705</reference><reference>1522225310</reference><reference>1524332517</reference><reference>1565148621</reference><reference>1577536563</reference><reference>1586430014</reference><reference>1595745052</reference><reference>1672891595</reference><reference>1859992415</reference><reference>1874075798</reference><reference>1889481706</reference><reference>1968513265</reference><reference>1971107784</reference><reference>1979064340</reference><reference>1980589711</reference><reference>1984704149</reference><reference>1984715534</reference><reference>1997210046</reference><reference>1998915208</reference><reference>2001805670</reference><reference>2021567838</reference><reference>2023141722</reference><reference>2028667927</reference><reference>2031868932</reference><reference>2061236588</reference><reference>2070598037</reference><reference>2091478774</reference><reference>2100264125</reference><reference>2129802691</reference><reference>2132574120</reference><reference>2133045600</reference><reference>2403719690</reference></references><venue id="90199469" type="J">Annals of Mathematics and Artificial Intelligence</venue><doi>10.1023/A:1018990308362</doi><keywords><keyword weight="0.59268">SLD resolution</keyword><keyword weight="0.47514">Programming language</keyword><keyword weight="0.52373">Model checking</keyword><keyword weight="0.62675">Horn clause</keyword><keyword weight="0.45935">Computer science</keyword><keyword weight="0.4638">Theoretical computer science</keyword><keyword weight="0.61459">Prolog</keyword><keyword weight="0.58951">Stable model semantics</keyword><keyword weight="0.64114">Logic programming</keyword><keyword weight="0.47475">Rotation formalisms in three dimensions</keyword><keyword weight="0.47617">Semantics</keyword></keywords><publisher>Kluwer Academic Publishers</publisher><abstract>Nondmonotonic extensions add power to logic programs. However, the main logic programming language, Prolog, is widely recognized as inadequate to implement these extensions due to its weak termination and complexity properties. By extending Prologâ€™s SLD resolution with tabling, Prolog can be improved in several ways. Tabling can allow a logic programming system to compute the welldfounded semantics for programs with bounded term depth, and to do so with polynomial data complexity. By exploiting these properties, tabling allows a variety of nondmonotonic extensions to be efficiently implemented, and used to solve practical problems. In this paper we describe tabling as it is implemented in the XSB system and show how it can be used to construct metadinterpreters (or preprocessors) for two sample formalisms: the WelldFounded Semantics with Explicit Negation, and Generalized Annotated Logic Programs. We also describe how nondmonotonic extensions are used in practical applications such as psychiatric diagnosis, extraction of information from poorly structured textual data, and model checking.</abstract></paper>
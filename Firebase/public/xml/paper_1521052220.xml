<paper id="1521052220"><title>Verifying Abstractions of Timed Systems</title><year>1996</year><authors><author org="University of California at Berkeley" id="80569443">Serdar Tasiran</author><author org="Bell-Labs" id="689646243">Rajeev Alur</author><author org="Bell-Labs" id="2468610965">Robert P. Kurshan</author><author org="University of California at Berkeley" id="2038038819">Robert K. Brayton</author></authors><n_citation>80</n_citation><doc_type>Conference</doc_type><references><reference>1500239546</reference><reference>1796678419</reference><reference>2000302396</reference><reference>2009965218</reference><reference>2021473546</reference><reference>2043695863</reference><reference>2098817244</reference><reference>2101508170</reference><reference>2118802216</reference><reference>2145778564</reference><reference>2153273838</reference><reference>2176837466</reference><reference>2293400264</reference></references><venue id="1145706541" type="C">International Conference on Concurrency Theory</venue><doi>10.1007/3-540-61604-7_75</doi><keywords><keyword weight="0.52524">Asynchronous communication</keyword><keyword weight="0.44659">Abstraction</keyword><keyword weight="0.41059">Check-in</keyword><keyword weight="0.46101">Computer science</keyword><keyword weight="0.4934">Queue</keyword><keyword weight="0.47133">Theoretical computer science</keyword><keyword weight="0.53511">Decidability</keyword><keyword weight="0.50834">Homomorphism</keyword><keyword weight="0.50031">Equivalence class</keyword><keyword weight="0.52941">Asynchronous circuit</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Given two descriptions of a real-time system at different levels of abstraction, we consider the problem of proving that the refined representation is a correct implementation of the abstract one. To avoid the complexity of building a representation for the refined system in its entirety, we develop a compositional framework for the implementation check to be carried out in a module-by-module manner using assume-guarantee style proof rules. On the algorithmic side, we show that the problem of checking the existence of timed simulation relations, a sufficient condition for correct implementation, is decidable. We study state homomorphisms as a way of specifying a correspondence between two modules. We present an algorithm for checking if a given mapping is a homomorphism preserving timed behaviors. We have implemented this check in the verifier Cospan, and applied our method to the compositional verification of an asynchronous queue circuit.</abstract></paper>
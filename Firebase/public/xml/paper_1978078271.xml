<paper id="1978078271"><title>Specifying the Semantics of while Programs: A Tutorial and Critique of a Paper by Hoare and Lauer</title><year>1981</year><authors><author org="Laboratory for Computer Science, M.I.T., 545 Technology Square, Cambridge, MA" id="2082509128">Irene Greif</author><author org="Laboratory for Computer Science, M.I.T., 545 Technology Square, Cambridge, MA" id="2250310737">Albert R. Meyer</author></authors><n_citation>17</n_citation><doc_type>Journal</doc_type><references><reference>101620361</reference><reference>1490966766</reference><reference>1574129634</reference><reference>1869423547</reference><reference>1965790939</reference><reference>2059034970</reference><reference>2066210260</reference><reference>2077766002</reference><reference>2095224573</reference><reference>2103953153</reference><reference>2111706174</reference><reference>2113074643</reference><reference>2113090411</reference><reference>2117436651</reference></references><venue id="41449414" type="J">ACM Transactions on Programming Languages and Systems</venue><doi>10.1145/357146.357151</doi><keywords><keyword weight="0.64646">Predicate transformer semantics</keyword><keyword weight="0.62518">Formal semantics (linguistics)</keyword><keyword weight="0.66923">Operational semantics</keyword><keyword weight="0.63827">Axiomatic semantics</keyword><keyword weight="0.45405">Programming language</keyword><keyword weight="0.43187">Computer science</keyword><keyword weight="0.60857">Computational semantics</keyword><keyword weight="0.64231">Denotational semantics</keyword><keyword weight="0.62838">Action semantics</keyword><keyword weight="0.43971">Theoretical computer science</keyword><keyword weight="0.63234">Well-founded semantics</keyword></keywords><publisher>ACM</publisher><abstract>Abstract : Three kinds of mathematical objects are considered which can be designated as the u0027meaning or u0027semanticsu0027 of programs: binary relations between initial and final states, binary relations on predicates (partial correctness semantics), and functionals from predicates to predicates (predicate transformers). We exhibit various formal specification mechanisms: induction on program syntax, axioms, and deductive systems. We show that each kind of semantics can be specified by several different mechanisms. As long as arbitrary predicates on states are permitted, each kind of semantics uniquely determines the others -- with the sole exception of the weakest pre-condition semantics for nondeterministic programs.</abstract></paper>
<paper id="1815643100"><title>A Typed Intermediate Language for Flow-Directed Compilation</title><year>1997</year><authors><author org="Boston University" id="2138645069">J. B. Wells</author><author org="Harvard University" id="1963484177">Allyn Dimock</author><author org="Boston College ," id="2424382250">Robert Muller</author><author org="Wellesley  College" id="100279138">Franklyn A. Turbak</author></authors><n_citation>21</n_citation><doc_type>Conference</doc_type><references><reference>1507723317</reference><reference>1552909716</reference><reference>1553391613</reference><reference>1568624484</reference><reference>1580664042</reference><reference>1595372275</reference><reference>1963954367</reference><reference>1976808561</reference><reference>2005958145</reference><reference>2016076634</reference><reference>2022443117</reference><reference>2030916392</reference><reference>2068465106</reference><reference>2107821848</reference><reference>2118227920</reference><reference>2169761811</reference><reference>2171691057</reference></references><venue id="2756386172" type="C">Colloquium on trees in Algebra and Programming</venue><doi>10.1007/BFb0030639</doi><keywords><keyword weight="0.57854">Union type</keyword><keyword weight="0.45269">Programming language</keyword><keyword weight="0.75823">Typed lambda calculus</keyword><keyword weight="0.41604">Computer science</keyword><keyword weight="0.73228">System F</keyword><keyword weight="0.48222">Call site</keyword><keyword weight="0.5237">Compiler</keyword><keyword weight="0.63732">Type inference</keyword><keyword weight="0.0">Intermediate language</keyword><keyword weight="0.4128">Encoding (memory)</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>We present a typed intermediate language λCIL for optimizing compilers for function-oriented and polymorphically typed programming languages (e.g., ML). The language λCIL is a typed lambda calculus with product, sum, intersection, and union types as well as function types annotated with flow labels. A novel formulation of intersection and union types supports encoding flow information in the typed program representation. This flow information can direct optimization.</abstract></paper>
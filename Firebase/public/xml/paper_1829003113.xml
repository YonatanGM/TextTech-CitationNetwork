<paper id="1829003113"><title>Task Allocation and Precedence Relations for Distributed Real-Time Systems</title><year>1987</year><authors><author org="Department of Computer Science, University of California" id="2647091977">Chu</author><author org="" id="2420197633">Lan</author></authors><n_citation>159</n_citation><doc_type>Journal</doc_type><references><reference>226125936</reference><reference>1486083926</reference><reference>1977774371</reference><reference>2022142019</reference><reference>2022396748</reference><reference>2035019610</reference><reference>2051249422</reference><reference>2090189305</reference><reference>2093733190</reference><reference>2149724016</reference></references><venue id="157670870" type="J">IEEE Transactions on Computers</venue><doi>10.1109/TC.1987.1676960</doi><keywords><keyword weight="0.46032">Bottleneck</keyword><keyword weight="0.44036">Data processing</keyword><keyword weight="0.44998">Data transmission</keyword><keyword weight="0.45191">Computer science</keyword><keyword weight="0.45477">Parallel computing</keyword><keyword weight="0.0">Parallel processing</keyword><keyword weight="0.48961">Response time</keyword><keyword weight="0.4555">Real-time computing</keyword><keyword weight="0.0">Execution time</keyword><keyword weight="0.49008">Application software</keyword><keyword weight="0.43745">Mathematical logic</keyword><keyword weight="0.46014">Distributed computing</keyword></keywords><publisher>IEEE</publisher><abstract>In a distributed processing system with the application software partitioned into a set of program modules, allocation of those modules to the processors is an important problem. This paper presents a method for optimal module allocation that satisfies certain performance constraints. An objective function that includes the intermodule communication (IMC) and accumulative execution time (AET) of each module is proposed. It minimizes the bottleneck-processor utilizationâ€”a good principle for task allocation. Next, the effects of precedence relationship (PR) among program modules on response time are studied. Both simulation and analytical results reveal that the program-size ratio between two consecutive modules plays an important role in task response time. Finally, an algorithm based on PR, AET, and IMC and on the proposed objective function is presented. This algorithm generates better module assignments than those that do not consider the PR effects.</abstract></paper>
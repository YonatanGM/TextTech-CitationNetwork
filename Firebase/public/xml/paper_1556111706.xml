<paper id="1556111706"><title>Using Types and Inheritance in Object-Oriented Languages</title><year>1987</year><authors><author org="Digital Equipment Corp., Hudson, MA#TAB#" id="1964535105">Daniel C. Halbert</author><author org="Digital Equipment Corp., Hudson, MA#TAB#" id="2664666772">Patrick D. O'Brien</author></authors><n_citation>27</n_citation><doc_type>Conference</doc_type><references><reference>1770006921</reference><reference>2024490882</reference><reference>2038497675</reference><reference>2055900537</reference><reference>2148817888</reference></references><venue id="1177184315" type="C">European Conference on Object-Oriented Programming</venue><doi>10.1007/3-540-47891-4_3</doi><keywords><keyword weight="0.66991">Object-based language</keyword><keyword weight="0.47322">Programming language</keyword><keyword weight="0.62352">Object-oriented programming</keyword><keyword weight="0.45799">Computer science</keyword><keyword weight="0.48025">Subtyping</keyword><keyword weight="0.46361">Hierarchy</keyword><keyword weight="0.0">Software programming</keyword><keyword weight="0.59225">Abstract type</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>If the object-oriented style of programming hopes to live up to its potential as an improved methodology for software programming, a clear understanding of how to use types and inheritance is essential. Our experiences with using object-oriented languages and teaching object-oriented techniques to other programmers have shown that effective use of types and inheritance may be problematic. There are no concrete guidelines to assist programmers, and the existing aphorisms often create interpretation problems for novice object-oriented programmers. In this paper we look at how types, subtyping, and inheritance are used in object-oriented languages. We discuss the different ways that types and type hierarchies can be used to structure programs. We illustrate appropriate use of these concepts through examples and develop guidelines to assist programmers in using the object-oriented methodology effectively.</abstract></paper>
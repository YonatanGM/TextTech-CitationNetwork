<paper id="1967121117"><title>The measured cost of conservative garbage collection</title><year>1993</year><authors><author org="Department of Computer Science, Campus Box 430, University of Colorado, Boulder CO 80309â€“0430, U.S.A." id="2406631840">Benjamin Zorn</author></authors><n_citation>110</n_citation><doc_type>Journal</doc_type><references><reference>1965699975</reference><reference>1974716894</reference><reference>2005907808</reference><reference>2028048148</reference><reference>2028080565</reference><reference>2060331194</reference><reference>2076878931</reference><reference>2103913570</reference><reference>2106331723</reference><reference>2127007340</reference><reference>2133304975</reference><reference>2141157907</reference><reference>2158364508</reference><reference>2888177224</reference></references><venue id="122199241" type="J">Software - Practice and Experience</venue><doi>10.1002/spe.4380230704</doi><keywords><keyword weight="0.58209">Garbage</keyword><keyword weight="0.45243">Central processing unit</keyword><keyword weight="0.45845">Programmer</keyword><keyword weight="0.44371">Computer science</keyword><keyword weight="0.0">Dynamic memory management</keyword><keyword weight="0.68504">Manual memory management</keyword><keyword weight="0.68823">Garbage collection</keyword><keyword weight="0.57126">Allocator</keyword><keyword weight="0.63396">Garbage in, garbage out</keyword><keyword weight="0.43376">Operating system</keyword><keyword weight="0.43598">Database</keyword></keywords><publisher>John Wiley &amp; Sons, Inc.</publisher><abstract>Because dynamic memory management is an important part of a large class of computer programs, high-performance algorithms for dynamic memory management have been, and will continue to be, of considerable interest. Experience indicates that for many programs, dynamic storage allocation is so important that programmers feel compelled to write and use their own domain-specific allocators to avoid the overhead of system libraries. As an alternative to explicit storage management techniques, conservative garbage collection has been suggested as an important algorithm for dynamic storage management in C programs. In this paper, I evaluate the costs of different dynamic storage management algorithms, including domain-specific allocators, widely-used general-purpose allocators, and a publicly available conservative garbage collection algorithm. Surprisingly, I find that programmer enhancements often have little effect on program performance. I also find that the true cost of conservative garbage collection is not the CPU overhead, but the memory system overhead of the algorithm. I conclude that conservative garbage collection is a promising alternative to explicit storage management and that the performance of conservative collection is likely to improve in the future. C programmers should now seriously consider using conservative garbage collection instead of explicitly calling free in programs they write.</abstract></paper>
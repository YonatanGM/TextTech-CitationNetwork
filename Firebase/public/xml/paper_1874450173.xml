<paper id="1874450173"><title>Three Approaches to Type Structure</title><year>1985</year><authors><author org="Syracuse University" id="2403193723">John C. Reynolds</author></authors><n_citation>118</n_citation><doc_type>Conference</doc_type><references><reference>326743114</reference><reference>1511621732</reference><reference>1519382205</reference><reference>1525140360</reference><reference>1549406551</reference><reference>1595372275</reference><reference>1970227944</reference><reference>1981303668</reference><reference>1984807151</reference><reference>1986382835</reference><reference>1987091892</reference><reference>2045255985</reference><reference>2056253254</reference><reference>2067911767</reference><reference>2095405219</reference><reference>2100738443</reference><reference>2125360711</reference><reference>2134338128</reference><reference>2152944474</reference><reference>2161122997</reference><reference>2166822586</reference><reference>2173184982</reference></references><venue id="2756386172" type="C">Colloquium on trees in Algebra and Programming</venue><doi>10.1007/3-540-15198-2_7</doi><keywords><keyword weight="0.64764">Hindleyâ€“Milner type system</keyword><keyword weight="0.44453">Programming language</keyword><keyword weight="0.64259">Simply typed lambda calculus</keyword><keyword weight="0.6594">Typed lambda calculus</keyword><keyword weight="0.63687">System F</keyword><keyword weight="0.62038">Parametric polymorphism</keyword><keyword weight="0.67236">Type inference</keyword><keyword weight="0.64539">Dependent type</keyword><keyword weight="0.39964">Mathematics</keyword><keyword weight="0.67914">Type constructor</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We examine three disparate views of the type structure of programming languages: Milneru0027s type deduction system and polymorphic let construct, the theory of subtypes and generic operators, and the polymorphic or second-order typed lambda calculus. These approaches are illustrated with a functional language including product, sum and list constructors. The syntactic behavior of types is formalized with type inference rules, but their semantics is treated intuitively.</abstract></paper>
<paper id="1756958128"><title>State/event-based software model checking</title><year>2004</year><authors><author org="Carnegie - Mellon University#TAB#" id="2112745185">Sagar Chaki</author><author org="Carnegie - Mellon University#TAB#" id="2129477832">Edmund M. Clarke</author><author org="Carnegie - Mellon University#TAB#" id="705764827">JoÃ«l Ouaknine</author><author org="Carnegie - Mellon University#TAB#" id="1365520453">Natasha Sharygina</author><author org="Carnegie - Mellon University#TAB#" id="2632594056">Nishant Sinha</author></authors><n_citation>131</n_citation><doc_type>Conference</doc_type><references><reference>298244054</reference><reference>1481843134</reference><reference>1491037212</reference><reference>1501731334</reference><reference>1503973138</reference><reference>1507116188</reference><reference>1515363397</reference><reference>1536007121</reference><reference>1557957257</reference><reference>1569068921</reference><reference>1570088913</reference><reference>1593428110</reference><reference>1599210792</reference><reference>1605985842</reference><reference>1607782211</reference><reference>1989884524</reference><reference>2009965218</reference><reference>2015640848</reference><reference>2025788721</reference><reference>2037626756</reference><reference>2056055164</reference><reference>2089139117</reference><reference>2090398333</reference><reference>2098039922</reference><reference>2103351789</reference><reference>2107144615</reference><reference>2110425399</reference><reference>2110648791</reference><reference>2112243500</reference><reference>2112401476</reference><reference>2117189826</reference><reference>2127574686</reference><reference>2135220153</reference><reference>2135274583</reference><reference>2158395308</reference><reference>2162284942</reference><reference>2295903414</reference><reference>2340735175</reference></references><venue id="1185688730" type="C">Integrated Formal Methods</venue><doi>10.1007/978-3-540-24756-2_8</doi><keywords><keyword weight="0.53965">Specification language</keyword><keyword weight="0.47541">Programming language</keyword><keyword weight="0.65302">Model checking</keyword><keyword weight="0.55464">Concurrency</keyword><keyword weight="0.46621">Computer science</keyword><keyword weight="0.60283">Linear temporal logic</keyword><keyword weight="0.55211">Software system</keyword><keyword weight="0.466">Theoretical computer science</keyword><keyword weight="0.53999">Temporal logic</keyword><keyword weight="0.56543">Formal methods</keyword><keyword weight="0.55514">Software development</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We present a framework for model checking concurrent software systems which incorporates both states and events. Contrary to other state/event approaches, our work also integrates two powerful verification techniques, counterexample-guided abstraction refinement and compositional reasoning. Our specification language is a state/event extension of linear temporal logic, and allows us to express many properties of software in a concise and intuitive manner. We show how standard automata-theoretic LTL model checking algorithms can be ported to our framework at no extra cost, enabling us to directly benefit from the large body of research on efficient LTL verification.</abstract></paper>
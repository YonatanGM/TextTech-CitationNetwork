<paper id="1969235224"><title>Compiler support for garbage collection in a statically typed language</title><year>1992</year><authors><author org="" id="2194186943">Amer Diwan</author><author org="" id="2656542640">Eliot Moss</author><author org="" id="2293368539">Richard Hudson</author></authors><n_citation>87</n_citation><doc_type>Conference</doc_type><references><reference>1978899144</reference><reference>1988827547</reference><reference>2005907808</reference><reference>2024787240</reference><reference>2158364508</reference><reference>2163285366</reference></references><venue id="1127352206" type="C">Programming Language Design and Implementation</venue><doi>10.1145/143095.143140</doi><keywords><keyword weight="0.56073">Pointer (computer programming)</keyword><keyword weight="0.51922">Type system</keyword><keyword weight="0.62125">Interprocedural optimization</keyword><keyword weight="0.45301">Programming language</keyword><keyword weight="0.61073">Functional compiler</keyword><keyword weight="0.44006">Computer science</keyword><keyword weight="0.44584">Parallel computing</keyword><keyword weight="0.63473">Compiler correctness</keyword><keyword weight="0.62091">Compiler</keyword><keyword weight="0.59696">Optimizing compiler</keyword><keyword weight="0.60262">Garbage collection</keyword></keywords><publisher>ACM</publisher><abstract>We consider the problem of supporting compacting garbage collection in the presence of modern compiler optimizations. Since our collector may move any heap object, it must accurately locate, follow, and update all pointers and values derived from pointers. To assist the collector, we extend the compiler to emit tables describing live pointers, and values derived from pointers, at each program location where collection may occur. Significant results include identification of a number of problems posed by optimizations, solutions to those problems, a working compiler, and experimental data concerning table sizes, table compression, and time overhead of decoding tables during collection. While gc support can affect the code produced, our sample programs show no significant changes, the table sizes are a modest fraction of the size of the optimized code, and stack tracing is a small fraction of total gc time. Since the compiler enhancements are also modest, we conclude that the approach is practical.</abstract></paper>
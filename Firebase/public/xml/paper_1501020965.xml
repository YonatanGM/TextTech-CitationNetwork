<paper id="1501020965"><title>The PEPA workbench: a tool to support a process algebra-based approach to performance modelling</title><year>1994</year><authors><author org="University of Edinburgh," id="2789960620">Stephen Gilmore</author><author org="University of Edinburgh," id="124517981">Jane Hillston</author></authors><n_citation>246</n_citation><doc_type /><references><reference>1503973138</reference><reference>1520558827</reference><reference>1559986400</reference><reference>1829244603</reference><reference>1907401487</reference><reference>1971107784</reference><reference>2000256138</reference><reference>2010698657</reference><reference>2021089599</reference><reference>2045605706</reference><reference>2079636926</reference></references><venue id="" type="">Proceedings of the 7th international conference on Computer performance evaluation : modelling techniques and tools: modelling techniques and tools</venue><doi>10.1007/3-540-58021-2_20</doi><keywords><keyword weight="0.49603">Workbench</keyword><keyword weight="0.43173">Algebraic number</keyword><keyword weight="0.4589">Computer science</keyword><keyword weight="0.46714">Deadlock</keyword><keyword weight="0.0">Concrete syntax</keyword><keyword weight="0.46066">Theoretical computer science</keyword><keyword weight="0.0">Formal description</keyword><keyword weight="0.591">Process calculus</keyword><keyword weight="0.54331">PEPA</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>In this paper we present a new technique for performance modelling and a tool supporting this approach. Performance Evaluation Process Algebra (PEPA) [1] is an algebraic language which can be used to build models of computer systems which capture information about the performance of the system. The PEPA language serves two purposes as a formal description language for computer system models. The performance-related information in the model may be used to predict the performance of the system whereas the behavioural information in the model may be exploited when reasoning about the functional behaviour of the system (e.g. when finding deadlocks or when exhibiting equivalences between sub-components). In this paper we concentrate on the performance aspects of the language.</abstract></paper>
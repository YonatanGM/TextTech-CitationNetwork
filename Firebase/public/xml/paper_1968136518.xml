<paper id="1968136518"><title>Generating testing and analysis tools with Aria</title><year>1996</year><authors><author org="AT&amp;T — Research#TAB#" id="1481757371">Premkumar T. Devanbu</author><author org="AT&amp;T — Research#TAB#" id="2182166124">David S. Rosenblum</author><author org="University of colorado." id="2115607830">Alexander L. Wolf</author></authors><n_citation>31</n_citation><doc_type>Journal</doc_type><references><reference>16783397</reference><reference>1964962870</reference><reference>1982448885</reference><reference>2004528131</reference><reference>2005915144</reference><reference>2042633495</reference><reference>2080901110</reference><reference>2096067805</reference><reference>2135988257</reference><reference>2144344516</reference><reference>2147459295</reference><reference>2148321974</reference></references><venue id="142627899" type="J">ACM Transactions on Software Engineering and Methodology</venue><doi>10.1145/226155.226157</doi><keywords><keyword weight="0.0">Analysis tools</keyword><keyword weight="0.0">Graph</keyword><keyword weight="0.48391">Programming language</keyword><keyword weight="0.52888">Software analysis pattern</keyword><keyword weight="0.47364">Computer science</keyword><keyword weight="0.57846">Abstract syntax</keyword><keyword weight="0.51537">Semantics</keyword><keyword weight="0.54865">Graph (abstract data type)</keyword><keyword weight="0.0">Software testing</keyword></keywords><publisher>ACM</publisher><abstract>Many software testing and analysis tools manipulate graph representations of programs, such as abstract syntax trees or abstract semantics graphs. Handcrafting such tools in conventional programming languages can be difficult, error prone, and time consuming. Our approach is to use application generators targeted for the domain of graph-representation-based testing and analysis tools. Moreover, we generate the generators themselves, so that the development of tools based on different languages and/or representations can also be supported better. In this article we report on our experiences in developing and using a system called Aria that generates testing and analysis tools based on an abstract semantics graph representation for C and C++ called Reprise. Aria itself was generated by the Genoa system. We demonstrate the utility of Aria and, thereby, the power of our approach, by showing Ariau0027s use in the development of a number of useful testing and analysis tools.</abstract></paper>
<paper id="1608714802"><title>Functional Programming with Bananas, Lenses, Envelopes and Barbed Wire</title><year>1991</year><authors><author org="University of Nijmegen" id="2194892187">Erik Meijer</author><author org="Amsterdam &amp; University of Twente" id="351104253">Maarten M. Fokkinga</author><author org="imperial College" id="2097737050">Ross Paterson</author></authors><n_citation>442</n_citation><doc_type>Conference</doc_type><references><reference>326743114</reference><reference>1507693023</reference><reference>1968602872</reference><reference>1987624682</reference><reference>2024873396</reference><reference>2037729105</reference><reference>2057292961</reference><reference>2080801189</reference><reference>2114980032</reference><reference>2295914203</reference></references><venue id="1162793720" type="C">International Conference on Functional Programming</venue><doi>10.1007/3540543961_7</doi><keywords><keyword weight="0.63053">Functional programming</keyword><keyword weight="0.44819">Computer science</keyword><keyword weight="0.45997">Theoretical computer science</keyword><keyword weight="0.38463">Lens (optics)</keyword><keyword weight="0.59234">Data type</keyword><keyword weight="0.5475">Operator (computer programming)</keyword><keyword weight="0.66758">Mutual recursion</keyword><keyword weight="0.50778">Catamorphism</keyword><keyword weight="0.60311">Recursion</keyword><keyword weight="0.0">Algebraic laws</keyword></keywords><publisher>Springer Verlag</publisher><abstract>We develop a calculus for lazy functional programming based on recursion operators associated with data type definitions. For these operators we derive various algebraic laws that are useful in deriving and manipulating programs. We shall show that all example functions in Bird and Wadleru0027s Introduction to Functional Programming can be expressed using these operators.</abstract></paper>
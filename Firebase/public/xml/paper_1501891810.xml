<paper id="1501891810"><title>Compiling pattern matching</title><year>1985</year><authors><author org="chalmers University of Technology, Sweden" id="265112452">Lennart Augustsson</author></authors><n_citation>149</n_citation><doc_type>Conference</doc_type><references><reference>1525140360</reference><reference>1582257052</reference><reference>2026557621</reference><reference>2067911767</reference><reference>2071457257</reference><reference>2094945667</reference><reference>2115847338</reference><reference>2166822586</reference></references><venue id="1162793720" type="C">International Conference on Functional Programming</venue><doi>10.1007/3-540-15975-4_48</doi><keywords><keyword weight="0.47126">Programming language</keyword><keyword weight="0.54452">Functional programming</keyword><keyword weight="0.43575">SASL</keyword><keyword weight="0.51673">Expression (mathematics)</keyword><keyword weight="0.44723">Computer science</keyword><keyword weight="0.55514">Lazy evaluation</keyword><keyword weight="0.45585">Theoretical computer science</keyword><keyword weight="0.56538">Compiler</keyword><keyword weight="0.53279">Machine code</keyword><keyword weight="0.65889">Pattern matching</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Introduction Pattern matching is a very powerful and useful device in programming. In functional languages it emerged in SASL [Turn76] and Hope [BursS0], and has also found its way into SML [Miln84]. The pattern mathing described here is that of LML which is a lazy ([Frie76] and [Henri76]) variant of ML. The pattern matching in LML evolved independently of that in SML so they are not (yet) the same, although very similar. The compilation of pattern matching in SML has been addressed in [Card84]. The LML compiler project began as an attempt to produce efficient code for a typed functional language with lazy evaluation. Since we regard pattern matching as an important language feature it should also yield efficient code. Only pattern matching in case expressions is described here, since we regard this as the basic pattern matching facility in the language. All other types of pattern mathing used in LML can be easily translated into case expressions, see [Augu84] for details. The compilation (of pattern matching) proceeds in several steps: • transform all pattern matching to case expressions. • transform complex case expressions into expressions that are easy to generate code for. • generate G-code for the case expressions, and from that machine code for the target machine.</abstract></paper>
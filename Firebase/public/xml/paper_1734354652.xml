<paper id="1734354652"><title>Problems and requirements [software development]</title><year>1995</year><authors><author org="101 Hamilton Terrace, London, UK" id="2761218531">M. Jackson</author></authors><n_citation>16</n_citation><doc_type>Journal</doc_type><references><reference>2103953153</reference><reference>2105603754</reference></references><venue id="207090427" type="J">Requirements Engineering</venue><doi>10.1109/ISRE.1995.512540</doi><keywords><keyword weight="0.60837">Domain (software engineering)</keyword><keyword weight="0.61833">Domain engineering</keyword><keyword weight="0.56895">Feature-oriented domain analysis</keyword><keyword weight="0.45597">Software engineering</keyword><keyword weight="0.45076">Systems engineering</keyword><keyword weight="0.45473">Computer science</keyword><keyword weight="0.60187">Requirements analysis</keyword><keyword weight="0.59714">Requirement</keyword><keyword weight="0.56934">Application domain</keyword><keyword weight="0.58116">System requirements specification</keyword><keyword weight="0.61932">Software requirements specification</keyword></keywords><publisher>IEEE Computer Society</publisher><abstract>Requirements, specifications, and programs are distinguished by the phenomena they concern. Requirements are about phenomena of the application domain and describe properties of the domain that the machine is required to bring about and maintain. The application domain is informal, and serious difficulties are encountered both in describing it and in reasoning about it. Requirements are complex, so they must be decomposed. Decomposition is based on the recognition of simple subproblems, characterised by problem frames.</abstract></paper>
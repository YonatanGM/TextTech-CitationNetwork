<paper id="1574303571"><title>GOM: A Strongly Typed Persistent Object Model With Polymorphism</title><year>1991</year><authors><author org="Universität Karlsruhe, Fakultät für Informatik" id="2244150349">Alfons Kemper</author><author org="Universität Karlsruhe, Fakultät für Informatik" id="172573358">Guido Moerkotte</author><author org="Universität Karlsruhe, Fakultät für Informatik" id="2198541601">Hans-Dirk Walter</author><author org="Universität Karlsruhe, Fakultät für Informatik" id="297181270">Andreas Zachmann</author></authors><n_citation>22</n_citation><doc_type /><references><reference>37796490</reference><reference>115658883</reference><reference>192407326</reference><reference>204305381</reference><reference>1524459778</reference><reference>1576853379</reference><reference>1597998418</reference><reference>1770006921</reference><reference>1977101058</reference><reference>2027657506</reference><reference>2036166787</reference><reference>2069126914</reference><reference>2110338707</reference><reference>2123746648</reference><reference>2145459199</reference><reference>2166822586</reference><reference>2205031991</reference></references><venue id="" type="">Tagungsband der GI Fachtagung Datenbanksysteme für Büro, Technik und Wissenschaft (BTW)</venue><doi>10.1007/978-3-642-76530-8_11</doi><keywords><keyword weight="0.44591">Programming language</keyword><keyword weight="0.50474">Compile time</keyword><keyword weight="0.42052">Computer science</keyword><keyword weight="0.56652">Object model</keyword><keyword weight="0.35506">Polymorphism (computer science)</keyword><keyword weight="0.6012">Strong and weak typing</keyword><keyword weight="0.54052">Subtyping</keyword><keyword weight="0.50714">Data model</keyword><keyword weight="0.57915">Type safety</keyword><keyword weight="0.46709">Semantics</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>In this paper the persistent object model GOM is described. GOM is an object-oriented data model that provides the most essential object features in a “lean” and coherent syntactical framework. These features include: object identity, object instantiation, subtyping and inheritance, operation refinement, dynamic (late) binding. One of the main goals in the design of GOM was type safety. In order to achieve this we developed a strongly typed language that enables the verification of type safety at compile time. It is shown in this paper how commonly encountered “traps” for strong typing are avoided in GOM by specifying a very clean subtyping semantics on the basis of substitutability and type signatures.</abstract></paper>
<paper id="1490584728"><title>Tracing Lazy Functional Computations Using Redex Trails</title><year>1997</year><authors><author org="†University of York" id="304003745">Jan Sparud</author><author org="†University of York" id="711150104">Colin Runciman</author></authors><n_citation>61</n_citation><doc_type>Conference</doc_type><references><reference>1534285741</reference><reference>1557437503</reference><reference>1970810328</reference><reference>2075724850</reference><reference>2079978872</reference><reference>2116827712</reference><reference>2161732792</reference><reference>2171821407</reference></references><venue id="2754504537" type="C">International Symposium on Programming Language Implementation and Logic Programming</venue><doi>10.1007/BFb0033851</doi><keywords><keyword weight="0.46634">Data structure</keyword><keyword weight="0.44151">Programming language</keyword><keyword weight="0.54228">Program transformation</keyword><keyword weight="0.48123">Functional programming</keyword><keyword weight="0.42207">Computer science</keyword><keyword weight="0.43491">Parallel computing</keyword><keyword weight="0.49935">Compiler</keyword><keyword weight="0.50969">Haskell</keyword><keyword weight="0.51348">Graph reduction</keyword><keyword weight="0.5223">Tracing</keyword><keyword weight="0.45311">Debugging</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We describe the design and implementation of a system for tracing computations in a lazy functional language. The basis of our tracing method is a program transformation carried out by the compiler: transformed programs compute the same values as the original, but embedded in functional data structures that also include redex trails showing how the values were obtained. A special-purpose display program enables detailed but selective exploration of the redex trails, with cross-links to the source program.</abstract></paper>
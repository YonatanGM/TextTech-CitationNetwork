<paper id="1497959280"><title>Learning Fingerprints for a Database Intrusion Detection System</title><year>2002</year><authors><author org="DSO National Laboratories" id="2135171906">Sin Yeung Lee</author><author org="DSO National Laboratories" id="2795081544">Wai Lup Low</author><author org="DSO National Laboratories" id="2280641554">Pei Yuen Wong</author></authors><n_citation>158</n_citation><doc_type>Conference</doc_type><references><reference>177350247</reference><reference>1596418004</reference><reference>1674877186</reference><reference>1881719794</reference><reference>2123086176</reference><reference>2149706766</reference></references><venue id="1183679797" type="C">European Symposium on Research in Computer Security</venue><doi>10.1007/3-540-45853-0_16</doi><keywords><keyword weight="0.56576">SQL</keyword><keyword weight="0.55836">Transaction processing</keyword><keyword weight="0.55362">Automatic summarization</keyword><keyword weight="0.45916">Computer science</keyword><keyword weight="0.45234">Computer security</keyword><keyword weight="0.53608">Credit card</keyword><keyword weight="0.54393">Database server</keyword><keyword weight="0.58872">Database transaction</keyword><keyword weight="0.51745">Intrusion detection system</keyword><keyword weight="0.59776">SQL injection</keyword><keyword weight="0.46228">Database</keyword><keyword weight="0.441">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>There is a growing security concern on the increasing number of databases that are accessible through the Internet. Such databases may contain sensitive information like credit card numbers and personal medical histories. Many e-service providers are reported to be leaking customersu0027 information through their websites. The hackers exploited poorly coded programs that interface with backend databases using SQL injection techniques. We developed an architectural framework, DIDAFIT (Detecting Intrusions in DAtabases through FIngerprinting Transactions) [1], that can efficiently detect illegitimate database accesses. The system works by matching SQL statements against a known set of legitimate database transaction fingerprints. In this paper, we explore the various issues that arise in the collation, representation and summarization of this potentially huge set of legitimate transaction fingerprints. We describe an algorithm that summarizes the raw transactional SQL queries into compact regular expressions. This representation can be used to match against incoming database transactions efficiently. A set of heuristics is used during the summarization process to ensure that the level of false negatives remains low. This algorithm also takes into consideration incomplete logs and heuristically identifies "high risk" transactions.</abstract></paper>
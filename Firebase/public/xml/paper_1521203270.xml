<paper id="1521203270"><title>Model Composition Directives</title><year>2004</year><authors><author org="Colorado State University" id="2989096290">Greg Straw</author><author org="Colorado State University" id="2163768119">Geri Georg</author><author org="Colorado State University" id="1996130612">Eunjee Song</author><author org="Colorado State University" id="2240559668">Sudipto Ghosh</author><author org="Colorado State University" id="1998923582">James M. Bieman</author></authors><n_citation>62</n_citation><doc_type>Journal</doc_type><references><reference>1562404971</reference><reference>2013658284</reference><reference>2015479359</reference><reference>2028195696</reference><reference>2112970105</reference><reference>2138363365</reference></references><venue id="106296714" type="J">Lecture Notes in Computer Science</venue><doi>10.1007/978-3-540-30187-5_7</doi><keywords><keyword weight="0.4601">Output device</keyword><keyword weight="0.46633">Programming language</keyword><keyword weight="0.50636">Aspect-oriented programming</keyword><keyword weight="0.50708">Unified Modeling Language</keyword><keyword weight="0.45825">Computer science</keyword><keyword weight="0.0">Model composition</keyword><keyword weight="0.43863">Algorithm</keyword><keyword weight="0.44826">Distributed computing</keyword><keyword weight="0.44541">Personalization</keyword><keyword weight="0.60984">Class diagram</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>An aspect-oriented design model consists of a set of aspect models and a primary model. Each of these models consists of a number of different kinds of UML diagrams. The models must be composed to identify conflicts and analyze the system as a whole. We have developed a systematic approach for composing class diagrams in which a default composition procedure based on name matching can be customized by user-defined composition directives. This paper describes a set of composition directives that constrain how class diagrams are composed.</abstract></paper>
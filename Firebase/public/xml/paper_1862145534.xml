<paper id="1862145534"><title>Storage utilization in B*-trees with a generalized overflow technique</title><year>1983</year><authors><author org="Department of Computer Science, University of Kaiserslautern, Kaiserslautern, FRG D-6750#TAB#" id="2643522003">Klaus Küspert</author></authors><n_citation>27</n_citation><doc_type>Journal</doc_type><references><reference>17487755</reference><reference>100318565</reference><reference>1529784705</reference><reference>1983711073</reference><reference>1998826086</reference><reference>2008627910</reference><reference>2093972161</reference><reference>2161694911</reference><reference>2901608006</reference></references><venue id="84409463" type="J">Acta Informatica</venue><doi>10.1007/BF00263927</doi><keywords><keyword weight="0.48479">Information theory</keyword><keyword weight="0.40395">Information system</keyword><keyword weight="0.45204">Discrete mathematics</keyword><keyword weight="0.48776">Data structure</keyword><keyword weight="0.44627">Combinatorics</keyword><keyword weight="0.47823">Telecommunications network</keyword><keyword weight="0.0">Free space</keyword><keyword weight="0.41175">Mathematics</keyword></keywords><publisher>Springer-Verlag New York, Inc.</publisher><abstract>We analyze storage utilization in random B *-trees (trees, where all data are stored in the leaf nodes). Extending a proposal of Bayer and McCreight, in case of insertion into a full node, up to m}-1 adjacent nodes are scanned for empty space. If this search is successful, entries are shifted on leaf level to gain free space for the new one; otherwise, the entries of the m nodes scanned are distributed as uniformly as possible over m}+1 nodes. Using iterative models it is shown that for large trees of high order storage utilization converges to m · ln((m}+1)/m).</abstract></paper>
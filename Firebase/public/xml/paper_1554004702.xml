<paper id="1554004702"><title>A Specification Environment for Graph Grammars</title><year>1990</year><authors><author org="Aachen Univ. of Technol.#TAB#" id="2251328658">Manfred Nagl</author><author org="Aachen Univ. of Technol.#TAB#" id="675269377">Andy Sch√ºrr</author></authors><n_citation>24</n_citation><doc_type>Conference</doc_type><references><reference>61053291</reference><reference>81555879</reference><reference>1525397299</reference><reference>1535038271</reference><reference>1576269362</reference><reference>1876241403</reference><reference>2013041359</reference><reference>2056081198</reference><reference>2104464431</reference><reference>2155566062</reference><reference>2159195078</reference><reference>2166082773</reference></references><venue id="2756339047" type="C">International Workshop on Graph-Grammars and Their Application to Computer Science</venue><doi>10.1007/BFb0017415</doi><keywords><keyword weight="0.56905">Tree-adjoining grammar</keyword><keyword weight="0.48436">Rule-based machine translation</keyword><keyword weight="0.49285">Data modeling</keyword><keyword weight="0.53283">Data structure</keyword><keyword weight="0.54663">Graph database</keyword><keyword weight="0.47248">Programming language</keyword><keyword weight="0.60073">L-attributed grammar</keyword><keyword weight="0.46433">Computer science</keyword><keyword weight="0.58228">Graph rewriting</keyword><keyword weight="0.56859">Graph (abstract data type)</keyword></keywords><publisher>Springer Berlin Heidelberg</publisher><abstract>Modelling environments (e.g. software development environments) offer tools which build up and maintain complex internal data structures. Therefore, before implementing such tools, it is advisable for the tool developer to formally specify the structure and the operations of these internal data structures. Graph Grammars as an operational specification method have been successfully used for this purpose for many years.</abstract></paper>
<paper id="1764512891"><title>Toward a Super Duper Hardware Tactic</title><year>1993</year><authors><author org="Cornell University;" id="2304720301">Mark Aagaard</author><author org="Cornell University;" id="988563514">Miriam Leeser</author><author org="Brigham Young University ****" id="1843258343">Phillip J. Windley</author></authors><n_citation>14</n_citation><doc_type /><references><reference>1960378284</reference><reference>2123587147</reference><reference>2535018452</reference><reference>2582875292</reference></references><venue id="" type="">HUG '93 Proceedings of the 6th International Workshop on Higher Order Logic Theorem Proving and its Applications</venue><doi>10.1007/3-540-57826-9_151</doi><keywords><keyword weight="0.57776">HOL</keyword><keyword weight="0.4748">Adder</keyword><keyword weight="0.54264">Combinatory logic</keyword><keyword weight="0.46009">Computer science</keyword><keyword weight="0.64604">Nuprl</keyword><keyword weight="0.56923">Automated theorem proving</keyword><keyword weight="0.53673">Mathematical proof</keyword><keyword weight="0.44217">Computer hardware</keyword><keyword weight="0.44149">Iterated function</keyword><keyword weight="0.53517">Higher-order logic</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We present techniques for automating many of the tedious aspects of hardware verification in a higher order logic theorem proving environment. We employ two complementary approaches. The first involves intelligent tactics which incorporate many of the smaller steps currently applied by the user. The second uses hardware combinators to partially automate inductive proofs for iterated hardware structures. We envision a system that captures most of this reasoning in one tactic, SuperDuperHWTac. Ideally, users would use this tactic on a goal for proving that a hardware component meets its specification, and get back a proof documented at a level they would have written by hand. This paper presents preliminary work toward SuperDuperHWTac in both the HOL and Nuprl proof development-systems.</abstract></paper>
<paper id="1516936561"><title>A Methodology for Large-Scale Hardware Verification</title><year>2000</year><authors><author org="INTEL Corporation" id="2304720301">Mark Aagaard</author><author org="INTEL Corporation" id="2950675069">Robert B. Jones</author><author org="#N#University of Glasgow#N#" id="2272895263">Thomas F. Melham</author><author org="INTEL Corporation" id="2147758294">John W. O'Leary</author><author org="INTEL Corporation" id="1833467962">Carl-Johan H. Seger</author></authors><n_citation>33</n_citation><doc_type>Conference</doc_type><references><reference>195269491</reference><reference>1484366641</reference><reference>1534252212</reference><reference>1591964257</reference><reference>1594381772</reference><reference>1725475383</reference><reference>1774916044</reference><reference>1776215724</reference><reference>1986558678</reference><reference>2080267935</reference><reference>2115847338</reference><reference>2134113233</reference><reference>2340735175</reference><reference>2913459036</reference></references><venue id="1166230065" type="C">Formal Methods in Computer-Aided Design</venue><doi>10.1007/3-540-40922-X_17</doi><keywords><keyword weight="0.58187">Specification language</keyword><keyword weight="0.66812">Functional verification</keyword><keyword weight="0.47245">Programming language</keyword><keyword weight="0.685">Intelligent verification</keyword><keyword weight="0.46953">Computer science</keyword><keyword weight="0.45657">Theoretical computer science</keyword><keyword weight="0.63635">Runtime verification</keyword><keyword weight="0.65185">Verification</keyword><keyword weight="0.64307">Formal methods</keyword><keyword weight="0.46213">Computer hardware</keyword><keyword weight="0.67769">High-level verification</keyword><keyword weight="0.64174">Formal verification</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We present a formal verification methodology for datapath-dominated hardware. This provides a systematic but flexible framework within which to organize the activities undertaken in large-scale verification efforts and to structure the associated code and proof-script artifacts. The methodology deploys a combination of model checking and lightweight theorem proving in higher-order logic, tightly integrated within a general-purpose functional programming language that allows the framework to be easily customized and also serves as a specification language. We illustrate the methodology--which has has proved highly effective in large-scale industrial trials--with the verification of an IEEE-compliant, extended precision floating-point adder.</abstract></paper>
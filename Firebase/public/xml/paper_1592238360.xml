<paper id="1592238360"><title>Natural-Semantics-Based Abstract Interpretation (Preliminary Version)</title><year>1995</year><authors><author org="Kansas State Univ." id="2114568335">David A. Schmidt</author></authors><n_citation>30</n_citation><doc_type>Conference</doc_type><references><reference>69359964</reference><reference>1487166760</reference><reference>1487777477</reference><reference>1491178396</reference><reference>1519972603</reference><reference>1583857822</reference><reference>1599561194</reference><reference>1974939942</reference><reference>1981580304</reference><reference>1996446458</reference><reference>1998717006</reference><reference>2004971560</reference><reference>2014764321</reference><reference>2020530016</reference><reference>2025033165</reference><reference>2025554746</reference><reference>2027065256</reference><reference>2043100293</reference><reference>2049641148</reference><reference>2054696368</reference><reference>2057085278</reference><reference>2061786858</reference><reference>2071095465</reference><reference>2088126145</reference><reference>2095460218</reference><reference>2116098983</reference><reference>2124153277</reference><reference>2914260883</reference></references><venue id="1137552346" type="C">Static Analysis Symposium</venue><doi>10.1007/3-540-60360-3_28</doi><keywords><keyword weight="0.58014">Formal semantics (linguistics)</keyword><keyword weight="0.4897">Formal system</keyword><keyword weight="0.62878">Operational semantics</keyword><keyword weight="0.45762">Programming language</keyword><keyword weight="0.45036">Computer science</keyword><keyword weight="0.57945">Abstract interpretation</keyword><keyword weight="0.45601">Theoretical computer science</keyword><keyword weight="0.52193">Semantics</keyword><keyword weight="0.51742">Syntax (logic)</keyword><keyword weight="0.51674">Formal verification</keyword><keyword weight="0.57422">Semantics (computer science)</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The original formulation of abstract interpretation (a.i.) [5] demonstrated clearly that a.i. is a formal-semantics-based methodology for deriving a provably correct, convergent, canonical iterative data flow analysis from a standard semantics of a programming language. But subsequent research in a.i. has obscured the methodology of the topic. For example, the recent slew of papers on closures analysis [2, 3, 17, 18, 21, 37, 39, 40, 41, 42, 43] mix implementation optimizations with specifications and leave unclear exactly what closures analysis is. In this paper, we reexamine the principles of a.i. and reformulate the topic on a foundation of coinductively defined natural semantics. We aim to demonstrate that the intensional and compositional aspects of natural semantics make it an ideal vehicle for formulating abstract interpretations of problems while preserving the essential characteristics of the subject.</abstract></paper>
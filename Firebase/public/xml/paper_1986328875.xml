<paper id="1986328875"><title>Computation and use of data flow information in optimizing compilers</title><year>1979</year><authors><author org="FB 10-Informatik, Universität des Saarlandes, Saarbrücken, Germany (Fed. Rep.) D-6600#TAB#" id="2127844901">Reinhard Wilhelm</author></authors><n_citation>25</n_citation><doc_type>Journal</doc_type><references><reference>44364083</reference><reference>1532214295</reference><reference>1547354585</reference><reference>1590222459</reference><reference>1964071625</reference><reference>1970357395</reference><reference>1971625158</reference><reference>1988097631</reference><reference>2044838697</reference><reference>2047615655</reference><reference>2056239109</reference><reference>2087493276</reference><reference>2102075452</reference><reference>2116098983</reference><reference>2124153277</reference><reference>2786406250</reference><reference>2912482872</reference></references><venue id="84409463" type="J">Acta Informatica</venue><doi>10.1007/BF00264579</doi><keywords><keyword weight="0.48667">Information theory</keyword><keyword weight="0.54551">Data structure</keyword><keyword weight="0.46323">Computer science</keyword><keyword weight="0.471">Parallel computing</keyword><keyword weight="0.62841">Data-flow analysis</keyword><keyword weight="0.58279">Abstract syntax tree</keyword><keyword weight="0.65919">Optimizing compiler</keyword><keyword weight="0.59343">Compiler</keyword><keyword weight="0.47484">Invariant (mathematics)</keyword><keyword weight="0.5945">Data flow diagram</keyword></keywords><publisher>Springer-Verlag New York, Inc.</publisher><abstract>Global data flow analysis is embedded into an optimizing compiler environment. It is shown for a small language, how global data flow information can be collected, used in determining the applicability of optimizing program transformations, and updated after transformations have made the flow information invalid. The algorithms presented, global data flow analysis, constant propagation, and invariant code motion, are described as guided by the abstract syntax tree of a program. The description is such as to allow the automatic generation of an optimizing compiler.</abstract></paper>
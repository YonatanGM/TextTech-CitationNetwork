<paper id="1567930774"><title>Efficient and Secure Pseudo-Random Number Generation (Extended Abstract)</title><year>1984</year><authors><author org="University of California" id="391723092">Umesh V. Vazirani</author><author org="Cornell University" id="2983195843">Vijay V. Vazirani</author></authors><n_citation>25</n_citation><doc_type>Conference</doc_type><references><reference>1977886630</reference><reference>2047892357</reference><reference>2055735365</reference><reference>2087115651</reference><reference>2118755837</reference><reference>2138109426</reference></references><venue id="1140213147" type="C">Theory and Application of Cryptographic Techniques</venue><doi>10.1007/3-540-39568-7_17</doi><keywords><keyword weight="0.46469">Discrete mathematics</keyword><keyword weight="0.49465">Fair coin</keyword><keyword weight="0.52606">Quadratic residue</keyword><keyword weight="0.51042">Open problem</keyword><keyword weight="0.51969">Modular arithmetic</keyword><keyword weight="0.42848">Computer science</keyword><keyword weight="0.54779">Multiplication</keyword><keyword weight="0.46669">Corollary</keyword><keyword weight="0.44464">Factoring</keyword><keyword weight="0.55234">Pseudorandom number generator</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Cryptographically secure pseudo-random number generators known so far suffer from the handicap of being inefficient; the most efficient ones can generate only one bit on each modular multiplication (n 2 steps). Blum, Blum and Shub ask the open problem of outputting even two bits securely. We state a simple condition, the XOR-Condition, and show that any generator satisfying this condition can output logn bits on each multiplication. We also show that the logn least significant bits of RSA, Rabin’s Scheme, and the x 2 mod N generator satisfy this condition. As a corollary, we prove that all boolean predicates of these bits are secure. Furthermore, we strengthen the security of the x 2 mod N generator, which being a Trapdoor Generator, has several applications, by proving it as hard as Factoring.</abstract></paper>
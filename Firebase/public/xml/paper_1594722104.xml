<paper id="1594722104"><title>Combining Constraint Solving and Symbolic Model Checking for a Class of a Systems with Non-linear Constraints</title><year>1997</year><authors><author org="University of Washington," id="1969798489">William Chan</author><author org="University of Washington," id="2162219505">Richard Anderson</author><author org="University of Washington," id="2019007185">Paul Beame</author><author org="University of Washington," id="477007165">David Notkin</author></authors><n_citation>53</n_citation><doc_type>Conference</doc_type><references><reference>1549588850</reference><reference>1928718745</reference><reference>1990183105</reference><reference>1998270481</reference><reference>2004306067</reference><reference>2046138576</reference><reference>2080267935</reference><reference>2099529102</reference><reference>2108016168</reference><reference>2127271657</reference><reference>2137865376</reference><reference>2147880466</reference><reference>2151056896</reference><reference>2165276844</reference><reference>2527523344</reference></references><venue id="1162450063" type="C">Computer Aided Verification</venue><doi>10.1007/3-540-63166-6_32</doi><keywords><keyword weight="0.4804">Boolean function</keyword><keyword weight="0.43917">Discrete mathematics</keyword><keyword weight="0.58982">Model checking</keyword><keyword weight="0.49484">Algorithmics</keyword><keyword weight="0.45202">Computer science</keyword><keyword weight="0.46945">Automaton</keyword><keyword weight="0.46894">Algorithm</keyword><keyword weight="0.46638">Theoretical computer science</keyword><keyword weight="0.58726">Constraint satisfaction problem</keyword><keyword weight="0.49287">Boolean data type</keyword><keyword weight="0.6192">Constraint logic programming</keyword><keyword weight="0.58522">Symbolic trajectory evaluation</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>We extend the conventional BDD-based model checking algorithms to verify systems with non-linear arithmetic constraints. We represent each constraint as a BDD variable, using the information from a constraint solver to prune the BDDs by removing paths that correspond to infeasible constraints. We illustrate our technique with a simple example, which has been analyzed with our prototype implementation.</abstract></paper>
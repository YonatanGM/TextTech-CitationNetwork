<paper id="1918806322"><title>A Logic of Object-Oriented Programs</title><year>1997</year><authors><author org="University of California" id="2162106674">Martín Abadi</author><author org="Microsoft Research,#TAB#" id="710865586">K. Rustan M. Leino</author></authors><n_citation>128</n_citation><doc_type>Conference</doc_type><references><reference>1516638553</reference><reference>1544633123</reference><reference>1564913344</reference><reference>1583769822</reference><reference>1815958522</reference><reference>1964727056</reference><reference>1971933951</reference><reference>1980939032</reference><reference>1995008247</reference><reference>2045641460</reference><reference>2049803057</reference><reference>2057632882</reference><reference>2106472587</reference><reference>2111619838</reference><reference>2111706174</reference><reference>2126374558</reference><reference>2130404229</reference><reference>2140295918</reference><reference>2151156765</reference></references><venue id="2756386172" type="C">Colloquium on trees in Algebra and Programming</venue><doi>10.1007/978-3-540-39910-0_2</doi><keywords><keyword weight="0.71296">Computational logic</keyword><keyword weight="0.71398">Separation logic</keyword><keyword weight="0.47147">Programming language</keyword><keyword weight="0.71827">Axiomatic semantics</keyword><keyword weight="0.45249">Computer science</keyword><keyword weight="0.68431">Description logic</keyword><keyword weight="0.68763">Multimodal logic</keyword><keyword weight="0.6819">Bunched logic</keyword><keyword weight="0.70735">Dynamic logic (modal logic)</keyword><keyword weight="0.71584">Higher-order logic</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We develop a logic for reasoning about object-oriented programs. The logic is for a language with an imperative semantics and aliasing, and accounts for self-reference in objects. It is much like a type system for objects with subtyping, but our specifications go further than types in detailing pre- and postconditions. We intend the logic as an analogue of Hoare logic for object-oriented programs. Our main technical result is a soundness theorem that relates the logic to a standard operational semantics.</abstract></paper>
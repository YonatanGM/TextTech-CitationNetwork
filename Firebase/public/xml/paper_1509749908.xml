<paper id="1509749908"><title>Verifying temporal properties of processes</title><year>1990</year><authors><author org="University of Edinburgh," id="2130777246">Julian C. Bradfield</author><author org="University of Edinburgh," id="2124385062">Colin Stirling</author></authors><n_citation>55</n_citation><doc_type>Conference</doc_type><references><reference>1503973138</reference><reference>1563131471</reference><reference>1884481057</reference><reference>1978469611</reference><reference>1992582873</reference><reference>2012841134</reference><reference>2015640848</reference><reference>2054554282</reference><reference>2057260173</reference><reference>2063510765</reference><reference>2171536993</reference></references><venue id="1145706541" type="C">International Conference on Concurrency Theory</venue><doi>10.1007/BFb0039055</doi><keywords><keyword weight="0.58216">Transition system</keyword><keyword weight="0.45879">Discrete mathematics</keyword><keyword weight="0.54031">Model checking</keyword><keyword weight="0.54011">Petri net</keyword><keyword weight="0.43407">Computer science</keyword><keyword weight="0.53312">Least fixed point</keyword><keyword weight="0.52669">Temporal logic</keyword><keyword weight="0.49117">Propositional variable</keyword><keyword weight="0.46402">Binary number</keyword><keyword weight="0.54809">Liveness</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Many interesting concurrent systems have infinite state spaces: examples include concurrent while programs; Petri Nets; CCS (or CSP) processes with value passing. All of these examples can be interpreted operationally as infinite labelled transition systems, structures of the form (7 ~, { --% : a E L }) where 7 ~ is a set of points (states, markings, processes) and % the appropriate binary transition relation on 7 ~ for each label a (action, set of events) belonging to the family L. A very rich temporal logic for expressing properties of such transition systems is a slight extension of the modal mu-calculus [9, 6] where the modalities are indexed by families of labels instead of individual labels. The question we address in this paper is: can model checking techniques, as introduced in [3] be extended from finite to infinite state spaces? (Pragmatically, this means moving from automated to computer-aided verification techniques.) We provide an affirmative answer by presenting a sound and complete tableau system for proving temporal properties of states (processes or markings) in arbitrary infinite transition system models. The tableau system extends local model checking techniques as presented in [4, 7, 11, 14]. The delicate aspect is showing that a point (or set of points) has, or lacks, a least fixed point property (a liveness property). The tableau proof system is data independent and therefore generalizes standard methods commonly used in program logics (such as Hoaxe logics). The verification technique is illustrated on examples drawn from CCS [8]. See [1] for the application of the method to Petri Nets and [12] for its application to concurrent while programs. Section 2 provides examples of CCS processes and their properties. In section 3 the syntax and semantics of the (slightly extended) modal mu-calculus are described. The tableau proof system is presented in section 4, and finally we briefly examine applications in section 5.</abstract></paper>
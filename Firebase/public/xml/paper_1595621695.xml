<paper id="1595621695"><title>Revisiting the Paxos Algorithm</title><year>1997</year><authors><author org="MIT — Laboratory for Computer Science" id="2949447980">Roberto De Prisco</author><author org="MIT — Laboratory for Computer Science" id="1785551945">Butler W. Lampson</author><author org="MIT — Laboratory for Computer Science" id="2180706138">Nancy A. Lynch</author></authors><n_citation>77</n_citation><doc_type>Conference</doc_type><references><reference>1552521662</reference><reference>2003214215</reference><reference>2070941848</reference><reference>2072730741</reference><reference>2075854425</reference><reference>2133943294</reference><reference>2138949781</reference><reference>2158987725</reference><reference>2611515161</reference></references><venue id="2760419688" type="C">International Workshop on Distributed Algorithms</venue><doi>10.1007/BFb0030679</doi><keywords><keyword weight="0.54074">Consensus</keyword><keyword weight="0.4512">Programming language</keyword><keyword weight="0.47909">Physical system</keyword><keyword weight="0.4476">Computer science</keyword><keyword weight="0.49286">Automaton</keyword><keyword weight="0.4777">Formal specification</keyword><keyword weight="0.51552">Distributed algorithm</keyword><keyword weight="0.57972">Timed automaton</keyword><keyword weight="0.69598">Paxos</keyword><keyword weight="0.51941">Formal verification</keyword><keyword weight="0.44399">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The Paxos algorithm is an efficient and highly fault-tolerant algorithm, devised by Lamport, for reaching consensus in a distributed system. Although it appears to be practical, it seems to be not widely known or understood. This thesis contains a new presentation of the Paxos algorithm, based on a formal decomposition into several interacting components. It also contains a correctness proof and a time performance and fault-tolerance analysis. The presentation is built upon a general timed automaton (GTA) model. The correctness proof uses automaton composition and invariant assertion methods. The time performance and fault-tolerance analysis is conditional on the stabilization of the underlying physical system behavior starting from some point in an execution. In order to formalize this stabilization, a special type of GTA called a Clock GTA is defined.</abstract></paper>
<paper id="1493854191"><title>Priority search trees in secondary memory (extended abstract)</title><year>1987</year><authors><author org="Universität Freiburg," id="2286373836">Christian Icking</author><author org="Universität Freiburg," id="2142753048">Rolf Klein</author><author org="Universität Freiburg," id="2041442269">Thomas Ottmann</author></authors><n_citation>27</n_citation><doc_type>Conference</doc_type><references><reference>41435888</reference><reference>1972027649</reference><reference>2011933350</reference><reference>2021615496</reference><reference>2026266633</reference><reference>2142753649</reference><reference>2149173084</reference><reference>2901608006</reference></references><venue id="1165841369" type="C">Workshop on Graph-Theoretic Concepts in Computer Science</venue><doi>10.1007/3-540-19422-3_7</doi><keywords><keyword weight="0.44023">Discrete mathematics</keyword><keyword weight="0.43927">Combinatorics</keyword><keyword weight="0.5673">Shortest path problem</keyword><keyword weight="0.4214">Computer science</keyword><keyword weight="0.53445">Beam search</keyword><keyword weight="0.53764">B-tree</keyword><keyword weight="0.61357">Ternary search tree</keyword><keyword weight="0.57801">Longest path problem</keyword><keyword weight="0.61361">Binary search tree</keyword><keyword weight="0.54154">Auxiliary memory</keyword><keyword weight="0.5533">K shortest path routing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>In this paper we investigate how priority search trees can be adapted to secondary memory. We given an optimal solution for the static case, where the set of points to be stored is fixed. For the dynamic case we present data structures derived from B-trees and from a generalized version of red-black trees. The latter are interesting in the internal case, too, since they are better balanced than standard red-black trees, in that the ratio longest path/shortest path is smaller.</abstract></paper>
<paper id="1551406732"><title>An Integration of Model Checking with Automated Proof Checking</title><year>1995</year><authors><author org="SRI, International#TAB#" id="2720223492">S. Rajan</author><author org="SRI, International#TAB#" id="2118526916">Natarajan Shankar</author><author org="SRI, International#TAB#" id="2143082811">Mandayam K. Srivas</author></authors><n_citation>164</n_citation><doc_type>Conference</doc_type><references><reference>1488858096</reference><reference>1498414460</reference><reference>1509749908</reference><reference>1534850143</reference><reference>1540180960</reference><reference>1551246917</reference><reference>1582986256</reference><reference>1826166329</reference><reference>1881906100</reference><reference>2015640848</reference><reference>2048880957</reference><reference>2057260173</reference><reference>2080593426</reference><reference>2099120582</reference><reference>2101591864</reference><reference>2130308292</reference></references><venue id="1162450063" type="C">Computer Aided Verification</venue><doi>10.1007/3-540-60045-0_42</doi><keywords><keyword weight="0.6561">Model checking</keyword><keyword weight="0.46249">Computer science</keyword><keyword weight="0.68591">Automated proof checking</keyword><keyword weight="0.52249">Binary decision diagram</keyword><keyword weight="0.44631">Algorithm</keyword><keyword weight="0.46432">Theoretical computer science</keyword><keyword weight="0.49429">Automation</keyword><keyword weight="0.53113">Finite-state machine</keyword><keyword weight="0.53281">Temporal logic</keyword><keyword weight="0.4495">Philosophy of design</keyword><keyword weight="0.61897">Symbolic trajectory evaluation</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Although automated proof checking tools for general-purpose logics have been successfully employed in the verification of digital systems, there are inherent limits to the efficient automation of expressive logics. If the expressiveness is constrained, there are useful logic fragments for which efficient decision procedures can be found. The model checking paradigm yields an important class of decision procedures for establishing temporal properties of finite-state systems. Model checking is remarkably effective for automatically verifying finite automata with relatively small state spaces, but is inadequate when the state spaces are either too large or unbounded. For this reason, it is useful to integrate the complementary technologies of model checking and proof checking. Such an integration has to be carried out in a delicate manner in order to be more than just the sum of the techniques. We describe an approach for such an integration where a BDD-based model checker for the propositional mu-calculus has been used as a decision procedure within the framework of the PVS proof checker. We argue that our approach fits in nicely with the design philosophy of PVS of providing highly effective mechanical reasoning capability by using efficient decision procedures as the workhorses of an interactive proof checker.</abstract></paper>
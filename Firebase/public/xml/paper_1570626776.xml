<paper id="1570626776"><title>Trace Theoretic Verification of Asynchronous Circuits Using Unfoldings</title><year>1995</year><authors><author org="Cadence Berkeley Lab" id="2078776729">Kenneth L. McMillan</author></authors><n_citation>34</n_citation><doc_type>Conference</doc_type><references><reference>1491037212</reference><reference>1518764426</reference><reference>1540501475</reference><reference>1548649610</reference><reference>1570460767</reference><reference>1991052229</reference><reference>2016300863</reference><reference>2049852498</reference><reference>2087409327</reference><reference>2099620341</reference><reference>2129335898</reference></references><venue id="1162450063" type="C">Computer Aided Verification</venue><doi>10.1007/3-540-60045-0_50</doi><keywords><keyword weight="0.52804">Asynchronous communication</keyword><keyword weight="0.52005">Tree traversal</keyword><keyword weight="0.62506">Petri net</keyword><keyword weight="0.45379">Computer science</keyword><keyword weight="0.46435">Theoretical computer science</keyword><keyword weight="0.46042">Electronic circuit</keyword><keyword weight="0.5089">Interleaving</keyword><keyword weight="0.48255">Scalability</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>An approach is presented for hierarchical, trace-theoretic verification of speed-independent circuits based on Petri net unfolding. The purpose is to avoid the explosion of states that results from interleaving of concurrent transitions. The trace structures of the circuit components are represented by Petri nets. Conformance between implementation and specification is tested by composing the implementation with the mirror of the specification, unfolding the resulting product net into an occurrence net, and testing this net for failures. The latter problem is shown to be NP-complete, however a practical branch-and-bound algorithm is presented. In two examples of scalable asynchronous control circuits, the unfolding size is found to grow linearly with the circuit size, while the number of states grows exponentially. In one case, the unfolding method succeeds in verifying large configurations while BDD-based traversal techniques do not.</abstract></paper>
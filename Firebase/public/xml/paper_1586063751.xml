<paper id="1586063751"><title>Memory-Model-Sensitive Data Race Analysis</title><year>2004</year><authors><author org="Microsoft Research, One Microsoft Way," id="2236919618">Yue Yang</author><author org="University of Utah ," id="2129100051">Ganesh Gopalakrishnan</author><author org="University of Utah ," id="2082267274">Gary Lindstrom</author></authors><n_citation>22</n_citation><doc_type>Conference</doc_type><references><reference>1482207865</reference><reference>1498914194</reference><reference>1499526127</reference><reference>1593091446</reference><reference>1823635467</reference><reference>1972544179</reference><reference>1973501242</reference><reference>1993836075</reference><reference>2002179840</reference><reference>2029601347</reference><reference>2033818578</reference><reference>2034256728</reference><reference>2040060046</reference><reference>2046317364</reference><reference>2054739713</reference><reference>2061239425</reference><reference>2075525620</reference><reference>2103957752</reference><reference>2109875364</reference><reference>2113238444</reference><reference>2129380858</reference><reference>2132150351</reference><reference>2134747058</reference><reference>2135274583</reference><reference>2147506153</reference><reference>2149911648</reference><reference>2158175015</reference><reference>2161600851</reference><reference>2162446957</reference><reference>2165365531</reference><reference>2168441850</reference></references><venue id="1133365479" type="C">International Conference on Formal Engineering Methods</venue><doi>10.1007/978-3-540-30482-1_11</doi><keywords><keyword weight="0.55879">Race condition</keyword><keyword weight="0.57064">Constraint satisfaction</keyword><keyword weight="0.55494">Model checking</keyword><keyword weight="0.47753">Programming language</keyword><keyword weight="0.4738">Computer science</keyword><keyword weight="0.56919">Correctness</keyword><keyword weight="0.47293">Theoretical computer science</keyword><keyword weight="0.62744">Memory model</keyword><keyword weight="0.57457">Formal methods</keyword><keyword weight="0.60057">Program analysis</keyword><keyword weight="0.59576">Constraint logic programming</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We present a “memory-model-sensitive” approach to validating correctness properties for multithreaded programs. Our key insight is that by specifying both the inter-thread memory consistency model and the intra-thread program semantics as constraints, a program verification task can be reduced to an equivalent constraint solving problem, thus allowing an exhaustive examination of all thread interleavings precisely allowed by a given memory model. To demonstrate, this paper formalizes race conditions according to the new Java memory model, for a simplified but non-trivial source language. We then describe the implementation of a memory-model-sensitive race detector using constraint logic programming (CLP). In comparison with conventional program analysis, our approach does not offer the same kind of performance and scalability due to the complexity involved in exact formal reasoning. However, we show that a formal semantics can serve more than documentation purposes — it can be applied as a sound basis for rigorous property checking, upon which more scalable methods can be derived.</abstract></paper>
<paper id="1983346515"><title>Prototyping realistic programming languages based on formal specifications</title><year>1997</year><authors><author org="Praktische Informatik V, FernUniversität, D-58084 Hagen, Germany (e-mail: poetzsch@fernuni-hagen.de) , DE" id="2343845410">Arnd Poetzsch-Heffter</author></authors><n_citation>32</n_citation><doc_type>Journal</doc_type><references><reference>122958000</reference><reference>1483618713</reference><reference>1505313788</reference><reference>1519033351</reference><reference>1532892735</reference><reference>1561365846</reference><reference>1576042299</reference><reference>1596741474</reference><reference>1600689686</reference><reference>1801905373</reference><reference>1818561783</reference><reference>1878147133</reference><reference>1969402593</reference><reference>1980217707</reference><reference>1982448885</reference><reference>2005915144</reference><reference>2008025193</reference><reference>2019469504</reference><reference>2088604010</reference><reference>2109853339</reference><reference>2128916862</reference><reference>2406480769</reference><reference>2913158420</reference></references><venue id="84409463" type="J">Acta Informatica</venue><doi>10.1007/s002360050105</doi><keywords><keyword weight="0.63481">Specification language</keyword><keyword weight="0.63709">Operational semantics</keyword><keyword weight="0.4846">Programming language</keyword><keyword weight="0.64041">Programming language specification</keyword><keyword weight="0.47215">Computer science</keyword><keyword weight="0.64467">Design by contract</keyword><keyword weight="0.66044">Formal specification</keyword><keyword weight="0.66329">Formal methods</keyword><keyword weight="0.64207">Programming language theory</keyword><keyword weight="0.65208">Software development</keyword></keywords><publisher /><abstract>The specification of realistic programming languages is difficult and expensive. One approach to make language specification more attractive is the development of techniques and systems for the generation of language–specific software from specifications. To contribute to this approach, a tool–based framework with the following features is presented: It supports new techniques to specify more language aspects in a static fashion. This improves the efficiency of generated software. It provides powerful interfaces to generated software components. This facilitates the use of these components as parts of language–specific software. It has a rather simple formal semantics. In the framework, static semantics is defined by a very general attribution technique enabling e.g. the specification of flow graphs. The dynamic semantics is defined by evolving algebra rules, a technique that has been successfully applied to realistic programming languages.</abstract></paper>
<paper id="191975620"><title>Specification of Coordinated Behaviour in the Software Development Process</title><year>1992</year><authors><author org="Leiden University, ???" id="2136680303">Gregor Engels</author><author org="Leiden University, ???" id="2210063298">Luuk Groenewegen</author></authors><n_citation>4</n_citation><doc_type>Conference</doc_type><references><reference>2060849841</reference><reference>2099529102</reference><reference>2151022862</reference><reference>2158201136</reference></references><venue id="2754635670" type="C">European Workshop on Software Process Technology</venue><doi>10.1007/BFb0017502</doi><keywords><keyword weight="0.62624">Software design</keyword><keyword weight="0.46282">Software engineering</keyword><keyword weight="0.44327">Systems engineering</keyword><keyword weight="0.6243">Package development process</keyword><keyword weight="0.45583">Computer science</keyword><keyword weight="0.61627">Software development process</keyword><keyword weight="0.62359">Empirical process (process control model)</keyword><keyword weight="0.64057">Software construction</keyword><keyword weight="0.64306">Software development</keyword><keyword weight="0.63341">Goal-Driven Software Development Process</keyword><keyword weight="0.63215">Social software engineering</keyword></keywords><publisher>Springer Berlin Heidelberg</publisher><abstract>A rapidly growing number of papers addresses the topic of software process modeling (see e.g. [5], [1]). Due to the fact that this topic is still a very young discipline within software engineering, many of these papers pay much attention to defining the requirements to software process modelling as well as to describing and discussing the basic concepts and notions in this field. Examples of those discussed concepts and notions are: processes, process steps, process evolution, agents, products, documents, resources, tasks, activities, roles, actors, events, triggers, constraints, rules, cooperation, communication, interaction, coordination (see e.g. [2], [6], [4]). In specifying the software process by means of a software process model, these very notions have to be incorporated. But, the number of these notions is quite impressive, and, moreover, some of these notions seem to be strongly related. Therefore, we take the following approach in developping a specification language for software processes. We abstract from the aforementioned concepts and notions and develop a specification language, which allows specifying the software process by means of a smaller number of more abstract notions. In a later stage we will indicate, how such a kernel language can be extended to model all notions from the software process modelling field. ~From experience in software engineering, conceptual database modelling, and simulation, we advocate the following three main notions. They together represent in our opinion the essential aspects of any software process or of any model for it. The three notions are:</abstract></paper>
<paper id="1824815122"><title>Hierarchical Verification of Two-Dimensional High-Speed Multiplication in PVS: A Case Study</title><year>1996</year><authors><author org="Universität Ulm" id="2937052463">Harald Rueß</author></authors><n_citation>2</n_citation><doc_type>Conference</doc_type><references><reference>1511157305</reference><reference>1538310240</reference><reference>1540641846</reference><reference>1587217691</reference><reference>1840254652</reference><reference>1989095255</reference><reference>2094831575</reference><reference>2113486906</reference><reference>2123587147</reference><reference>2126691011</reference><reference>2127271657</reference><reference>2138090187</reference><reference>2142785890</reference><reference>2143166621</reference><reference>2170250139</reference></references><venue id="1166230065" type="C">Formal Methods in Computer-Aided Design</venue><doi>10.1007/BFb0031801</doi><keywords><keyword weight="0.56709">Specification language</keyword><keyword weight="0.45424">Integer</keyword><keyword weight="0.46851">Programming language</keyword><keyword weight="0.45473">Adder</keyword><keyword weight="0.45647">Computer science</keyword><keyword weight="0.52155">Automated theorem proving</keyword><keyword weight="0.50378">Automated proof checking</keyword><keyword weight="0.46366">Theoretical computer science</keyword><keyword weight="0.49179">Multiplier (economics)</keyword><keyword weight="0.49015">Multiplication</keyword><keyword weight="0.49668">Rewriting</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>It is shown how to use the PVS specification language and proof checker to present a hierarchical formalization of a two-dimensional, high-speed integer multiplier on the gate level. We first give an informal description of iterative array multiplier circuits together with a natural refinement into vertical and horizontal stages, and then show how the various features of PVS can be used to obtain a readable, high-level specification. The verification exploits the tight integration between rewriting, arithmetic decision procedures, and equality that is present in PVS. Altogether, this case study demonstrates that the resources of an expressive specification language and of a general-purpose theorem prover permit highly automated verification in this domain, and can contribute to clarity, generality, and reuse.</abstract></paper>
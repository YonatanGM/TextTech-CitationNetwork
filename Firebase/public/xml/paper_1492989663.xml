<paper id="1492989663"><title>Efficient generation of shared RSA keys</title><year>1997</year><authors><author org="Bellcore" id="201828038">Dan Boneh</author><author org="AT&amp;T Labs,#TAB#" id="2306237498">Matthew Franklin</author></authors><n_citation>242</n_citation><doc_type>Conference</doc_type><references><reference>1589034595</reference><reference>1660562555</reference><reference>2117420234</reference></references><venue id="1153524033" type="C">International Cryptology Conference</venue><doi>10.1007/BFb0052253</doi><keywords><keyword weight="0.41458">A share</keyword><keyword weight="0.42928">Exponent</keyword><keyword weight="0.43387">Computer science</keyword><keyword weight="0.56933">Cryptography</keyword><keyword weight="0.44751">Communication theory</keyword><keyword weight="0.43355">Theoretical computer science</keyword><keyword weight="0.54">Encryption</keyword><keyword weight="0.438">Factorization</keyword><keyword weight="0.40195">Computation</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We describe efficient techniques for three (or more) parties to jointly generate an RSA key. At the end of the protocol an RSA modulus N = pq is publicly known. None of the parties know the factorization of N. In addition a public encryption exponent is publicly known and each party holds a share of the private exponent that enables threshold decryption. Our protocols are efficient in computation and communication.</abstract></paper>
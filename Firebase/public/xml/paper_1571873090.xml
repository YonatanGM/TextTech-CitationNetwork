<paper id="1571873090"><title>Versioning and Consistency for Dynamically Composed Configurations</title><year>1997</year><authors><author org="The Flinders University of South Australia" id="713569583">Bradley R. Schmerl</author><author org="The Flinders University of South Australia" id="2805978314">Chris D. Marlin</author></authors><n_citation>11</n_citation><doc_type>Conference</doc_type><references><reference>1482744171</reference><reference>1496011270</reference><reference>1550599698</reference><reference>1558349193</reference><reference>1596879253</reference><reference>1602447159</reference><reference>2008691238</reference><reference>2011779753</reference><reference>2113623490</reference><reference>2134800323</reference><reference>2148238464</reference></references><venue id="2626107884" type="C">Software Configuration Management Workshop</venue><doi>10.1007/3-540-63014-7_5</doi><keywords><keyword weight="0.46887">Notation</keyword><keyword weight="0.46547">Computer science</keyword><keyword weight="0.5904">Software system</keyword><keyword weight="0.58652">Configuration management</keyword><keyword weight="0.45616">Database</keyword><keyword weight="0.50515">Software versioning</keyword><keyword weight="0.4763">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Dynamically composed software systems are constructed as they execute. Although these systems are of increasing importance and arise in a number of application areas, configuration management tools typically do not provide much support for them. This paper presents progress towards providing enhanced configuration management techniques for dynamically composed systems. The paper commences with an example of a dynamically composed system, which is used to motivate the relevance of dynamically composed systems, and to highlight various design issues and requirements for configuration management in this domain. A model, and its associated notation DCDL, is then presented to describe particular aspects of the example. This model seamlessly integrates the notions of consistency, specified in terms of complete configurations, and version families, which are relevant to the incomplete configurations of crucial importance in understanding configurations of dynamically composed systems. DCDL is then used to provide insight into the requirements for configuration management tools for dynamically composed systems.</abstract></paper>
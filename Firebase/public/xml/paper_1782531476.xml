<paper id="1782531476"><title>IF-2.0: A Validation Environment for Component-Based Real-Time Systems</title><year>2002</year><authors><author org="Centre Equation" id="2051691203">Marius Bozga</author><author org="Centre Equation" id="2139352357">Susanne Graf</author><author org="Centre Equation" id="2343194167">Laurent Mounier</author></authors><n_citation>114</n_citation><doc_type>Conference</doc_type><references><reference>1483422122</reference><reference>1504003510</reference><reference>1506375872</reference><reference>1534958051</reference><reference>1559362703</reference><reference>1796174165</reference><reference>1974839002</reference><reference>2040060046</reference><reference>2171480813</reference></references><venue id="1162450063" type="C">Computer Aided Verification</venue><doi>10.1007/3-540-45657-0_26</doi><keywords><keyword weight="0.50076">Asynchronous communication</keyword><keyword weight="0.49099">Model checking</keyword><keyword weight="0.50847">Asynchronous system</keyword><keyword weight="0.464">Computer science</keyword><keyword weight="0.55302">Toolbox</keyword><keyword weight="0.51696">Static analysis</keyword><keyword weight="0.43162">Algorithm</keyword><keyword weight="0.44792">Real-time computing</keyword><keyword weight="0.47082">Real-time operating system</keyword><keyword weight="0.50519">Compiler</keyword><keyword weight="0.49967">Component-based software engineering</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>It is widely recognised that the automated validation of complex systems can hardly be achieved without tool integration. The development of the IF-1.0 toolbox [3] was initiated several years ago, in order to provide an open validation platform for timed asynchronous systems (such as telecommunication protocols or distributed applications, in general). The toolbox was built upon an intermediate representation language based on extended timed automata. In particular, this representation allowed us to study the semantics of real-time primitives for asynchronous systems. Currently, the toolbox contains dedicated tools on the intermediate language (such as compilers, static analysers and model-checkers) as well as front-ends to various specification languages and validation tools (academic and commercial ones). Among the dedicated tools, we focused on static analysis (such as slicing and abstraction) which are mandatory for an automated validation of complex systems. Finally, the toolbox was successfully used on several case studies, the most relevant ones being presented in [4].</abstract></paper>
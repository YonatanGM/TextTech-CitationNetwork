<paper id="1488058190"><title>Cache attacks and countermeasures: the case of AES</title><year>2006</year><authors><author org="No institute#TAB#" id="348830572">Dag Arne Osvik</author><author org="Department of Computer Science and Applied mathematics. Weizmann Institute of Science, Rehovot, Israel#TAB#" id="2201755339">Adi Shamir</author><author org="Department of Computer Science and Applied mathematics. Weizmann Institute of Science, Rehovot, Israel#TAB#" id="349649168">Eran Tromer</author></authors><n_citation>709</n_citation><doc_type>Conference</doc_type><references><reference>1506890909</reference><reference>1548516269</reference><reference>1890449996</reference><reference>1988374166</reference><reference>2099179520</reference><reference>2125491202</reference><reference>2126132644</reference><reference>2137243422</reference><reference>2240862428</reference></references><venue id="2760694600" type="C">The Cryptographers’ Track at the RSA Conference</venue><doi>10.1007/11605805_1</doi><keywords><keyword weight="0.54274">Memory protection</keyword><keyword weight="0.53672">Shared memory</keyword><keyword weight="0.4396">Computer science</keyword><keyword weight="0.57184">Cache</keyword><keyword weight="0.56069">CPU cache</keyword><keyword weight="0.57154">Timing attack</keyword><keyword weight="0.5632">Cryptographic primitive</keyword><keyword weight="0.54203">Encryption</keyword><keyword weight="0.60389">Side channel attack</keyword><keyword weight="0.44794">Embedded system</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We describe several software side-channel attacks based on inter-process leakage through the state of the CPU’s memory cache. This leakage reveals memory access patterns, which can be used for cryptanalysis of cryptographic primitives that employ data-dependent table lookups. The attacks allow an unprivileged process to attack other processes running in parallel on the same processor, despite partitioning methods such as memory protection, sandboxing and virtualization. Some of our methods require only the ability to trigger services that perform encryption or MAC using the unknown key, such as encrypted disk partitions or secure network links. Moreover, we demonstrate an extremely strong type of attack, which requires knowledge of neither the specific plaintexts nor ciphertexts, and works by merely monitoring the effect of the cryptographic process on the cache. We discuss in detail several such attacks on AES, and experimentally demonstrate their applicability to real systems, such as OpenSSL and Linux’s dm-crypt encrypted partitions (in the latter case, the full key can be recovered after just 800 writes to the partition, taking 65 milliseconds). Finally, we describe several countermeasures for mitigating such attacks.</abstract></paper>
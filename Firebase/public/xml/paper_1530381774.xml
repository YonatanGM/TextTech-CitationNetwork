<paper id="1530381774"><title>Modular Internet Programming with Cells</title><year>2002</year><authors><author org="the Johns Hopkins University" id="310392996">Ran Rinat</author><author org="the Johns Hopkins University" id="2810065659">Scott F. Smith</author></authors><n_citation>18</n_citation><doc_type>Conference</doc_type><references><reference>1521367064</reference><reference>1543582855</reference><reference>2015554455</reference><reference>2043261859</reference><reference>2045723688</reference><reference>2077997786</reference><reference>2083803628</reference><reference>2098515008</reference><reference>2120284965</reference><reference>2121134342</reference><reference>2133254848</reference><reference>2136134319</reference><reference>2140508184</reference><reference>2167500728</reference><reference>2169011679</reference><reference>2295484512</reference><reference>2404673481</reference></references><venue id="1177184315" type="C">European Conference on Object-Oriented Programming</venue><doi>10.1007/3-540-47993-7_12</doi><keywords><keyword weight="0.46025">Programming language</keyword><keyword weight="0.62244">Java annotation</keyword><keyword weight="0.4535">Computer science</keyword><keyword weight="0.6111">Real time Java</keyword><keyword weight="0.44572">Theoretical computer science</keyword><keyword weight="0.60586">strictfp</keyword><keyword weight="0.61675">Generics in Java</keyword><keyword weight="0.52931">Modular programming</keyword><keyword weight="0.55057">Plug-in</keyword><keyword weight="0.58137">Java</keyword><keyword weight="0.54217">The Internet</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The success of Java in recent years is largely due to its targeting as a language for the Internet. Many of the network-related features of Java however are not part of the core language design. In this paper we focus on the design of a more parsimonious Internet programming language, which supports network integration smoothly and coherently as part of its core specification.The key idea is to center these extensions around the unified notion of a cell. Cells are deployable containers of objects and code, which may import (plugin) and export (plugout) classes and operations. They may be dynamically linked and unlinked, locally or across the network. Cells may be dynamically loaded, unloaded, copied, and moved, and serve as units of security. At first approximation, cells can be thought of as a hybrid between modules and components. Here we concentrate on the design of JCells, a language which builds cells on top of the fundamental Java notions of class, object, and virtual machine.</abstract></paper>
<paper id="1508948563"><title>Formal semantics for interacting UML subsystems</title><year>2002</year><authors><author org="Department of Informatics, TU Munich, Germany and Computing Laboratory, University of Oxford, GB#TAB#" id="1897045236">Jan JÃ¼rjens</author></authors><n_citation>25</n_citation><doc_type>Conference</doc_type><references><reference>189544743</reference><reference>196748788</reference><reference>1480221655</reference><reference>1561365846</reference><reference>1604301660</reference><reference>1800631871</reference><reference>1903741892</reference><reference>1926460446</reference><reference>1946608631</reference><reference>1998017916</reference><reference>2020034474</reference><reference>2118968163</reference><reference>2158327461</reference></references><venue id="1129611459" type="C">Formal Methods for Open Object-Based Distributed Systems</venue><doi>10.1007/978-0-387-35496-5_4</doi><keywords><keyword weight="0.66637">Operational semantics</keyword><keyword weight="0.47616">Programming language</keyword><keyword weight="0.54116">Unified Modeling Language</keyword><keyword weight="0.67994">UML tool</keyword><keyword weight="0.45904">Computer science</keyword><keyword weight="0.53716">Abstract state machines</keyword><keyword weight="0.45724">Theoretical computer science</keyword><keyword weight="0.47494">Equivalence (measure theory)</keyword><keyword weight="0.71811">Applications of UML</keyword><keyword weight="0.0">Semantics of logic</keyword></keywords><publisher>Springer, Boston, MA</publisher><abstract>So far most work on formal semantics for the Unified Modeling Language (UML) has concentrated on single diagrams. To provide a formal foundation for complete system specifications, one needs to put models for the different diagrams into context. We provide a formal semantics for UML subsystems that incorporates a formal semantics of the diagrams contained in a subsystem. It provides message-passing between objects or components specified in different diagrams, including a dispatching mechanism for events, and the handling of actions. It enables one to compose subsystems from sets of subsystems and allows them to interact by passing messages.We give consistency conditions for the diagrams in a subsystem and define a notion of behavioural equivalence and two kinds of refinement for UML subsystems.</abstract></paper>
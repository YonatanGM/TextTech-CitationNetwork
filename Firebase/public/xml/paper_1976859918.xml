<paper id="1976859918"><title>A class of functions synthesized from a finite number of examples and a lisp program scheme</title><year>1979</year><authors><author org="GR 22 du CNRS Institut de Programmation, Paris, France" id="2984758347">Yves Kodratoff</author></authors><n_citation>23</n_citation><doc_type>Journal</doc_type><references><reference>1525140360</reference><reference>1881676931</reference><reference>1988651604</reference><reference>1993524544</reference><reference>2051793989</reference><reference>2074407326</reference><reference>2076242896</reference></references><venue id="148521650" type="J">International Journal of Parallel Programming</venue><doi>10.1007/BF00995500</doi><keywords><keyword weight="0.45637">Differential equation</keyword><keyword weight="0.4898">Finite set</keyword><keyword weight="0.53368">Program synthesis</keyword><keyword weight="0.46309">Computer science</keyword><keyword weight="0.6527">Lisp</keyword><keyword weight="0.47871">Theoretical computer science</keyword><keyword weight="0.60236">Pattern matching</keyword></keywords><publisher>Springer Science and Business Media LLC</publisher><abstract>We define a class of functions that can be synthesized from example problems. The algorithmic representation of these functions is the interpretation of a given scheme. The instantiation of the scheme variables is realized by a new method which uses pattern matching then if necessary generalization and further pattern matching. One can compute the number of examples necessary to characterize in a unique way a function of this class.</abstract></paper>
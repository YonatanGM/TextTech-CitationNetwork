<paper id="1510469359"><title>Logic Programming Semantics Made Easy</title><year>1992</year><authors><author org="University of Antwerp-UIA" id="360280995">Els Laenens</author><author org="University of Antwerp-UIA" id="2076226297">Dirk Vermeir</author><author org="MCC#TAB#" id="2028117853">Carlo Zaniolo</author></authors><n_citation>7</n_citation><doc_type>Conference</doc_type><references><reference>91931761</reference><reference>1511711492</reference><reference>1672891595</reference><reference>1968513265</reference><reference>1984715534</reference><reference>2026953979</reference><reference>2038761666</reference><reference>2104646930</reference><reference>2128770734</reference></references><venue id="1141821850" type="C">International Colloquium on Automata, Languages and Programming</venue><doi>10.1007/3-540-55719-9_99</doi><keywords><keyword weight="0.65148">Axiomatic semantics</keyword><keyword weight="0.58438">Autoepistemic logic</keyword><keyword weight="0.45633">Programming language</keyword><keyword weight="0.59157">Horn clause</keyword><keyword weight="0.44141">Computer science</keyword><keyword weight="0.60617">Multimodal logic</keyword><keyword weight="0.58295">Description logic</keyword><keyword weight="0.45468">Theoretical computer science</keyword><keyword weight="0.67651">Stable model semantics</keyword><keyword weight="0.59294">Logic programming</keyword><keyword weight="0.73822">Well-founded semantics</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We propose a new model-theoretic semantics for logic programs, called pure semantics, based on the notions of unfounded set and assumption set. The pure semantics emerges from the observation that major logic programming semantics have the following feature in common: given an ’intended model’ M, the set of negative literals in M corresponds exactly with the greatest unfounded set w.r.t. the set of positive literals in M. In other words, a model contains redundant information as its negative part can be described in function of its positive part. Thus, the total models and the partial models of programs can now be characterized by a set of positive literals. Based on this idea, we develop the pure semantics for logic programs. The result is a remarkably simple semantics that unifies previous approaches and explains how partial model semantics follows from a weaker closed world assumption.</abstract></paper>
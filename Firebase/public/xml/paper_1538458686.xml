<paper id="1538458686"><title>Generalized Constant Propagation: A Study in C</title><year>1996</year><authors><author org="McGill University" id="2078276142">Clark Verbrugge</author><author org="McGill University" id="2143635949">Phong Co</author><author org="McGill University" id="2057929015">Laurie J. Hendren</author></authors><n_citation>34</n_citation><doc_type>Conference</doc_type><references><reference>1568478782</reference><reference>1977606188</reference><reference>1994372357</reference><reference>2006471246</reference><reference>2034579607</reference><reference>2035329159</reference><reference>2043100293</reference><reference>2064934273</reference><reference>2097145414</reference><reference>2102890180</reference><reference>2143659699</reference><reference>2151360539</reference><reference>2161065509</reference><reference>2165069483</reference></references><venue id="1162239172" type="C">Compiler Construction</venue><doi>10.1007/3-540-61053-7_54</doi><keywords><keyword weight="0.45972">Programming language</keyword><keyword weight="0.5123">Subroutine</keyword><keyword weight="0.462">Algebra</keyword><keyword weight="0.44356">Computer science</keyword><keyword weight="0.49989">Abstract interpretation</keyword><keyword weight="0.5533">Compiler</keyword><keyword weight="0.0">Intermediate language</keyword><keyword weight="0.4352">Propagation constant</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Generalized Constant Propagation (GCP) statically estimates the ranges of variables throughout a program. GCP is a top-down compositional compiler analysis in the style of abstract intepretation. In this paper we present an implementation of both intraprocedural and interprocedural GCP within the context of the C language. We compare the accuracy and utility of GCP information for several versions of GCP using experimental results from an actual implementation.</abstract></paper>
<paper id="1538444665"><title>Diagrams and Programming Languages for Programmable Controllers</title><year>1997</year><authors><author org="Department of Computer Science The Kings Buildings" id="2535540151">Stuart Anderson</author><author org="Department of Computer Science The Kings Buildings" id="1697631816">Konstantinos Tourlas</author></authors><n_citation>67</n_citation><doc_type>Conference</doc_type><references><reference>1503973138</reference><reference>2024074683</reference></references><venue id="1169806927" type="C">Formal Methods</venue><doi>10.1007/3-540-63533-5_1</doi><keywords><keyword weight="0.54546">Domain-specific language</keyword><keyword weight="0.54598">Notation</keyword><keyword weight="0.4196">Software deployment</keyword><keyword weight="0.47343">Programming language</keyword><keyword weight="0.50068">Diagrammatic reasoning</keyword><keyword weight="0.46014">Computer science</keyword><keyword weight="0.4551">Theoretical computer science</keyword><keyword weight="0.49708">Programmable logic controller</keyword><keyword weight="0.47001">Function block diagram</keyword></keywords><publisher>Springer Berlin Heidelberg</publisher><abstract>In many domain specific languages diagrammatic notation is used because it conforms to notations used by domain specialists before the deployment of programmable components. The aim is to lessen the possibility of error by changing as little as possible. However the switch to programmable components often means a radical change in the details of the implementation. Such changes can mean that the domain expertsu0027 interpretation of the notation diverges significantly from the actual implementation.</abstract></paper>
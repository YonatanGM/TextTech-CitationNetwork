<paper id="1491466960"><title>An Approach to Improve Locality Using Sandwich Types</title><year>1998</year><authors><author org="University of Karlsruhe#TAB#" id="221371397">Daniela Genius</author><author org="University of Karlsruhe#TAB#" id="2974729779">Martin Trapp</author><author org="University of Karlsruhe#TAB#" id="2173354928">Wolf Zimmermann</author></authors><n_citation>16</n_citation><doc_type>Journal</doc_type><references><reference>106989945</reference><reference>1483872283</reference><reference>1533098338</reference><reference>1583464938</reference><reference>2053986424</reference><reference>2083276428</reference></references><venue id="106296714" type="J">Lecture Notes in Computer Science</venue><doi>10.1007/BFb0055519</doi><keywords><keyword weight="0.5768">Locality</keyword><keyword weight="0.54327">Object-oriented programming</keyword><keyword weight="0.46802">Computer science</keyword><keyword weight="0.47262">Theoretical computer science</keyword><keyword weight="0.55537">Heap (data structure)</keyword><keyword weight="0.0">Storage management</keyword><keyword weight="0.56658">Garbage collection</keyword><keyword weight="0.4587">Artificial intelligence</keyword><keyword weight="0.52494">Abstract syntax</keyword><keyword weight="0.48691">Selection rule</keyword><keyword weight="0.4584">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We show how to increase locality of object-oriented programs using several heaps. We introduce the notion of sandwich types which allow a coarser view on objects. Our idea for increasing locality is to use one heap per object of sandwich types. Performance measurements demonstrate that the running time is improved by upto a factor 5 using this strategy. The paper shows how to derive sandwich types from classes. Thus, it is possible to control the allocation of the different heaps using compile-time information.</abstract></paper>
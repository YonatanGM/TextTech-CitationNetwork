<paper id="1863517246"><title>A Tool Architecture for the Next Generation of Uppaal</title><year>2003</year><authors><author org=", Uppsala University," id="2136663722">Alexandre David</author><author org=", Aalborg University" id="2130379315">Gerd Behrmann</author><author org=", Aalborg University" id="2146581609">Kim Guldstrand Larsen</author><author org=", Uppsala University," id="2124415778">Wang Yi</author></authors><n_citation>40</n_citation><doc_type>Journal</doc_type><references><reference>1508821727</reference><reference>1529559025</reference><reference>1543690662</reference><reference>1556566737</reference><reference>1820192350</reference><reference>1846929317</reference><reference>1874996599</reference><reference>1957639564</reference><reference>2023499821</reference><reference>2040032021</reference><reference>2080267935</reference><reference>2101508170</reference><reference>2102380292</reference><reference>2115309705</reference><reference>2137382450</reference><reference>2138620071</reference><reference>2145000217</reference><reference>2156027773</reference><reference>2788342898</reference></references><venue id="106296714" type="J">Lecture Notes in Computer Science</venue><doi>10.1007/978-3-540-40007-3_22</doi><keywords><keyword weight="0.51765">Data structure</keyword><keyword weight="0.4929">Data modeling</keyword><keyword weight="0.48694">Model checking</keyword><keyword weight="0.47023">Computer science</keyword><keyword weight="0.48665">Reachability</keyword><keyword weight="0.51984">Reference implementation</keyword><keyword weight="0.53771">Memory management</keyword><keyword weight="0.51386">Formal methods</keyword><keyword weight="0.48277">Software development</keyword><keyword weight="0.47634">Distributed computing</keyword><keyword weight="0.47561">Embedded system</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We present the design of the model-checking engine and internal data structures for the next generation of Uppaal. The design is based on a pipeline architecture where each stage represents one independent operation in the verification algorithms. The architecture is based on essentially one shared data structure to reduce redundant computations in state exploration, which unifies the so-called passed and waiting lists of the traditional reachability algorithm. In the implementation, instead of using standard memory management functions from general-purpose operating systems, we have developed a special-purpose storage manager to best utilize sharing in physical storage. We present experimental results supporting these design decisions. It is demonstrated that the new design and implementation improves the efficiency of the current distributed version of Uppaal by about 60% in time and 80% in space.</abstract></paper>
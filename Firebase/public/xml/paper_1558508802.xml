<paper id="1558508802"><title>Exceeding the limits of polymorphism in database programming languages</title><year>1990</year><authors><author org="University of Massachusetts at Amherst" id="2170832848">David Stemple</author><author org="University of Massachusetts at Amherst" id="2280399069">Leo Fegaras</author><author org="University of Massachusetts at Amherst" id="2579668299">Tim Sheard</author><author org="University of Massachusetts at Amherst" id="2973267407">Adolfo Socorro</author></authors><n_citation>41</n_citation><doc_type>Conference</doc_type><references><reference>1512683244</reference><reference>1535759589</reference><reference>1545571974</reference><reference>1596087056</reference><reference>1984958950</reference><reference>2005471433</reference><reference>2060531066</reference><reference>2078434561</reference><reference>2098603571</reference><reference>2162602286</reference><reference>2168287017</reference></references><venue id="1132593990" type="C">Extending Database Technology</venue><doi>10.1007/BFb0022176</doi><keywords><keyword weight="0.60139">Object-relational mapping</keyword><keyword weight="0.68192">Fifth-generation programming language</keyword><keyword weight="0.47222">Programming language</keyword><keyword weight="0.655">Programming paradigm</keyword><keyword weight="0.46363">Computer science</keyword><keyword weight="0.63742">Inductive programming</keyword><keyword weight="0.65526">Fourth-generation programming language</keyword><keyword weight="0.58989">View</keyword><keyword weight="0.59268">Component-oriented database</keyword><keyword weight="0.45991">Theoretical computer science</keyword><keyword weight="0.66891">Declarative programming</keyword><keyword weight="0.44253">Database</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Database programming languages represent an attempt to merge the technologies of programming languages and database management in order to improve the development of data-intensive applications. One aspect of the research on database programming languages is an attempt to exploit polymorphism and higher order functions to integrate query algebra capabilities into programming languages. This has proved to be difficult especially in strongly and statically typed languages, due to the high level of polymorphism and reflection in database query languages. For example, the natural join operation of relational algebra requires examination of the types of the input relations to determine the match predicate and output type, neither of which are easily expressed in current polymorphic programming languages. These aspects of natural join require quite sophisticated polymorphism and some kind of reflection. The reflection must be powerful enough to allow the examination of the input types to determine the match function and to synthesize the output type. It is the difficulty in achieving such power parsimoniously that we examine in this paper.</abstract></paper>
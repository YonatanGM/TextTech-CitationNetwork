<paper id="1978434005"><title>Describing and using non functional aspects in component based applications</title><year>2002</year><authors><author org="Dassault Systèmes / LSR, 220, rue de la Chimie BP53, 38041 Grenoble Cedex 9, France" id="2112347145">Frédéric Duclos</author><author org="LSR-IMAG, 220, rue de la Chimie BP53, 38041 Grenoble Cedex 9, France" id="100578647">Jacky Estublier</author><author org="LSR-IMAG, 220, rue de la Chimie BP53, 38041 Grenoble Cedex 9, France" id="2078085423">Philippe Morat</author></authors><n_citation>80</n_citation><doc_type>Conference</doc_type><references><reference>2114696172</reference><reference>2130916646</reference><reference>2135382570</reference><reference>2138363365</reference><reference>2139897701</reference><reference>2294004164</reference></references><venue id="1194005070" type="C">Aspect-Oriented Software Development</venue><doi>10.1145/508386.508394</doi><keywords><keyword weight="0.43492">Stub (electronics)</keyword><keyword weight="0.0">Non functional</keyword><keyword weight="0.46968">Programming language</keyword><keyword weight="0.60848">Aspect-oriented programming</keyword><keyword weight="0.47989">Software engineering</keyword><keyword weight="0.47238">Computer science</keyword><keyword weight="0.59396">Separation of concerns</keyword><keyword weight="0.59838">Component-based software engineering</keyword><keyword weight="0.0">Merge (version control)</keyword></keywords><publisher>ACM</publisher><abstract>One of the major progress due to component based technology is the capability to let the "infrastructure" manage some (non functional or extra functional) aspects such as persistency, distribution and so on without having to change the application code, using a wrappers technology (containers). Aspect Oriented Programming (AOP) is a technology that provides a language in which different aspects can be applied to an application using a technology that "weaves" the code implementing the aspect inside the application code.Both technologies are addressing the same "separation of concerns" issue, but containers propose only a fixed set of services, while AOP require the capability to change the component code, and is working at the object level.In our work, we merge both approaches, allowing aspect designers to define new aspects or services and aspect users to apply these aspects or services on components without the component code availability. This goal is reached by providing two languages, one for aspect designers the other one for aspect users, and by using a palette of technologies including object (stub) generation, method call interception and run-time instrumentation.</abstract></paper>
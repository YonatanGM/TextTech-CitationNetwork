<paper id="1605985842"><title>Thread-Modular Abstraction Refinement</title><year>2003</year><authors><author org="University of California" id="2707196735">Thomas A. Henzinger</author><author org="University of California" id="2068611990">Ranjit Jhala</author><author org="University of California" id="2156286033">Rupak Majumdar</author><author org="Microsoft Research,#TAB#" id="1985363956">Shaz Qadeer</author></authors><n_citation>103</n_citation><doc_type>Conference</doc_type><references><reference>1482207865</reference><reference>1497571013</reference><reference>1541969962</reference><reference>1562915062</reference><reference>1573428492</reference><reference>1964727056</reference><reference>1968057948</reference><reference>1972544179</reference><reference>2007541742</reference><reference>2040060046</reference><reference>2082000355</reference><reference>2090551028</reference><reference>2103957752</reference><reference>2115969864</reference><reference>2135274583</reference><reference>2144118030</reference><reference>2158395308</reference><reference>2295903414</reference><reference>2296232480</reference><reference>2912904668</reference></references><venue id="1162450063" type="C">Computer Aided Verification</venue><doi>10.1007/978-3-540-45069-6_27</doi><keywords><keyword weight="0.5299">Race condition</keyword><keyword weight="0.53868">Model checking</keyword><keyword weight="0.46801">Computer science</keyword><keyword weight="0.51455">Concurrency</keyword><keyword weight="0.46608">Algorithm</keyword><keyword weight="0.47001">Theoretical computer science</keyword><keyword weight="0.50893">Thread (computing)</keyword><keyword weight="0.48916">Software</keyword><keyword weight="0.48939">Modular design</keyword><keyword weight="0.51227">State space</keyword><keyword weight="0.5367">Software verification</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We present an algorithm called Tar (“Thread-modular Abstraction Refinement”) for model checking safety properties of concurrent software. The Tar algorithm uses thread-modular assume-guarantee reasoning to overcome the exponential complexity in the control state of multithreaded programs. Thread modularity means that Tar explores the state space of one thread at a time, making assumptions about how the environment can interfere. The Tar algorithm uses counterexample-guided predicate-abstraction refinement to overcome the usually infinite complexity in the data state of C programs. A successive approximation scheme automatically infers the necessary precision on data variables as well as suitable environment assumptions. The scheme is novel in that transition relations are approximated from above, while at the same time environment assumptions are approximated from below. In our software verification tool Blast we have implemented a fully automatic race checker for multithreaded C programs which is based on the Tar algorithm. This tool has verified a wide variety of commonly used locking idioms, including locking schemes that are not amenable to existing dynamic and static race checkers such as Eraser or Warlock.</abstract></paper>
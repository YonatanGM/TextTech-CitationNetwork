<paper id="1561329096"><title>Towards Generating Acceptance Tests for Product Lines</title><year>2004</year><authors><author org="Avaya Laboratories" id="2430394421">Birgit Geppert</author><author org="Avaya Laboratories" id="2462094061">J. Jenny Li</author><author org="Avaya Laboratories" id="2607849442">Frank Rößler</author><author org="Avaya Laboratories" id="2618245063">David M. Weiss</author></authors><n_citation>31</n_citation><doc_type>Conference</doc_type><references><reference>1554977156</reference><reference>1557270615</reference><reference>1611760289</reference><reference>1985551847</reference><reference>1999010821</reference><reference>2016457827</reference><reference>2051221173</reference><reference>2104323983</reference><reference>2116844130</reference><reference>2121797471</reference><reference>2132234187</reference></references><venue id="2756309959" type="C">International Conference on Software Reuse</venue><doi>10.1007/978-3-540-27799-6_4</doi><keywords><keyword weight="0.46673">Industrial engineering</keyword><keyword weight="0.46261">Computer science</keyword><keyword weight="0.47933">Software</keyword><keyword weight="0.54936">Decision model</keyword><keyword weight="0.61316">Software product line</keyword><keyword weight="0.56899">Test case</keyword><keyword weight="0.54939">Acceptance testing</keyword><keyword weight="0.45957">Modular design</keyword><keyword weight="0.5493">Software development</keyword><keyword weight="0.58499">New product development</keyword><keyword weight="0.44849">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Software product-line engineering aims at improving the efficiency and effectiveness of software development by exploiting the product line members’ commonalities and by controlling their variabilities. The duality of commonalities and variabilities holds for all kinds of assets ranging from requirements specifications over design documents to test cases. A decision model controls the way a product can be distinguished from the rest of the family and is used to extract product-specific information (e.g., product requirements) from the family specifications. Though we traditionally employ decision models for generating code, we aim on capitalizing on the investment for designing the decision model by leveraging it to generate test cases. In this paper we focus on acceptance testing of functions and features, and introduce our approach of using the decision model concept to maintain and generate acceptance test cases for one of our major product lines. Preliminary evaluation of this method demonstrates very promising savings of space and effort as compared to conventional methods.</abstract></paper>
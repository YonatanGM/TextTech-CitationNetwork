<paper id="1546496162"><title>A Typed Interrupt Calculus</title><year>2002</year><authors><author org="Purdue University" id="5014031">Jens Palsberg</author><author org="Purdue University" id="2307823297">Di Ma</author></authors><n_citation>24</n_citation><doc_type>Journal</doc_type><references><reference>1544633123</reference><reference>1990607696</reference><reference>2013672985</reference><reference>2035216234</reference><reference>2040141020</reference><reference>2121096888</reference><reference>2128932399</reference><reference>2136290535</reference><reference>2137865376</reference><reference>2161969548</reference><reference>2914559425</reference></references><venue id="106296714" type="J">Lecture Notes in Computer Science</venue><doi>10.1007/3-540-45739-9_18</doi><keywords><keyword weight="0.66937">Interrupt</keyword><keyword weight="0.54285">Model checking</keyword><keyword weight="0.44094">Computer science</keyword><keyword weight="0.72581">Interrupt handler</keyword><keyword weight="0.48634">Type theory</keyword><keyword weight="0.52943">Real-time operating system</keyword><keyword weight="0.49978">Program analysis</keyword><keyword weight="0.74209">Interrupt vector table</keyword><keyword weight="0.41541">Calculus</keyword><keyword weight="0.44211">Embedded system</keyword><keyword weight="0.58706">Reentrancy</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Most real-time systems require responsive interrupt handling. Programming of interrupt handlers is challenging: in order to ensure responsiveness, it is often necessary to have interrupt processing enabled in the body of lower priority handlers. It would be a programming error to allow the interrupt handlers to interrupt each other in a cyclic fashion; it could lead to an unbounded stack. Until now, static checking for such errors could only be done using model checking. However, the needed form of model checking requires a whole-program analysis that cannot check program fragments. In this paper, we present a calculus that contains essential constructs for programming interrupt-driven systems. The calculus has a static type system that guarantees stack boundedness and enables modular type checking. A number of common programming idioms have been type checked using our prototype implementation.</abstract></paper>
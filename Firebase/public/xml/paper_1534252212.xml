<paper id="1534252212"><title>The Formal Design of 1M-gate ASICs</title><year>2000</year><authors><author org="Silicon Graphics Inc., Mountain View, California, USA. asgeir.eiriksson@computer.org#TAB#" id="2661942119">Ásgeir Th. Eiríksson</author></authors><n_citation>25</n_citation><doc_type>Conference</doc_type><references><reference>1500286044</reference><reference>1986558678</reference><reference>2069984295</reference><reference>2100720297</reference><reference>2109338287</reference><reference>2110648791</reference><reference>2538478261</reference><reference>2542290040</reference><reference>2582540560</reference></references><venue id="1169806927" type="C">Formal Methods</venue><doi>10.1023/A:1008773308108</doi><keywords><keyword weight="0.59618">Formal equivalence checking</keyword><keyword weight="0.46672">Computer architecture</keyword><keyword weight="0.52392">Model checking</keyword><keyword weight="0.46826">Programming language</keyword><keyword weight="0.45786">Computer science</keyword><keyword weight="0.51829">CPU cache</keyword><keyword weight="0.55916">Correctness</keyword><keyword weight="0.51409">Systems design</keyword><keyword weight="0.44846">Real-time computing</keyword><keyword weight="0.52836">Application-specific integrated circuit</keyword><keyword weight="0.56735">Verilog</keyword><keyword weight="0.58699">Formal methods</keyword></keywords><publisher>Kluwer Academic Publishers</publisher><abstract>Refinement of a directory based cache coherence protocol specification, to a pipelined hardware implementation is described. The hardware that is analyzed is the most complex part of a 1M-gate ASIC. The design consists of 30,000 lines of synthesizable register transfer-level verilog code, amounting to approximately 200,000 gates. The design contains a pipeline that is 5 levels deep and approximately 150 bits wide. It has a 16 entry, 150 bit wide, context addressable memory (CAM), and includes a 256 × 72 bit RAM. Refinement maps relate the behavior of the high-level protocol model to the hardware implementation. The Cadence Berkeley Labs SMV model checker was used to create the maps and to prove their correctness. There are approximately 1500 proof obligations. The formal model has been used for three tasks. First, to formally diagnose, and then fix broken features in a legacy version of the design. Second, to integrate the legacy sub-system design with a new system design. Finally, it has been used to formally design additional sub-system features required for the new system design. The same hardware designer enhanced the design, created the refinement maps, and formally proved the correctness of the refinements.</abstract></paper>
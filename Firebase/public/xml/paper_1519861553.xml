<paper id="1519861553"><title>Data Flow Analysis as Model Checking</title><year>1991</year><authors><author org="Lehrstuhl für Informatik II RWTH, Aachen," id="2063423718">Bernhard Steffen</author></authors><n_citation>112</n_citation><doc_type>Conference</doc_type><references><reference>1492683468</reference><reference>1550474961</reference><reference>1590222459</reference><reference>1605152326</reference><reference>1791618115</reference><reference>1982232871</reference><reference>1998717006</reference><reference>2010452422</reference><reference>2015640848</reference><reference>2039572288</reference><reference>2043100293</reference><reference>2054120966</reference><reference>2054554282</reference><reference>2071260794</reference><reference>2087086761</reference><reference>2124153277</reference><reference>2151174601</reference><reference>2151623109</reference><reference>2171536993</reference><reference>2176330945</reference><reference>2614279894</reference><reference>2914577191</reference></references><venue id="2756067413" type="C">International Conference on Theoretical Aspects of Computer Software</venue><doi>10.1007/3-540-54415-1_54</doi><keywords><keyword weight="0.56423">Specification language</keyword><keyword weight="0.52722">Abstraction model checking</keyword><keyword weight="0.47122">Programming language</keyword><keyword weight="0.57824">Model checking</keyword><keyword weight="0.51887">Control flow graph</keyword><keyword weight="0.46762">Computer science</keyword><keyword weight="0.51386">Data-flow analysis</keyword><keyword weight="0.47348">Theoretical computer science</keyword><keyword weight="0.49816">Mathematical proof</keyword><keyword weight="0.62062">Modal logic</keyword><keyword weight="0.56247">Modal</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The paper develops a framework that is based on the idea that modal logic provides an appropriate framework for the specification of data flow analysis (DFA) algorithms as soon as programs are represented as models of the logic. This can be exploited to construct a DFA-generator that generates efficient implementations of DFA-algorithms from modal specifications by partially evaluating a specific model checker with respect to the specifying modal formula. Moreover, the use of a modal logic as specification language for DFA-algorithms supports the compositional development of specifications and structured proofs of properties of DFA-algorithms. — The framework is illustrated by means of a real life example: the problem of determining optimal computation points within flow graphs.</abstract></paper>
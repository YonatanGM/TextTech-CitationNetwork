<paper id="1969085493"><title>An algorithm for ordering subgoals in NAIL</title><year>1988</year><authors><author org="Stanford, University" id="2102435307">Katherine A. Morris</author></authors><n_citation>29</n_citation><doc_type>Conference</doc_type><references><reference>1600378632</reference><reference>1991640369</reference><reference>2027276583</reference></references><venue id="1184151122" type="C">Symposium on Principles of Database Systems</venue><doi>10.1145/308386.308419</doi><keywords><keyword weight="0.45469">Discrete mathematics</keyword><keyword weight="0.0">Graph</keyword><keyword weight="0.49437">Data structure</keyword><keyword weight="0.62096">Indifference graph</keyword><keyword weight="0.51632">Arity</keyword><keyword weight="0.48865">Polynomial</keyword><keyword weight="0.44419">Computer science</keyword><keyword weight="0.46128">Algorithm</keyword><keyword weight="0.46325">Theoretical computer science</keyword><keyword weight="0.47782">Recursion</keyword><keyword weight="0.48729">Bounded function</keyword></keywords><publisher>ACM</publisher><abstract>Rule-goal graphs are the central data structures used in the NAIL′ system, a knowledge-base system being developed at Stanford University They are constructed while testing the applicability of capture rules , and traversed while generating ICODE to evaluate queries. Generating rule-goal graphs may be reduced to the problem of ordering subgoals. This paper gives an algorithm for generating rule-goal graphs efficiently, in time polynomial in the size of the rules if the arity of recursive predicates is bounded. The graphs generated may be suboptimal for some purposes, but the algorithm will always find a rule-goal graph if one exists. The algorithm has been implemented in Cprolog, and is currently being used to generate rule-goal graphs for the NAIL′ system</abstract></paper>
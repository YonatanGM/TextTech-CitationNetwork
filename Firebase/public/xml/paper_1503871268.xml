<paper id="1503871268"><title>Typing references by effect inference</title><year>1992</year><authors><author org="Rice University" id="2159959243">Andrew K. Wright</author></authors><n_citation>28</n_citation><doc_type>Conference</doc_type><references><reference>1534508664</reference><reference>1829244603</reference><reference>2010525351</reference><reference>2017381819</reference><reference>2021986357</reference><reference>2046137117</reference><reference>2054299141</reference><reference>2110135416</reference><reference>2118068787</reference><reference>2151156765</reference><reference>2151716725</reference><reference>2163976959</reference><reference>2166822586</reference></references><venue id="1136861413" type="C">European Symposium on Programming</venue><doi>10.1007/3-540-55253-7_28</doi><keywords><keyword weight="0.46383">Programming language</keyword><keyword weight="0.5544">Functional programming</keyword><keyword weight="0.54773">Inference</keyword><keyword weight="0.4458">Computer science</keyword><keyword weight="0.37518">Typing</keyword><keyword weight="0.45377">Natural language processing</keyword><keyword weight="0.0">Artificial intelligence</keyword><keyword weight="0.56932">Soundness</keyword><keyword weight="0.60554">Type variable</keyword><keyword weight="0.51725">Semantics</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>Hindley/Milner-style polymorphism is a simple, natural, and flexible type discipline for functional languages, but incorporating imperative extensions is difficult. We present a new technique for typing references in the presence of polymorphism by inferring a concise summary of each expressionu0027s allocation behaviorâ€”a type effect. A simple technique for proving soundness with respect to a reduction semantics demonstrates that the type system prevents type errors. By establishing that the system corresponds to an alternate system better suited to implementation, we obtain an algorithm to perform type and effect inference.</abstract></paper>
<paper id="1511470875"><title>Efficient Reachability Set Generation and Storage Using Decision Diagrams</title><year>1999</year><authors><author org="College of William &amp; Mary, Williamsburg," id="2022547663">Andrew S. Miner</author><author org="College of William &amp; Mary, Williamsburg," id="218832441">Gianfranco Ciardo</author></authors><n_citation>145</n_citation><doc_type>Conference</doc_type><references><reference>1492259997</reference><reference>1534876514</reference><reference>1540737511</reference><reference>1557545083</reference><reference>1585402899</reference><reference>1591563876</reference><reference>1595213177</reference><reference>1824639939</reference><reference>2030224590</reference><reference>2080267935</reference><reference>2126835091</reference><reference>2130918115</reference><reference>2137108108</reference><reference>2148049017</reference></references><venue id="1204434967" type="C">Applications and Theory of Petri Nets</venue><doi>10.1007/3-540-48745-X_2</doi><keywords><keyword weight="0.49208">Boolean function</keyword><keyword weight="0.52866">Data structure</keyword><keyword weight="0.49996">Locality</keyword><keyword weight="0.57884">Petri net</keyword><keyword weight="0.46568">Computer science</keyword><keyword weight="0.53523">Binary decision diagram</keyword><keyword weight="0.54377">Reachability</keyword><keyword weight="0.49118">State space</keyword><keyword weight="0.45253">Binary number</keyword><keyword weight="0.46695">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We present a new technique for the generation and storage of the reachability set of a Petri net. Our approach is inspired by previous work on Binary and Multi-valued Decision Diagrams but exploits a concept of locality for the effect of a transitionu0027s firing to vastly improve algorithmic performance. The result is a data structure and a set of manipulation routines that can be used to generate and store enormous sets extremely efficiently in terms of both memory and execution time.</abstract></paper>
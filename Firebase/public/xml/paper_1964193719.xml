<paper id="1964193719"><title>Generating data flow analysis algorithms from modal specifications</title><year>1993</year><authors><author org="Lehrstuhl für Programmiersysteme, Fakultät für Mathematik und Informatik, Universität Passau, D-94030 Passau, Germany" id="2989104328">Bernhard Steffen</author></authors><n_citation>66</n_citation><doc_type>Journal</doc_type><references><reference>1490526406</reference><reference>1550474961</reference><reference>1605152326</reference><reference>1791618115</reference><reference>1971107784</reference><reference>1982232871</reference><reference>1998717006</reference><reference>2010452422</reference><reference>2015640848</reference><reference>2039572288</reference><reference>2043100293</reference><reference>2054120966</reference><reference>2054554282</reference><reference>2087086761</reference><reference>2097026217</reference><reference>2098634102</reference><reference>2124153277</reference><reference>2140192407</reference><reference>2151174601</reference><reference>2151623109</reference><reference>2171536993</reference><reference>2176330945</reference><reference>2614279894</reference><reference>2914577191</reference></references><venue id="21029587" type="J">Science of Computer Programming</venue><doi>10.1016/0167-6423(93)90003-8</doi><keywords><keyword weight="0.55279">Specification language</keyword><keyword weight="0.62342">Modal μ-calculus</keyword><keyword weight="0.53765">Model checking</keyword><keyword weight="0.46558">Computer science</keyword><keyword weight="0.51056">Data-flow analysis</keyword><keyword weight="0.46879">Algorithm</keyword><keyword weight="0.6733">Multimodal logic</keyword><keyword weight="0.47192">Theoretical computer science</keyword><keyword weight="0.6266">Modal logic</keyword><keyword weight="0.58471">Modal</keyword><keyword weight="0.52822">Data flow diagram</keyword></keywords><publisher>Elsevier Science Publishers B. V.</publisher><abstract>Abstract The paper develops a framework that is based on the idea that modal logic provides an appropriate framework for the specification of data flow analysis (DFA) algorithms as soon as programs are represented as models of the logic. This can be exploited to construct a DFA-generator that generates efficient implementations of DFA-algorithms from modal specifications by partially evaluating a specific model checker with respect to the specifying modal formula. Moreover, the use of a modal logic as specification language for DFA-algorithms supports the compositional development of specifications and structured proofs of properties of DFA-algorithms. The framework is illustrated by means of a real-life example: the problem of determining optimal computation points within flow graphs.</abstract></paper>
<paper id="1567573409"><title>Comparing Elliptic Curve Cryptography and RSA on 8-bit CPUs</title><year>2004</year><authors><author org="Sun Microsystems Labs#TAB#" id="1975636416">Nils Gura</author><author org="Sun Microsystems Labs#TAB#" id="2286194556">Arun Patel</author><author org="Sun Microsystems Labs#TAB#" id="2949411516">Arvinderpal Wander</author><author org="Sun Microsystems Labs#TAB#" id="2893738150">Hans Eberle</author><author org="Sun Microsystems Labs#TAB#" id="217088312">Sheueling Chang Shantz</author></authors><n_citation>925</n_citation><doc_type>Conference</doc_type><references><reference>1539482743</reference><reference>1546781418</reference><reference>1584722274</reference><reference>1906603983</reference><reference>2174877860</reference><reference>2611983904</reference></references><venue id="1127098075" type="C">Cryptographic Hardware and Embedded Systems</venue><doi>10.1007/978-3-540-28632-5_9</doi><keywords><keyword weight="0.51522">Modular arithmetic</keyword><keyword weight="0.54605">Cryptography</keyword><keyword weight="0.41606">Computer science</keyword><keyword weight="0.44552">Parallel computing</keyword><keyword weight="0.42208">Theoretical computer science</keyword><keyword weight="0.47724">NIST</keyword><keyword weight="0.53625">Multiplication</keyword><keyword weight="0.72055">Elliptic curve point multiplication</keyword><keyword weight="0.66908">Elliptic curve cryptography</keyword><keyword weight="0.53798">Public-key cryptography</keyword><keyword weight="0.52438">Elliptic curve</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Strong public-key cryptography is often considered to be too computationally expensive for small devices if not accelerated by cryptographic hardware. We revisited this statement and implemented elliptic curve point multiplication for 160-bit, 192-bit, and 224-bit NIST/SECG curves over GF(p) and RSA-1024 and RSA-2048 on two 8-bit microcontrollers. To accelerate multiple-precision multiplication, we propose a new algorithm to reduce the number of memory accesses.</abstract></paper>
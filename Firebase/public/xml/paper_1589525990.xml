<paper id="1589525990"><title>Taxonomy and Description of Policy Combination Methods</title><year>2001</year><authors><author org="IP Network Research Center" id="1937209614">Yasusi Kanada</author></authors><n_citation>13</n_citation><doc_type>Conference</doc_type><references><reference>1545499512</reference><reference>2043555680</reference><reference>2139440703</reference><reference>2140311411</reference><reference>2156639545</reference></references><venue id="2757048162" type="C">Policies for Distributed Systems and Networks</venue><doi>10.1007/3-540-44569-2_11</doi><keywords><keyword weight="0.47514">Service quality</keyword><keyword weight="0.475">Computer science</keyword><keyword weight="0.0">Homogeneous</keyword><keyword weight="0.50914">Networking hardware</keyword><keyword weight="0.51462">Access control</keyword><keyword weight="0.53148">Concatenation</keyword><keyword weight="0.52594">Network management</keyword><keyword weight="0.46909">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>To control complicated and decomposable networking functions, such as Diffserv, two or more policies must cooperate. Combining two or more mutually dependent policies for a specific purpose is called policy combination. Methods of passing information between combined policies can be classified into real tags and virtual tags, or labels and attributes. Policy combinations can be classified into concatenation, parallel application, selection, and repetition. Explicitly specifying policy combinations makes policy systems semantically clearer and better suited to general use, extends the range of functionality, and improves the possibility of optimization. If policy combinations can be specified in a policy system, two types of policy organizations can be distinguished: homogeneous and heterogeneous. Heterogeneous organization is more service-oriented and seems to meet service-management requirements, but homogeneous organization is more device-oriented and may provide better performance.</abstract></paper>
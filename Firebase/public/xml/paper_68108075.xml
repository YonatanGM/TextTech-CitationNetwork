<paper id="68108075"><title>Bidirectional Fold and Scan</title><year>1994</year><authors><author org="#N#University of Glasgow#N#" id="2137924390">John T. Oâ€™Donnell</author></authors><n_citation>6</n_citation><doc_type /><references><reference>1506492451</reference><reference>1507693023</reference></references><venue id="" type="">Functional Programming</venue><doi>10.1007/978-1-4471-3236-3_16</doi><keywords><keyword weight="0.40914">Computer science</keyword><keyword weight="0.5045">Circuit design</keyword><keyword weight="0.4542">Algorithm</keyword><keyword weight="0.45443">Auxiliary function</keyword><keyword weight="0.47854">Computation</keyword><keyword weight="0.52187">Fold (higher-order function)</keyword></keywords><publisher>Springer, London</publisher><abstract>Bidirectional fold generalises foldl and foldr to allow simultaneous communication in both directions across a list. Bidirectional scan calculates the list of partial results of a bidirectional fold, just as scanl and scanr calculate the partial results of a foldl or foldr. Mapping scans combine a map with a scan, and often simplify programs using scans. This family of functions is significant because it expresses important patterns of computation that arise repeatedly in circuit design and data parallel programming.</abstract></paper>
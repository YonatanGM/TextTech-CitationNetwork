<paper id="1536007121"><title>SAT Based Abstraction-Refinement Using ILP and Machine Learning Techniques</title><year>2002</year><authors><author org="Carnegie - Mellon University#TAB#" id="2129477832">Edmund M. Clarke</author><author org="Carnegie - Mellon University#TAB#" id="2304711325">Anubhav Gupta</author><author org="Synopsys," id="173956359">James H. Kukula</author><author org="Carnegie - Mellon University#TAB#" id="2497261240">Ofer Shrichman</author></authors><n_citation>131</n_citation><doc_type>Conference</doc_type><references><reference>1529461858</reference><reference>1537551095</reference><reference>1574030932</reference><reference>1787074469</reference><reference>2001289891</reference><reference>2080593426</reference><reference>2115383281</reference><reference>2125055259</reference><reference>2134147303</reference><reference>2142785340</reference><reference>2149706766</reference><reference>2158395308</reference></references><venue id="1162450063" type="C">Computer Aided Verification</venue><doi>10.1007/3-540-45657-0_20</doi><keywords><keyword weight="0.52597">Model checking</keyword><keyword weight="0.49268">Abstraction</keyword><keyword weight="0.44938">Computer science</keyword><keyword weight="0.45854">Theoretical computer science</keyword><keyword weight="0.4812">Integer programming</keyword><keyword weight="0.0">Artificial intelligence</keyword><keyword weight="0.47353">Linear programming</keyword><keyword weight="0.49168">Constraint satisfaction</keyword><keyword weight="0.52148">Boolean satisfiability problem</keyword><keyword weight="0.45268">Algorithm</keyword><keyword weight="0.47788">Propositional calculus</keyword><keyword weight="0.5849">Counterexample</keyword><keyword weight="0.44037">Machine learning</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We describe new techniques for model checking in the counterexample guided abstraction/refinement framework. The abstraction phase u0027hidesu0027 the logic of various variables, hence considering them as inputs. This type of abstraction may lead to u0027spuriousu0027 counterexamples, i.e. traces that can not be simulated on the original (concrete) machine. We check whether a counterexample is real or spurious with a SAT checker. We then use a combination of Integer Linear Programming (ILP) and machine learning techniques for refining the abstraction based on the counterexample. The process is repeated until either a real counterexample is found or the property is verified.We have implemented these techniques on top of the model checker NuSMV and the SAT solver Chaff. Experimental results prove the viability of these new techniques.</abstract></paper>
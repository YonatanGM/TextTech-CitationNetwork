<paper id="1560895966"><title>A PROLOG environment for developing and reasoning about data types</title><year>1985</year><authors><author org="State University of New York at Stony Brook" id="2160390459">J Hsiang</author><author org="State University of New York at Stony Brook" id="2143082811">M K Srivas</author></authors><n_citation>9</n_citation><doc_type>Conference</doc_type><references><reference>16179259</reference><reference>171682210</reference><reference>1513315908</reference><reference>1523315298</reference><reference>1737963147</reference><reference>1835313181</reference><reference>2021173362</reference><reference>2033288425</reference><reference>2056016391</reference><reference>2057602126</reference><reference>2065067434</reference><reference>2081092823</reference><reference>2134338128</reference><reference>2295902379</reference><reference>2559538129</reference></references><venue id="1169806927" type="C">Formal Methods</venue><doi>10.1007/3-540-15199-0_18</doi><keywords><keyword weight="0.60645">Procedural programming</keyword><keyword weight="0.63312">Fifth-generation programming language</keyword><keyword weight="0.63408">Horn clause</keyword><keyword weight="0.47868">Programming language</keyword><keyword weight="0.45178">Computer science</keyword><keyword weight="0.6366">Constraint programming</keyword><keyword weight="0.44576">Theoretical computer science</keyword><keyword weight="0.60527">Symbolic programming</keyword><keyword weight="0.65361">Prolog</keyword><keyword weight="0.6384">Declarative programming</keyword><keyword weight="0.66856">Logic programming</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>PROLOG is a programming language based on first order logic. The feature that distinguishes PROLOG from most other programming languages is that the execution of PROLOG programs is based on subgoal reduction and unification. Unfortunately, the reliance on unification for execution has also inhibited PROLOG from utilizing some recently developed concepts in programming languages such as abstract data types. In this paper we introduce a discipline for incorporating abstract data types into PROLOG, and study the use of PROLOG as a uniform programming environment for the specification, implementation, and verification of PROLOG programs. We illustrate the application of the environment to the development of abstract data types in PROLOG.</abstract></paper>
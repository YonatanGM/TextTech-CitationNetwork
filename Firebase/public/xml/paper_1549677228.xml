<paper id="1549677228"><title>A Protocol Stack Development Tool Using Generative Programming</title><year>2002</year><authors><author org="Carleton University." id="2038552831">Michel Barbeau</author><author org="Carleton University." id="308791174">Francis Bordeleau</author></authors><n_citation>21</n_citation><doc_type>Conference</doc_type><references><reference>1500250067</reference><reference>2067293385</reference><reference>2134323418</reference><reference>2146645075</reference></references><venue id="1121553062" type="C">Generative Programming and Component Engineering</venue><doi>10.1007/3-540-45821-2_6</doi><keywords><keyword weight="0.46133">Programming language</keyword><keyword weight="0.46015">Computer science</keyword><keyword weight="0.44758">Communications system</keyword><keyword weight="0.45633">Theoretical computer science</keyword><keyword weight="0.43274">Generative grammar</keyword><keyword weight="0.0">Transmission protocol</keyword><keyword weight="0.55795">Protocol stack</keyword><keyword weight="0.46948">Control reconfiguration</keyword><keyword weight="0.51685">Automatic programming</keyword><keyword weight="0.46467">Distributed computing</keyword><keyword weight="0.45575">Sketch</keyword><keyword weight="0.50161">Simple Network Management Protocol</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>Traditional protocol implementation approaches capture the structural aspects of protocols in a common base that can be used accross layers. However, they are usually not very good at capturing the behavioral aspects. Two important implementation problems result, namely, reprogramming similar behavior and configuration of crosscutting concerns. In this paper, we present an approach to solve the problems of reprogramming similar behavior and absence of systematic configuration mechanisms for crosscutting concerns in communication systems. Our approach is based on generative programming, has been implemented in C++ and has been validated with several protocols. We also sketch an approach for run-time reconfigurable protocol stacks.</abstract></paper>
<paper id="1608734032"><title>Reasoning with Negative Information, II: Hard Negation, Strong Negation and Logic Programs</title><year>1992</year><authors><author org="Freie UniversitÃ¤t Berlin." id="2303473132">David Pearce</author></authors><n_citation>27</n_citation><doc_type /><references><reference>159747946</reference><reference>1481320527</reference><reference>1511711492</reference><reference>1526228869</reference><reference>1672891595</reference><reference>1756530980</reference><reference>1988347771</reference><reference>2003531456</reference><reference>2015627330</reference><reference>2018830344</reference><reference>2048600620</reference><reference>2052436826</reference><reference>2077425504</reference><reference>2080200227</reference><reference>2090893188</reference><reference>2150425213</reference><reference>2155322595</reference></references><venue id="" type="">Proceedings of the International Workshop on Nonclassical Logics and Information Processing</venue><doi>10.1007/BFb0031924</doi><keywords><keyword weight="0.65146">Negation normal form</keyword><keyword weight="0.68838">Autoepistemic logic</keyword><keyword weight="0.65899">Negation</keyword><keyword weight="0.65054">Multimodal logic</keyword><keyword weight="0.439">Theoretical computer science</keyword><keyword weight="0.67219">Negation as failure</keyword><keyword weight="0.66055">Predicate functor logic</keyword><keyword weight="0.66456">Logic programming</keyword><keyword weight="0.65073">Many-valued logic</keyword><keyword weight="0.44098">Calculus</keyword><keyword weight="0.40547">Mathematics</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>In the framework of extended logic programming we propose a criterion by which a negation operator can be said to express explicit falsity. We show that a certain system of constructive logic with strong negation, due to Lopez-Escobar (1972) and Almukdad u0026 Nelson (1984), fulfils this criterion, as do several recent systems of logic programming, including that of Gelfond u0026 Lifschitz (1990). We use these facts to infer that, from a logical point of view, the programming systems in question can be viewed as subsystems of constructive logic.</abstract></paper>
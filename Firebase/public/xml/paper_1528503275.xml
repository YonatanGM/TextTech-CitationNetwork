<paper id="1528503275"><title>FIAT: A Framework for Interprocedural Analysis and Transfomation</title><year>1993</year><authors><author org="Stanford, University" id="2125314167">Mary W. Hall</author><author org="Rice University" id="2249219846">John M. Mellor-Crummey</author><author org="Rice University" id="2118176015">Alan Carle</author><author org="Rice University" id="2572113231">René G. Rodríguez</author></authors><n_citation>62</n_citation><doc_type>Conference</doc_type><references><reference>1517343420</reference><reference>1593436246</reference><reference>1964583443</reference><reference>1966449927</reference><reference>1972073638</reference><reference>1974470587</reference><reference>1977606188</reference><reference>1980468060</reference><reference>1999961006</reference><reference>2005031208</reference><reference>2022078144</reference><reference>2024988162</reference><reference>2031185609</reference><reference>2034579607</reference><reference>2058614217</reference><reference>2060630116</reference><reference>2064311741</reference><reference>2068274771</reference><reference>2078097796</reference><reference>2103864764</reference><reference>2124153277</reference><reference>2134907441</reference><reference>2135992106</reference><reference>2143659699</reference><reference>2152155870</reference><reference>2156680804</reference><reference>2161044171</reference></references><venue id="1198129048" type="C">Languages and Compilers for Parallel Computing</venue><doi>10.1007/3-540-57659-2_30</doi><keywords><keyword weight="0.44009">Rapid prototyping</keyword><keyword weight="0.4863">System software</keyword><keyword weight="0.64141">Interprocedural optimization</keyword><keyword weight="0.46569">Programming language</keyword><keyword weight="0.48539">Control flow graph</keyword><keyword weight="0.45437">Computer science</keyword><keyword weight="0.44702">Parallel computing</keyword><keyword weight="0.47627">Fortran</keyword><keyword weight="0.47849">Call site</keyword><keyword weight="0.49095">Call graph</keyword><keyword weight="0.54473">Compiler</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The fiat system is a compiler-building tool that enables rapid prototyping of interprocedural analysis and compilation systems. Fiat is a framework because it provides parameterized templates and common drivers to support interprocedural data-flow analysis and procedure cloning. Further, fiat provides the complex underlying support required to collect and manage information about the procedures in the program. Fiatu0027s reliance on system-independent abstractions makes it suitable for use in systems with distinct intermediate code representations and enables sharing of system software across research platforms. Demand-driven analysis maintains a clean separation between interprocedural analysis problems, enabling tools built upon fiat to solve only the data-flow problems of immediate interest. Fiat drives interprocedural optimization in the ParaScope programming tools at Rice University and the SUIF compiler at Stanford University. Fiat has proven to be a valuable aid in development of a large number of interprocedural tools, including a data race detection system, a static performance estimation tool, a distributed-memory compiler for Fortran D, an interactive parallelizing tool and an automatic parallelizer in the SUIF compiler.</abstract></paper>
<paper id="1556247398"><title>Powerful Techniques for the Automatic Generation of Invariants</title><year>1996</year><authors><author org="VERIMAG, Miniparc-Zirst" id="85442675">Saddek Bensalem</author><author org="Christian-Albrechts-Universität zu Kiel," id="245516513">Yassine Lakhnech</author><author org="VERIMAG, Miniparc-Zirst" id="2148743472">Hassen Saïdi</author></authors><n_citation>108</n_citation><doc_type>Conference</doc_type><references><reference>1483327805</reference><reference>1489122955</reference><reference>1540180001</reference><reference>1593428110</reference><reference>1968482350</reference><reference>1973964525</reference><reference>2043100293</reference><reference>2045112813</reference><reference>2054554282</reference><reference>2066210260</reference><reference>2070908350</reference><reference>2090398333</reference><reference>2111619838</reference><reference>2113486906</reference><reference>2129664123</reference></references><venue id="1162450063" type="C">Computer Aided Verification</venue><doi>10.1007/3-540-61474-5_80</doi><keywords><keyword weight="0.43349">Drawback</keyword><keyword weight="0.46475">Tautology (logic)</keyword><keyword weight="0.48421">Invariant (physics)</keyword><keyword weight="0.46032">Computer science</keyword><keyword weight="0.51942">Assertion</keyword><keyword weight="0.47015">Theoretical computer science</keyword><keyword weight="0.50071">Invariant (mathematics)</keyword><keyword weight="0.42376">Predicate (grammar)</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>When proving invariance properties of programs one is faced with two problems. The first problem is related to the necessity of proving tautologies of the considered assertion language, whereas the second manifests in the need of finding sufficiently strong invariants. This paper focuses on the second problem and describes techniques for the automatic generation of invariants. The first set of these techniques is applicable on sequential transition systems and allows to derive so-called local invariants, i.e. predicates which are invariant at some control location. The second is applicable on networks of transition systems and allows to combine local invariants of the sequential components to obtain local invariants of the global systems. Furthermore, a refined strengthening technique is presented that allows to avoid the problem of size-increase of the considered predicates which is the main drawback of the usual strengthening technique. The proposed techniques are illustrated by examples.</abstract></paper>
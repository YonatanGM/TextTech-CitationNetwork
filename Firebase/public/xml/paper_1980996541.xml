<paper id="1980996541"><title>Parallel Real-Time Task Scheduling on Multicore Platforms</title><year>2006</year><authors><author org="The University of North Carolina at Chapel Hill, USA" id="2113290946">James Anderson</author><author org="The University of North Carolina at Chapel Hill, USA" id="2305062547">John Calandrino</author></authors><n_citation>48</n_citation><doc_type>Conference</doc_type><references><reference>1903050471</reference><reference>1943109230</reference><reference>2002209075</reference><reference>2015495501</reference><reference>2056830486</reference><reference>2085830671</reference><reference>2096876228</reference><reference>2097855867</reference><reference>2112067212</reference><reference>2129816520</reference><reference>2141213307</reference></references><venue id="1124527938" type="C">Real-Time Systems Symposium</venue><doi>10.1109/RTSS.2006.32</doi><keywords><keyword weight="0.59161">Fixed-priority pre-emptive scheduling</keyword><keyword weight="0.59485">Fair-share scheduling</keyword><keyword weight="0.44866">Computer science</keyword><keyword weight="0.6377">Gang scheduling</keyword><keyword weight="0.45029">Real-time computing</keyword><keyword weight="0.58846">Two-level scheduling</keyword><keyword weight="0.55699">Thread (computing)</keyword><keyword weight="0.56344">Rate-monotonic scheduling</keyword><keyword weight="0.57561">Dynamic priority scheduling</keyword><keyword weight="0.57365">Earliest deadline first scheduling</keyword><keyword weight="0.46418">Distributed computing</keyword></keywords><publisher>IEEE Computer Society</publisher><abstract>We propose a scheduling method for real-time systems implemented on multicore platforms that encourages individual threads of multithreaded real-time tasks to be scheduled together. When such threads are cooperative and share a common working set, this method enables more effective use of on-chip shared caches.</abstract></paper>
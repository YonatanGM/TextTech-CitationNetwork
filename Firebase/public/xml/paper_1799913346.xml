<paper id="1799913346"><title>DB++ — persistent objects for C++</title><year>1989</year><authors><author org="Institut für Informatik der Universität Zürich" id="2560094070">Duri Schmidt</author><author org="Institut für Informatik der Universität Zürich" id="1992313901">Kurt Bauknecht</author></authors><n_citation>4</n_citation><doc_type /><references><reference>1514299926</reference><reference>1590607611</reference><reference>2013142212</reference><reference>2036862988</reference><reference>2095436501</reference></references><venue id="" type="">BTW</venue><doi>10.1007/978-3-642-74571-3_22</doi><keywords><keyword weight="0.4641">Programming language</keyword><keyword weight="0.44057">Computer science</keyword><keyword weight="0.5694">Relational database management system</keyword><keyword weight="0.59827">Data manipulation language</keyword><keyword weight="0.59007">Relational model</keyword><keyword weight="0.0">Encapsulation (computer programming)</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Most object-oriented programming languages (OOPL) are designed without regard to data base aspects and do not support persistent objects or mechanisms to share objects. Experiences with the combination of C++ [STR86] and a relational database system (RDBS) in the development of a toolset based on the prototyping paradigm [POM88] have shown that the relational data model is not adequate to model the complex objects of the tools. In addition it has been found that the concepts like inheritance and encapsulation realized in the implementation language C++ do not go together well with the concepts incorporated in the RDBS, as for example, the set oriented data manipulation language. This has led to the decision to build persistent objects for C++ as basis for new CASE-tools.</abstract></paper>
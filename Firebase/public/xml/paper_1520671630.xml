<paper id="1520671630"><title>Formal approach to integrating feature and architecture models</title><year>2008</year><authors><author org="School of Computer Science and Informatics, Lero, University College Dublin, Dublin, Ireland#TAB#" id="2059158575">Mikoláš Janota</author><author org="Lero, University of Limerick, Limerick, Ireland#TAB#" id="2016710505">Goetz Botterweck</author></authors><n_citation>34</n_citation><doc_type>Conference</doc_type><references><reference>138147603</reference><reference>1491217533</reference><reference>1509367797</reference><reference>1527213414</reference><reference>1561114351</reference><reference>1570173564</reference><reference>1608654004</reference><reference>1972612110</reference><reference>2011124182</reference><reference>2075642720</reference><reference>2088525832</reference><reference>2112000202</reference><reference>2113201637</reference><reference>2116758077</reference><reference>2125080761</reference><reference>2125853721</reference><reference>2154671707</reference><reference>2160325552</reference><reference>2911646362</reference><reference>2945259913</reference></references><venue id="1187615537" type="C">Fundamental Approaches to Software Engineering</venue><doi>10.1007/978-3-540-78743-3_3</doi><keywords><keyword weight="0.0">Architecture model</keyword><keyword weight="0.49272">Architecture</keyword><keyword weight="0.48094">Programming language</keyword><keyword weight="0.48196">Computer science</keyword><keyword weight="0.49384">Propositional calculus</keyword><keyword weight="0.57094">Modeling language</keyword><keyword weight="0.4797">Theoretical computer science</keyword><keyword weight="0.66969">Feature model</keyword><keyword weight="0.52635">Software</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>If we model a family of software applications with a feature model and an architecture model, we are describing the same subject from different perspectives. Hence, we are running the risk of inconsistencies. For instance, the feature model might allow feature configurations that are not realizable by the :[48],"this paper we tackle :[48],"this problem by providing a formalization of dependencies between features and components. Further, we demonstrate that :[48],"this formalization offers a better understanding of the modeled concepts. Moreover, we propose automated techniques that derive additional information and provide feedback to the user. Finally, we discuss how some of these techniques can be implemented.</abstract></paper>
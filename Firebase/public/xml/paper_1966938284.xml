<paper id="1966938284"><title>Scheduler activations: effective kernel support for the user-level management of parallelism</title><year>1992</year><authors><author org="" id="2148869393">Thomas E. Anderson</author><author org="" id="1988425031">Brian N. Bershad</author><author org="" id="1988594917">Edward D. Lazowska</author><author org="" id="737098973">Henry M. Levy</author></authors><n_citation>406</n_citation><doc_type>Journal</doc_type><references><reference>174424427</reference><reference>1971886849</reference><reference>1978780448</reference><reference>1983587324</reference><reference>1989336110</reference><reference>2005383603</reference><reference>2012898464</reference><reference>2021804287</reference><reference>2022185456</reference><reference>2033854449</reference><reference>2035497537</reference><reference>2043295270</reference><reference>2050241504</reference><reference>2076357067</reference><reference>2089467286</reference><reference>2097655098</reference><reference>2114958150</reference><reference>2119663054</reference><reference>2132532613</reference><reference>2138195484</reference><reference>2174818301</reference></references><venue id="193109227" type="J">ACM Transactions on Computer Systems</venue><doi>10.1145/146941.146944</doi><keywords><keyword weight="0.69792">Scheduler activations</keyword><keyword weight="0.46509">Computer science</keyword><keyword weight="0.67223">Task parallelism</keyword><keyword weight="0.46609">Parallel computing</keyword><keyword weight="0.65911">Thread (computing)</keyword><keyword weight="0.44446">Real-time computing</keyword><keyword weight="0.63302">Kernel preemption</keyword><keyword weight="0.6421">Readersâ€“writers problem</keyword><keyword weight="0.62562">Concurrent data structure</keyword><keyword weight="0.6563">Kernel virtual address space</keyword><keyword weight="0.73543">Green threads</keyword><keyword weight="0.4653">Distributed computing</keyword></keywords><publisher>ACM</publisher><abstract>Threads are the vehicle for concurrency in many approaches to parallel programming. Threads can be supported either by the operating system kernel or by user-level library code in the application address space, but neither approach has been fully satisfactory. This paper addresses this dilemma. First, we argue that the performance of kernel threads is inherently worse than that of user-level threads, rather than this being an artifact of existing implementations; managing parallelism at the user level is essential to high-performance parallel computing. Next, we argue that the problems encountered in integrating user-level threads with other system services is a consequence of the lack of kernel support for user-level threads provided by contemporary multiprocessor operating systems; kernel threads are the wrong abstraction on which to support user-level management of parallelism. Finally, we describe the design, implementation, and performance of a new kernel interface and user-level thread package that together provide the same functionality as kernel threads without compromising the performance and flexibility advantages of user-level management of parallelism.</abstract></paper>
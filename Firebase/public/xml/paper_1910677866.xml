<paper id="1910677866"><title>Requirements engineering by example: an empirical study</title><year>1993</year><authors><author org="Dept. of Bus. Comput., City Univ., London, UK" id="268704431">N.A.M. Maiden</author><author org="Dept. of Bus. Comput., City Univ., London, UK" id="2116800970">A.G. Sutcliffe</author></authors><n_citation>33</n_citation><doc_type>Journal</doc_type><references><reference>1578630904</reference><reference>1967376200</reference><reference>1982530426</reference><reference>2002183047</reference><reference>2004817736</reference><reference>2083039210</reference><reference>2130493984</reference><reference>2160204544</reference></references><venue id="207090427" type="J">Requirements Engineering</venue><doi>10.1109/ISRE.1993.324828</doi><keywords><keyword weight="0.42858">Abstraction</keyword><keyword weight="0.47535">Systems engineering</keyword><keyword weight="0.48441">Software engineering</keyword><keyword weight="0.45855">Computer science</keyword><keyword weight="0.51679">Reuse</keyword><keyword weight="0.53098">Systems analysis</keyword><keyword weight="0.50763">Knowledge-based systems</keyword><keyword weight="0.62692">Software prototyping</keyword><keyword weight="0.71814">Requirements engineering</keyword><keyword weight="0.55158">Software</keyword><keyword weight="0.47056">Empirical research</keyword></keywords><publisher>IEEE</publisher><abstract>Domain abstraction reuse during requirements engineering is evaluated as a paradigm during use of a research tool. Iterative fact acquisition and abstraction retrieval, supported by example-based explanation of abstractions, are implemented in a prototype known as AIR (adviser for intelligent reuse). Observation of the use of AIRs by inexperienced software engineers reveal the effectiveness of this paradigm despite several problems. These problems are examined so as to identify improvements for future versions of intelligent requirements engineering environments. u003e</abstract></paper>
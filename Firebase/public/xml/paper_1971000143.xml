<paper id="1971000143"><title>Asynchronous distributed simulation via a sequence of parallel computations</title><year>1981</year><authors><author org="University of Texas@Austin" id="1572851221">K. M. Chandy</author><author org="University of Texas@Austin" id="2105352400">J. Misra</author></authors><n_citation>589</n_citation><doc_type>Journal</doc_type><references><reference>1968841918</reference><reference>1972182264</reference><reference>2013173096</reference><reference>2075529514</reference><reference>2089867526</reference><reference>2095359054</reference><reference>2110425399</reference><reference>2119360641</reference><reference>2151046831</reference></references><venue id="103482838" type="J">Communications of The ACM</venue><doi>10.1145/358598.358613</doi><keywords><keyword weight="0.52589">Asynchronous communication</keyword><keyword weight="0.43983">Computer science</keyword><keyword weight="0.51629">Parallel algorithm</keyword><keyword weight="0.65238">Deadlock</keyword><keyword weight="0.47481">Parallel computing</keyword><keyword weight="0.49817">Correctness</keyword><keyword weight="0.50581">Multiprocessing</keyword><keyword weight="0.448">Theoretical computer science</keyword><keyword weight="0.55815">Distributed algorithm</keyword><keyword weight="0.52218">Message passing</keyword><keyword weight="0.45977">Distributed computing</keyword><keyword weight="0.50862">Discrete event simulation</keyword></keywords><publisher>ACM</publisher><abstract>An approach to carrying out asynchronous, distributed simulation on multiprocessor messagepassing architectures is presented. This scheme differs from other distributed simulation schemes because (1) the amount of memory required by all processors together is bounded and is no more than the amount required in sequential simulation and (2) the multiprocessor network is allowed to deadlock, the deadlock is detected, and then the deadlock is broken. Proofs for the correctness of this approach are outlined.</abstract></paper>
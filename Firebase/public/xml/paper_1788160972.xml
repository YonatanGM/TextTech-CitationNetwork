<paper id="1788160972"><title>User-Friendly Verification</title><year>1999</year><authors><author org="Academia SInica" id="1991423812">Pao-Ann Hsiung</author><author org="Academia SInica" id="2128555674">Farn Wang</author></authors><n_citation>16</n_citation><doc_type>Conference</doc_type><references><reference>59365162</reference><reference>1528441743</reference><reference>1574289075</reference><reference>1577437452</reference><reference>1831193497</reference><reference>2055558998</reference><reference>2101508170</reference><reference>2102380292</reference><reference>2116989825</reference><reference>2124563781</reference><reference>2166071597</reference><reference>2167668895</reference></references><venue id="1173173816" type="C">Formal Techniques for (Networked and) Distributed Systems</venue><doi>10.1007/978-0-387-35578-8_16</doi><keywords><keyword weight="0.48013">Programming language</keyword><keyword weight="0.55235">Model checking</keyword><keyword weight="0.40912">Exponential function</keyword><keyword weight="0.47738">Computer science</keyword><keyword weight="0.48075">Theoretical computer science</keyword><keyword weight="0.49445">User Friendly</keyword><keyword weight="0.51117">Modular design</keyword><keyword weight="0.0">Bisimulation equivalence</keyword><keyword weight="0.48151">Semantics</keyword><keyword weight="0.46995">Distributed computing</keyword></keywords><publisher>Springer US</publisher><abstract>Model checking often faces the problem of reducing the large exponential sizes of state-space representations. Several reduction techniques such as bisimulation equivalence, partial-order semantics, and symmetry-based reduction have been proposed, but existing tools do not completely allow a user the flexibility in manipulating state spaces. We propose a new user-friendly verification environment where a user has full control on what techniques to apply and in what sequences to apply them. We have implemented the environment in a tool called State-Graph Manipulators (SGM). SGM packages verification techniques into efficient, reusable, modular manipulators, that act on high-level state-space representations called state-graphs. Further, we are also proposing four new state-space reduction techniques, namely variable shielding, read-write analysis, internal transitions bypassing, and sibling transition multiplicity reduction. They are implemented into SGM and experiments have been conducted to show their usefulness.</abstract></paper>
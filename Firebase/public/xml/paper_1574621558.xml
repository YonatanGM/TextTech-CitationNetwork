<paper id="1574621558"><title>The structure of a self-applicable partial evaluator</title><year>1985</year><authors><author org="DIKU, Univ. of Copenhagen" id="321002126">Peter Sestoft</author></authors><n_citation>55</n_citation><doc_type /><references><reference>140789701</reference><reference>1566968514</reference><reference>1912157869</reference><reference>2009674917</reference><reference>2020530016</reference><reference>2057731509</reference><reference>2067693540</reference><reference>2070620189</reference><reference>2089925494</reference></references><venue id="" type="">Programs as Data Objects, Proceedings of a Workshop</venue><doi>10.1007/3-540-16446-4_14</doi><keywords><keyword weight="0.45076">Discrete mathematics</keyword><keyword weight="0.4767">Expression (mathematics)</keyword><keyword weight="0.48939">Partial evaluation</keyword><keyword weight="0.49084">Upper and lower bounds</keyword><keyword weight="0.49069">Abstract interpretation</keyword><keyword weight="0.46156">Lisp</keyword><keyword weight="0.40044">R-value (insulation)</keyword><keyword weight="0.48163">Operator (computer programming)</keyword><keyword weight="0.41551">Mathematics</keyword></keywords><publisher>Springer Berlin Heidelberg</publisher><abstract>interpretation described in subsection 3.1.1, the process of partitioning parameter lists and annotating operators, described in subsection 3.3.2, and the proper function specialization process, described in subsection 3.3.3. Some further post-transformations are described in subsection 3.3.4 that closes this section. 3.3.1 KnoWDlUnknOWD Abstract InterpretatioD The purpose of this phase is to compute for every function in the subject program a safe description of its parameters, whether they are definitely known or possibly unknown at partial evaluation time. Inputs to this phase are 1) the call annotated subject program, and 2) a description of which of the subject programu0027s (i.e. which of the goal functionu0027s) parameters are known and which are unknown at partial evaluation time. That is, this phase does not use the actual values of the known input, just a description telling which of theinput parameters are known. (Equivalent to providing a value for m in Kleeneu0027s S-m-n Theorem). Output is a description, i.e. a mapping that associates with every function a parameter description, classifying each of its parameters as Known resp. Unknown at partial evaluation time. Here Known means "definitely known for all possible values of the subject programu0027s known input", and Unknown means "possibly unknown for some (or all) values of the known input". For the following exposition we will assume this L subject program given Fii:ure 2: An L Subject PrQi:ram consisting ofn ~ 1 functions fi each having ki ~ 0 parameters, i=I,... ,n. Then the programu0027s input is a k I-tuple E okl , where D is the domain of LISP lists. Ali:orithm 3.3.1 The phase works by an abstract interpretation of the subject program over a domain with two values for expressions, D = {Known, Unknown}. During this abstract interpretation, for every function a parameter description is maintained, telling for every parameter of the function whether it can be called with an unknown value. (Note that a parameter description may be considered an "abstract environment", associating with every parameter of a function an abstract value). Initially, all parameters except the goal functionu0027s are considered Known, and the parameter description for the goal function is the initial description given for the subject programu0027s input parameters. The abstract interpretation proceeds as follows: The body of the goal function is evaluated .~ u0027Â·I~........,lY the parameter description) to see which functions it may call, giving them Unknown oaranlett::r values. The parameter descriptions for these functions are modified. according to these tln(l111J~s to tell which of their paramete~ may be Unknown. Then the bodies ofthese: functions are evaluated using the new parameter descriptions to see which functions they in tum may call with Unknown parameter values and so on. Each time a parameter description of a fupction b~ , the "most known" description. Noticethat thel~ast upper bound 01 u 02 of any two descriptions 01,02 E Descr exists, and is the tn0st known description safely approximating 01 as well as 02.</abstract></paper>
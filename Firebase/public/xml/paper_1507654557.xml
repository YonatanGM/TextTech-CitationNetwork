<paper id="1507654557"><title>Intraprocedural static slicing of binary executables</title><year>1997</year><authors><author org="" id="2421780944">C. Cifuentes</author><author org="" id="1952738996">A. Fraboulet</author></authors><n_citation>103</n_citation><doc_type>Conference</doc_type><references><reference>195955250</reference><reference>1506151672</reference><reference>1575308494</reference><reference>1578833516</reference><reference>1990220002</reference><reference>2006471246</reference><reference>2019747336</reference><reference>2020841721</reference><reference>2040183246</reference><reference>2050464392</reference><reference>2073971651</reference><reference>2078882461</reference><reference>2111379929</reference><reference>2134312016</reference><reference>2141109493</reference><reference>2144344516</reference><reference>2149216329</reference><reference>2293624369</reference><reference>2339669378</reference></references><venue id="1160919455" type="C">International Conference on Software Maintenance</venue><doi>10.1109/ICSM.1997.624245</doi><keywords><keyword weight="0.6644">Program slicing</keyword><keyword weight="0.46078">Programming language</keyword><keyword weight="0.44352">Computer science</keyword><keyword weight="0.54722">Binary code</keyword><keyword weight="0.44914">Parallel computing</keyword><keyword weight="0.54468">Static analysis</keyword><keyword weight="0.55697">Debug code</keyword><keyword weight="0.53809">Assembly language</keyword><keyword weight="0.56602">Machine code</keyword><keyword weight="0.51862">Debugging</keyword><keyword weight="0.55209">Executable</keyword></keywords><publisher>IEEE</publisher><abstract>Program slicing is a technique for determining the set of statements of a program that potentially affect the value of a variable at some point in the program. Intra and interprocedural slicing of high level languages has greatly been studied in the literature; both static and dynamic techniques have been used to aid in the debugging, maintenance, parallelization, program integration, and dataflow testing of programs. We explain how to apply conventional intraprocedural static analysis to binary executables for the purposes of static analysis of machine code and assembly code, such as debugging code and determining the instructions that affect an indexed jump or an indirect call on a register. This analysis is useful in the decoding of machine instructions phase of reverse engineering tools of binary executables, such as binary translators, disassemblers, binary profilers and binary debuggers</abstract></paper>
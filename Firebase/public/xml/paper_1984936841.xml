<paper id="1984936841"><title>Property specification patterns for finite-state verification</title><year>1998</year><authors><author org="Kansas State University, Department of Computing and Information Sciences, 234 Nichols Hall Manhattan, KS" id="2156583880">Matthew B. Dwyer</author><author org="University of Massachusetts, Department of Mathematics and Statistics, Box 34515, Amherst, MA" id="11791032">George S. Avrunin</author><author org="University of Hawai'i, Department of Information and Computer Science, Honolulu, HI" id="2129313003">James C. Corbett</author></authors><n_citation>357</n_citation><doc_type>Conference</doc_type><references><reference>1971107784</reference><reference>2018118431</reference><reference>2039549168</reference><reference>2041539540</reference><reference>2045603331</reference><reference>2047375390</reference><reference>2050707981</reference><reference>2070726469</reference><reference>2105180288</reference><reference>2117189826</reference><reference>2129058735</reference><reference>2132334337</reference><reference>2151056896</reference></references><venue id="2626205625" type="C">Formal Methods in Software Practice</venue><doi>10.1145/298595.298598</doi><keywords><keyword weight="0.58232">Functional verification</keyword><keyword weight="0.53774">Model checking</keyword><keyword weight="0.43475">Systems engineering</keyword><keyword weight="0.4555">Software engineering</keyword><keyword weight="0.44681">Reuse</keyword><keyword weight="0.57934">Intelligent verification</keyword><keyword weight="0.45693">Computer science</keyword><keyword weight="0.60003">Runtime verification</keyword><keyword weight="0.59689">Formal specification</keyword><keyword weight="0.57309">Formal methods</keyword><keyword weight="0.58309">Formal verification</keyword></keywords><publisher>ACM</publisher><abstract>Finite-state verification (e.g., model checking) provides a powerful means to detect errors that are often subtle and difficult to reproduce. Nevertheless, the transition of this technology from research to practice has been slow. While there are a number of potential causes for reluctance in adopting such formal methods in practice, we believe that a primary cause rests with the fact that practitioners are unfamiliar with specification processes, notations, and strategies. Recent years have seen growing success in leveraging experience with design and coding patterns. We propose a pattern-based approach to the presentation, codification and reuse of property specifications for finite-state verification.</abstract></paper>
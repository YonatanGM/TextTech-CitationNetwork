<paper id="1948645994"><title>Constraint-centered descriptions for automated tool invocation</title><year>1994</year><authors><author org="Dept. of Comput. Sci., Tokyo Eng. Univ., Japan" id="2642962455">K. Tominaga</author><author org="" id="2973518300">T. Tokuda</author></authors><n_citation>4</n_citation><doc_type>Conference</doc_type><references><reference>1964071625</reference><reference>1995206801</reference><reference>2029068974</reference><reference>2045870649</reference><reference>2078404830</reference><reference>2148238464</reference><reference>2169553887</reference><reference>2172210473</reference><reference>2207799946</reference></references><venue id="1134663949" type="C">Asia-Pacific Software Engineering Conference</venue><doi>10.1109/APSEC.1994.465270</doi><keywords><keyword weight="0.47431">Rule-based machine translation</keyword><keyword weight="0.48023">Programming language</keyword><keyword weight="0.45219">Systems engineering</keyword><keyword weight="0.42358">Invocation</keyword><keyword weight="0.0">Development environment</keyword><keyword weight="0.46884">Computer science</keyword><keyword weight="0.58992">Formal specification</keyword><keyword weight="0.5387">Software</keyword><keyword weight="0.59599">Software development process</keyword></keywords><publisher>IEEE</publisher><abstract>One dominant approach to automate tool invocation in software development environments (SDEs) is to describe software development processes (SDPs) in terms of when and how to invoke tools. However, this causes difficulties in writing and understanding such descriptions. In contrast to this traditional approach (we refer to such descriptions as activity-centered descriptions), it is possible to describe constraints among software objects as specifications of SDPs that express what constraints to maintain. We refer to these descriptions as constraint-centered descriptions. This paper shows that constraint-centered descriptions are easier for designers to write and help users to understand specifications of SDPs, and that imperative constraint grammars are suitable to express constraint-centered specifications of SDPs. u003e</abstract></paper>
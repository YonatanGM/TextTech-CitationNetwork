<paper id="1599062482"><title>Type-Safe Delegation for Dynamic Component Adaptation</title><year>1998</year><authors><author org="&quot;University of Bonn&quot;" id="729669163">Günter Kniesel</author></authors><n_citation>17</n_citation><doc_type>Conference</doc_type><references><reference>1533109738</reference><reference>1535444145</reference><reference>1544633123</reference><reference>1637758212</reference><reference>1644882639</reference><reference>1861608991</reference><reference>1879619902</reference><reference>1977475024</reference><reference>1992050254</reference><reference>1995549062</reference><reference>2021400450</reference><reference>2022144522</reference><reference>2045723688</reference><reference>2099897048</reference><reference>2132055297</reference><reference>2141293928</reference><reference>2167500728</reference></references><venue id="1177184315" type="C">European Conference on Object-Oriented Programming</venue><doi>10.1007/3-540-49255-0_24</doi><keywords><keyword weight="0.46309">Programming language</keyword><keyword weight="0.59408">Compile time</keyword><keyword weight="0.46465">Computer science</keyword><keyword weight="0.66089">Common Component Architecture</keyword><keyword weight="0.58106">Interoperation</keyword><keyword weight="0.0">Component adaptation</keyword><keyword weight="0.64478">Component (UML)</keyword><keyword weight="0.58188">Link time</keyword><keyword weight="0.61523">Component-based software engineering</keyword><keyword weight="0.51147">Delegation</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The aim of component technology is the replacement of large monolithic applications with sets of smaller components whose particular functionality and interoperation can be adapted to users’ needs. However, the adaptation mechanisms of component software are still limited. Current proposals concentrate on adaptations that can be achieved either at compile time or at link time ([1], [2]). There is no support for dynamic component adaptation, i.e. unanticipated, incremental modifications of a component system at run-time. This is especially regrettable since systems that must always be operational would profit most from the ability to be structured into small interchangeable components that could evolve independently and whose functionality could be adapted dynamically.</abstract></paper>
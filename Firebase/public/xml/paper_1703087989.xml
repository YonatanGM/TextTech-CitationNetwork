<paper id="1703087989"><title>Type inference with subtypes</title><year>1990</year><authors><author org="State University Of New York at Stony Brook, Stony Brook" id="2645040543">You-Chin Fuh</author><author org="State University Of New York at Stony Brook, Stony Brook" id="2171597218">Prateek Mishra</author></authors><n_citation>134</n_citation><doc_type>Conference</doc_type><references><reference>1519382205</reference><reference>1549804464</reference><reference>1874450173</reference><reference>1969093922</reference><reference>2001507716</reference><reference>2017720469</reference><reference>2032851831</reference><reference>2056253254</reference><reference>2113722134</reference><reference>2121038016</reference><reference>2133472914</reference><reference>2143645692</reference><reference>2163976959</reference><reference>2173184982</reference></references><venue id="1136861413" type="C">European Symposium on Programming</venue><doi>10.1016/0304-3975(90)90144-7</doi><keywords><keyword weight="0.45002">Discrete mathematics</keyword><keyword weight="0.4351">Computer science</keyword><keyword weight="0.53974">Unification</keyword><keyword weight="0.71499">Principal type</keyword><keyword weight="0.46015">Theoretical computer science</keyword><keyword weight="0.64403">Type inference</keyword><keyword weight="0.64623">Recursive data type</keyword><keyword weight="0.50209">Completeness (statistics)</keyword><keyword weight="0.45721">Syntax</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We extend polymorphic type inference to include subtypes. This paper describes the following :[13],"prove the existence of (i) principal type property and (ii) syntactic completeness of the type checker, for type inference with subtypes. This result is developed with only minimal assumptions on the underlying theory of :[48],"a particular “structured” theory of subtypes, those engendered by coercions between type constants only, we :[13],"prove that principal types are compactly expressible. This suggests that :[48],"a practical type checker for the structured theory of subtypes is :[85],"develop efficient algorithms for such :[48],"a type checker. There are two main algorithms: MATCH and CONSISTENT. The first can be thought of as an extension to the unification algorithm. The second, which has no analogue in conventional type inference, determines whether :[48],"a set of coercions is consistent.</abstract></paper>
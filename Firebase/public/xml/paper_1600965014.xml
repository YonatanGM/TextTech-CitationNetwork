<paper id="1600965014"><title>Using programmer-written compiler extensions to catch security holes</title><year>2002</year><authors><author org="Comput. Syst. Lab., Stanford Univ., CA, USA#TAB#" id="2132149452">K. Ashcraft</author><author org="Comput. Syst. Lab., Stanford Univ., CA, USA#TAB#" id="2163716051">D. Engler</author></authors><n_citation>204</n_citation><doc_type>Conference</doc_type><references><reference>1551571370</reference><reference>1579850852</reference><reference>1972544179</reference><reference>1998070736</reference><reference>2039906702</reference><reference>2044590882</reference><reference>2066859698</reference><reference>2084974764</reference><reference>2120138937</reference><reference>2123886726</reference><reference>2129380858</reference><reference>2136296832</reference><reference>2137952932</reference><reference>2169476734</reference></references><venue id="1163618098" type="C">IEEE Symposium on Security and Privacy</venue><doi>10.1109/SECPRI.2002.1004368</doi><keywords><keyword weight="0.44072">Kernel (linear algebra)</keyword><keyword weight="0.51005">Pointer (computer programming)</keyword><keyword weight="0.46554">Programming language</keyword><keyword weight="0.49183">Programmer</keyword><keyword weight="0.43547">Computer security</keyword><keyword weight="0.45617">Computer science</keyword><keyword weight="0.43055">System testing</keyword><keyword weight="0.48419">Static analysis</keyword><keyword weight="0.45199">Systems analysis</keyword><keyword weight="0.55833">Compiler</keyword><keyword weight="0.48536">Metacompilation</keyword><keyword weight="0.44734">Operating system</keyword></keywords><publisher>IEEE Computer Society</publisher><abstract>This paper shows how system-specific static analysis can find security errors that violate rules such as "integers from untrusted sources must be sanitized before use" and "do not dereference user-supplied pointers." In our approach, programmers write system-specific extensions that are linked into the compiler and check their code for errors. We demonstrate the approachu0027s effectiveness by using it to find over 100 security errors in Linux and OpenBSD, over 50 of which have led to kernel patches. An unusual feature of our approach is the use of methods to automatically detect when we miss code actions that should be checked.</abstract></paper>
<paper id="1683919907"><title>Hardware Synthesis from Term Rewriting Systems</title><year>1999</year><authors><author org="massachusetts institute of technology" id="2123860042">James C. Hoe</author><author org="massachusetts institute of technology" id="253507310">Arvind</author></authors><n_citation>75</n_citation><doc_type>Journal</doc_type><references><reference>1583295953</reference><reference>1608252846</reference><reference>1857327297</reference><reference>2012429438</reference><reference>2015688007</reference><reference>2054918342</reference><reference>2093916942</reference><reference>2106398879</reference><reference>2134441275</reference><reference>2137149639</reference><reference>2150405043</reference><reference>2611515161</reference></references><venue id="37538908" type="J">IEEE Transactions on Very Large Scale Integration Systems</venue><doi>10.1007/978-0-387-35498-9_52</doi><keywords><keyword weight="0.47041">Programming language</keyword><keyword weight="0.48406">Nondeterministic algorithm</keyword><keyword weight="0.45185">Computer science</keyword><keyword weight="0.55802">High-level synthesis</keyword><keyword weight="0.49199">Correctness</keyword><keyword weight="0.52809">Field-programmable gate array</keyword><keyword weight="0.52706">Compiler</keyword><keyword weight="0.5126">Rewriting</keyword><keyword weight="0.56736">Verilog</keyword><keyword weight="0.51144">Debugging</keyword></keywords><publisher>Kluwer, B.V.</publisher><abstract>Term Rewriting System (TRS) is a good formalism for describing concurrent systems that embody asynchronous and nondeterministic behavior in their specifications. Elsewhere, we have used TRS’s to describe speculative micro-architectures and complex cache-coherence protocols, and proven the correctness of these systems. In this paper, we describe the compilation of TRS’s into a subset of Verilog that can be simulated and synthesized using commercial tools. TRAC, Term Rewriting Architecture Compiler, enables a new hardware development framework that can match the ease of today’s software programming environment. TRAC reduces the time and effort in developing and debugging hardware. For several examples, we compare TRAC-generated RTL’s with hand-coded RTL’s after they are both compiled for Field Programmable Gate Arrays by Xilinx tools. The circuits generated from TRS are competitive with those described using Verilog RTL, especially for larger designs.</abstract></paper>
<paper id="1585522101"><title>Optimal On-Line Algorithms for Single-Machine Scheduling</title><year>1996</year><authors><author org="Eindhoven University of Technology" id="2108827927">Han Hoogeveen</author><author org="Eindhoven University of Technology" id="259364132">Arjen P. A. Vestjens</author></authors><n_citation>107</n_citation><doc_type>Conference</doc_type><references><reference>1996869102</reference></references><venue id="1184093072" type="C">Integer Programming and Combinatorial Optimization</venue><doi>10.1007/3-540-61310-2_30</doi><keywords><keyword weight="0.44774">Mathematical optimization</keyword><keyword weight="0.56857">Single-machine scheduling</keyword><keyword weight="0.57917">Multiprocessor scheduling</keyword><keyword weight="0.4393">Computer science</keyword><keyword weight="0.59625">Flow shop scheduling</keyword><keyword weight="0.42937">Algorithm</keyword><keyword weight="0.56858">Open-shop scheduling</keyword><keyword weight="0.59176">Least slack time scheduling</keyword><keyword weight="0.57712">Rate-monotonic scheduling</keyword><keyword weight="0.55579">Dynamic priority scheduling</keyword><keyword weight="0.55824">Earliest deadline first scheduling</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We consider single-machine on-line scheduling problems where jobs arrive over time. A set of independent jobs has to be scheduled on the machine, where preemption is not allowed and the number of jobs is unknown in advance. Each job becomes available at its release date, which is not known in advance, and its characteristics, e.g., processing requirement, become known at its arrival. We deal with two problems: minimizing total completion time and minimizing the maximum time by which all jobs have been delivered. For both problems we propose and analyze an on-line algorithm based on the following idea: As soon as the machine becomes available for processing, choose an available job with highest priority, and schedule it if its processing requirement is not too large. Otherwise, postpone the start of this job for a while. We prove that our algorithms have performance bound 2 and (âˆš5 + 1)/2, respectively, and we show that for both problems there cannot exist an on-line algorithm with a better performance guarantee.</abstract></paper>
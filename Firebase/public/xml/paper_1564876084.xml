<paper id="1564876084"><title>Bipartite Graph Matchings in the Semi-streaming Model</title><year>2009</year><authors><author org="Christian-Albrechts-Universität, Kiel," id="2144584424">Sebastian Eggert</author><author org="Christian-Albrechts-Universität, Kiel," id="2158768683">Lasse Kliemann</author><author org="Christian-Albrechts-Universität, Kiel," id="2137613117">Anand Srivastav</author></authors><n_citation>24</n_citation><doc_type>Conference</doc_type><references><reference>1494735819</reference><reference>1514707655</reference><reference>1965972569</reference><reference>2157529519</reference><reference>2165753192</reference></references><venue id="1154039276" type="C">European Symposium on Algorithms</venue><doi>10.1007/978-3-642-04128-0_44</doi><keywords><keyword weight="0.52301">Complete bipartite graph</keyword><keyword weight="0.443">Discrete mathematics</keyword><keyword weight="0.44833">Combinatorics</keyword><keyword weight="0.52137">Edge-transitive graph</keyword><keyword weight="0.66303">Bipartite graph</keyword><keyword weight="0.63201">Hopcroft–Karp algorithm</keyword><keyword weight="0.67956">Graph bandwidth</keyword><keyword weight="0.62792">Clique-width</keyword><keyword weight="0.52554">Factor-critical graph</keyword><keyword weight="0.51765">Voltage graph</keyword><keyword weight="0.37568">Mathematics</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We present an algorithm for finding a large matching in a bipartite graph in the semi-streaming model. In this model, the input graph G = (V, E) is represented as a stream of its edges in some arbitrary order, and storage of the algorithm is bounded by O(n , polylog n) bits, where n = |V|. For eu003e 0, our algorithm finds a \(\frac{1}{1+\epsilon}\)-approximation of a maximum-cardinality matching and uses \(O{({(\frac{1}{\epsilon})^8})}\) passes over the input stream. The only previously known algorithm with such arbitrarily good approximation – though for general graphs – required exponentially many \(\Omega({{(\frac{1}{\epsilon})^{\frac{1}{\epsilon}}}})\) passes (McGregor 2005).</abstract></paper>
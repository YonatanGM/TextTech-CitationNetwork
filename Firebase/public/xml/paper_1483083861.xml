<paper id="1483083861"><title>Fair serializability of iterated transactions using FIFO-nets</title><year>1985</year><authors><author org="Université de Paris — Sud" id="1981214481">Marie-Paule Flé</author><author org="Université de Paris — Sud" id="1964539235">Gérard Roucairol</author></authors><n_citation>11</n_citation><doc_type>Conference</doc_type><references><reference>1553088758</reference><reference>1970637218</reference><reference>1990300406</reference><reference>1991199257</reference><reference>2009998184</reference><reference>2094159214</reference><reference>2100122922</reference><reference>2106001218</reference></references><venue id="1204434967" type="C">Applications and Theory of Petri Nets</venue><doi>10.1007/3-540-15204-0_10</doi><keywords><keyword weight="0.69108">Serializability</keyword><keyword weight="0.46343">FIFO (computing and electronics)</keyword><keyword weight="0.51229">Concurrency</keyword><keyword weight="0.44285">Computer science</keyword><keyword weight="0.67268">Two-phase locking</keyword><keyword weight="0.56744">Database transaction</keyword><keyword weight="0.44085">Iterated function</keyword><keyword weight="0.43879">Distributed computing</keyword><keyword weight="0.45683">Bounded function</keyword><keyword weight="0.57513">Dining philosophers problem</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The serializability condition is usually considered in order to maintain the consistency of a Database in the presence of conflicting accesses to the Database performed by concurrent transactions. The transactions considered in this paper may be infinitely often repeated and a synchronization algorithm is proposed which controls the serializability condition for such transactions. This algorithm, based upon the use of FIFO-Nets, provides the maximal amount of parallelism among the transactions and guaranties fairness, i.e., every transaction is actually performed infinitely often. As an application, the synchronization algorithm is shown to give also a fair solution to the classical dining philosophers problem. The size of the memory needed by the algorithm cannot be bounded, however a particular case is pointed out for which memory boundedness can be achieved. This particular case covers the problem of updating multiple copies of a Database.</abstract></paper>
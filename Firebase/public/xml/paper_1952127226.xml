<paper id="1952127226"><title>Fast Monte-Carlo algorithms for finding low-rank approximations</title><year>1998</year><authors><author org="Dept. of Math. Sci., Carnegie Mellon Univ., Pittsburgh, PA, USA#TAB#" id="2036959358">A. Frieze</author><author org="" id="2187777059">R. Kannan</author><author org="" id="2045140648">S. Vempala</author></authors><n_citation>61</n_citation><doc_type>Conference</doc_type><references><reference>1960897633</reference><reference>2065060195</reference><reference>2072773380</reference><reference>2072858942</reference><reference>2083580384</reference><reference>2138621811</reference><reference>2147152072</reference><reference>2156397150</reference></references><venue id="1150208541" type="C">Foundations of Computer Science</venue><doi>10.1109/SFCS.1998.743487</doi><keywords><keyword weight="0.42664">Discrete mathematics</keyword><keyword weight="0.45882">Singular value decomposition</keyword><keyword weight="0.42126">Monte Carlo method</keyword><keyword weight="0.42926">Combinatorics</keyword><keyword weight="0.4513">Polynomial</keyword><keyword weight="0.45259">Matrix (mathematics)</keyword><keyword weight="0.44399">Matrix decomposition</keyword><keyword weight="0.38265">Algorithm</keyword><keyword weight="0.44066">Probability distribution</keyword><keyword weight="0.40606">Numerical analysis</keyword><keyword weight="0.39434">Mathematics</keyword></keywords><publisher>IEEE Computer Society</publisher><abstract>In several applications, the data consists of an m/spl times/n matrix A and it is of interest to find an approximation D of a specified rank k to A where, k is much smaller than m and n. Traditional methods like the Singular Value Decomposition (SVD) help us find the "best" such approximation. However, these methods take time polynomial in m, n which is often too prohibitive. In this paper, we develop an algorithm which is qualitatively faster provided we may sample the entries of the matrix according to a natural probability distribution. Indeed, in the applications such sampling is possible. Our main result is that we can find the description of a matrix D* of rank at most k so that /spl par/A-D*/spl par//sub F//spl les/min/D,rank(D)/spl les/k/spl par/A-D/spl par//sub F/+/spl epsiv//spl par/A/spl par//sub F/ holds with probability at least 1-/spl delta/. (For any matrix M, /spl par/M/spl par//sub F//sup 2/ denotes the sum of the squares of all the entries of M.) The algorithm takes time polynomial in k, 1//spl epsiv/, log(1//spl delta/) only, independent of m, n.</abstract></paper>
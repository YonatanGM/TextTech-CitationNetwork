<paper id="1978840985"><title>Sequential algorithms on concrete data structures</title><year>1982</year><authors><author org="Centre de Mathématiques Appliquées, Ecole des Mines—Sophia-Antipolis, 06560 Valbonne, France" id="2431982862">G. Berry</author><author org="Centre de Mathématiques Appliquées, Ecole des Mines—Sophia-Antipolis, 06560 Valbonne, France" id="2020154163">Pierre-Louis Curien</author></authors><n_citation>172</n_citation><doc_type>Journal</doc_type><references><reference>1530168704</reference><reference>1535347731</reference><reference>1991052229</reference><reference>1999005577</reference><reference>2003342148</reference><reference>2007270285</reference><reference>2025170645</reference><reference>2039112578</reference><reference>2080801189</reference><reference>2115558830</reference><reference>2134326845</reference><reference>2169274368</reference><reference>2184268586</reference></references><venue id="90727058" type="J">Theoretical Computer Science</venue><doi>10.1016/S0304-3975(82)80002-9</doi><keywords><keyword weight="0.46738">Programming language</keyword><keyword weight="0.45525">Computer science</keyword><keyword weight="0.49521">Representation theorem</keyword><keyword weight="0.46958">Theoretical computer science</keyword><keyword weight="0.6544">Sequential algorithm</keyword><keyword weight="0.50932">Recursion</keyword><keyword weight="0.57556">Applicative programming language</keyword><keyword weight="0.46321">Computation</keyword><keyword weight="0.44382">Discrete mathematics</keyword><keyword weight="0.54882">Data structure</keyword><keyword weight="0.43367">Combinatorics</keyword><keyword weight="0.61957">Denotational semantics</keyword><keyword weight="0.46185">Algorithm</keyword><keyword weight="0.52083">Cartesian closed category</keyword></keywords><publisher>Elsevier</publisher><abstract>Abstract We provide a sequential denotational semantics for sequential programming languages, based on a new notion of sequential algorithm on the Kahn-Plotkin concrete data structures. Intuitively an algorithm may be seen either as a concrete object—a “program” in a simple output-driven language — or as an abstract object — the pair of a sequential function and of a computation strategy for it. The concrete and abstract presentations are equivalent, as shown by a representation theorem. The algorithms form a cartesian closed category with straightforward solutions to recursive domain equations. Hence they may replace functions in the denotational semantics of any sequential language. An applicative programming language based on sequential algorithms is presented in a companion paper.</abstract></paper>
<paper id="1500323626"><title>On Job Scheduling for HPC-Clusters and the dynP Scheduler</title><year>2001</year><authors><author org="PC2 Paderborn Center for Parallel Computing" id="2108019135">Achim Streit</author></authors><n_citation>23</n_citation><doc_type>Conference</doc_type><references><reference>29188640</reference><reference>1487076132</reference><reference>1498641465</reference><reference>1573602196</reference><reference>1596277129</reference><reference>1596620545</reference><reference>1844855064</reference><reference>2112168774</reference><reference>2117170988</reference><reference>2141776350</reference><reference>2150074609</reference><reference>2160544331</reference></references><venue id="1153382799" type="C">IEEE International Conference on High Performance Computing, Data, and Analytics</venue><doi>10.1007/3-540-45307-5_6</doi><keywords><keyword weight="0.45234">Resource management</keyword><keyword weight="0.42784">Workload</keyword><keyword weight="0.43913">Computer science</keyword><keyword weight="0.55816">Scheduling (computing)</keyword><keyword weight="0.4429">Parallel computing</keyword><keyword weight="0.45053">Usability</keyword><keyword weight="0.46367">Queue</keyword><keyword weight="0.43426">Software</keyword><keyword weight="0.45407">Resource Management System</keyword><keyword weight="0.56404">Job scheduler</keyword><keyword weight="0.44568">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Efficient job-scheduling strategies are important to improve the performance and usability of HPC-clusters. In this paper we evaluate job-scheduling strategies (FCFS, SJF, and LJF) used in the resource management system CCS (Computing Center Software). As input for our simulations we use two job sets that are generated from trace files of CCS.Based on the evaluation we introduce the dynP scheduler which combines the three scheduling strategies and dynamically changes between them online. The average estimated runtime of jobs in the waiting queue and two bounds are used as the criterion whether or not dynP switches to a new policy. Obviously the performance of dynP depends on the setting of the two bounds. Diverse parameter pairs were evaluated, and with the proper setting dynP achieves an equal or even better (+9%) performance.</abstract></paper>
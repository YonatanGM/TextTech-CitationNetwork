<paper id="1968347165"><title>Cryptographic support for fault-tolerant distributed computing</title><year>1996</year><authors><author org="Cornell University,Ithaca, New York" id="1989144893">Yaron Minsky</author><author org="Cornell University,Ithaca, New York" id="2109217526">Robbert van Renesse</author><author org="Cornell University,Ithaca, New York" id="2106636992">Fred B. Schneider</author><author org="Cornell University,Ithaca, New York" id="2091641100">Scott D. Stoller</author></authors><n_citation>80</n_citation><doc_type>Conference</doc_type><references><reference>2006699751</reference><reference>2060189343</reference><reference>2120510885</reference><reference>2133948077</reference></references><venue id="2625581541" type="C">ACM SIGOPS European Workshop</venue><doi>10.1145/504450.504472</doi><keywords><keyword weight="0.45438">Wireless network</keyword><keyword weight="0.4801">Spoofing attack</keyword><keyword weight="0.45666">Voting</keyword><keyword weight="0.46649">Cryptography</keyword><keyword weight="0.44877">Computer security</keyword><keyword weight="0.43644">Computer science</keyword><keyword weight="0.45673">Correctness</keyword><keyword weight="0.41589">Real-time computing</keyword><keyword weight="0.49144">Fault tolerance</keyword><keyword weight="0.40067">Technical report</keyword><keyword weight="0.45922">The Internet</keyword><keyword weight="0.43868">Distributed computing</keyword></keywords><publisher>ACM</publisher><abstract>Mobile processes, or agents, have been proposed for a variety of applications in the Internet and other large distributed systems. But little work has been directed at operating-system support for agents. This paper discusses one aspect of the problem---implementing fault-tolerance without specialized hardware.In traditional client-server settings, a central and trusted host may send all messages and receive all replies, thereby implementing a star-shaped communications pattern. In contrast, an agent can execute autonomously at a succession of remote sites without returning to the host that launched it. Thus, computations structured using agents may consume less network-bandwidth in performing tasks that involve multiple hosts. Moreover, for some settings, it is unrealistic to presume the existence of a central host that remains connected to the network---mobile computing and wireless networks are obvious examples.In an open distributed system, agents comprising an application must not only survive (possibly malicious) failures of the hosts they visit, but they must also be resilient to the potentially hostile actions of other hosts. Correctness of a computation should depend only on hosts that would be visited in a failure-free run. We assume that faulty hosts produce erroneous messages, that they can masquerade as other faulty hosts, but that they cannot assume the identities and do not have access to secrets of non-faulty hosts.Replication and voting are necessary to survive malicious behavior by visited hosts. However, faulty hosts that are not visited by agents can confound a naive replica-management scheme by spoofing. With this in mind, we have been investigating protocols for replication and voting in a family of applications. Our protocols use cryptographic techniques in novel ways. Furthermore, our experiments reveal that fast (correct) hosts can mask delays caused by slow ones, so replication actually speeds up some applications.Section 2 characterizes the family of applications treated in this paper. Section 3 describes experiments we ran to explore performance implications of replication and voting in this setting. The role of cryptographic techniques in our protocols is discussed in section 4. Section 5 contains our conclusions.</abstract></paper>
<paper id="1982731949"><title>Class modification in the GemStone object-oriented DBMS</title><year>1987</year><authors><author org="Servio Logic Corporation" id="2062524087">D. Jason Penney</author><author org="Servio Logic Corporation" id="2123103677">Jacob Stein</author></authors><n_citation>182</n_citation><doc_type>Conference</doc_type><references><reference>290484484</reference><reference>1603379605</reference><reference>1669847836</reference><reference>1770006921</reference><reference>2036862988</reference><reference>2095436501</reference><reference>2215315499</reference></references><venue id="1138732554" type="C">Conference on Object-Oriented Programming Systems, Languages, and Applications</venue><doi>10.1145/38807.38817</doi><keywords><keyword weight="0.0">Object oriented dbms</keyword><keyword weight="0.46669">Programming language</keyword><keyword weight="0.52094">Concurrency</keyword><keyword weight="0.46434">Computer science</keyword><keyword weight="0.0">Authorization</keyword><keyword weight="0.40989">Invariant (mathematics)</keyword><keyword weight="0.36746">Gemstone</keyword><keyword weight="0.49526">Schema evolution</keyword></keywords><publisher>ACM</publisher><abstract>We are currently designing a class modification methodology for GemStone. We describe the current status of the design. We choose from two basic approaches and then introduce those aspects of GemStone necessary for an understanding of the paper. After defining a set of invariants for GemStone databases, we discuss specific class modification operations in terms of maintaining these invariants. We next discuss several issues that impact class modification. These issues include concurrency and authorization, and lead to difficult choices.</abstract></paper>
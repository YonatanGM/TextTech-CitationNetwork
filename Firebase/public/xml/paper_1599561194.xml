<paper id="1599561194"><title>A relational framework for abstract interpretation</title><year>1985</year><authors><author org="Computer Laboratory" id="163000670">Alan Mycroft</author><author org="DIKU" id="2116419005">Neil D. Jones</author></authors><n_citation>50</n_citation><doc_type /><references><reference>326743114</reference><reference>1512248102</reference><reference>2020530016</reference><reference>2043100293</reference><reference>2141956765</reference><reference>2163976959</reference><reference>2166822586</reference><reference>2913201099</reference></references><venue id="" type="">Programs as Data Objects, Proceedings of a Workshop</venue><doi>10.1007/3-540-16446-4_9</doi><keywords><keyword weight="0.42265">Discrete mathematics</keyword><keyword weight="0.0">Logical relations</keyword><keyword weight="0.50414">Relational theory</keyword><keyword weight="0.46113">Power domains</keyword><keyword weight="0.5418">Abstract interpretation</keyword><keyword weight="0.53731">Logical disjunction</keyword><keyword weight="0.60178">Metalanguage</keyword><keyword weight="0.45718">Calculus</keyword><keyword weight="0.40847">Mathematics</keyword><keyword weight="0.52606">Special case</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Abstract interpretation is a very general framework for proving certain properties of programs. This is done by interpreting the symbols of the program, or the symbols of a denotational metalanguage translation, in two different ways (the standard interpretation and the abstract interpretation) and relating them. We set up a new framework for abstract interpretation based on relations (with the intent of inclusive or logical relations). This avoids problems with power domains and enables certain higher-order frameworks to be proved correct. As an example we show how the Hindley/Milner type system can be viewed as a special case of our system and is thus automatically correct.</abstract></paper>
<paper id="1502882819"><title>Rendering Trees from Precomputed Z-Buffer Views</title><year>1995</year><authors><author org="UniversityÂ of California" id="2189376613">Nelson L. Max</author><author org="Hokkaido Industrial Research Inst" id="2575519648">Keiichi Ohsaki</author></authors><n_citation>79</n_citation><doc_type /><references><reference>57931636</reference><reference>2040475466</reference><reference>2060134923</reference><reference>2067166017</reference><reference>2098362450</reference><reference>2137212317</reference><reference>2138695171</reference><reference>2155196493</reference><reference>2156067784</reference></references><venue id="" type="">Rendering Techniques</venue><doi>10.1007/978-3-7091-9430-0_8</doi><keywords><keyword weight="0.50214">Shadow</keyword><keyword weight="0.44518">Computer vision</keyword><keyword weight="0.44545">Computer graphics (images)</keyword><keyword weight="0.48297">Marching cubes</keyword><keyword weight="0.0">Artificial intelligence</keyword><keyword weight="0.44826">Animation</keyword><keyword weight="0.49822">Pixel</keyword><keyword weight="0.53294">Parallel projection</keyword><keyword weight="0.59375">Rendering (computer graphics)</keyword><keyword weight="0.0">Light source</keyword><keyword weight="0.37463">Mathematics</keyword><keyword weight="0.45629">Unit sphere</keyword></keywords><publisher>Springer, Vienna</publisher><abstract>Parallel projection z-buffer images are precomputed for a number of preset viewing directions on the unit sphere. Using the depth information, we can reconstruct a 3-D point from each image pixel. Then parallel or perspective views can be found from any other viewpoint by rotating the 3-D points from the nearest three or four precomputed views into the proper position and projecting them onto an output z-buffer. A temporary z-buffer image, constructed in the same way for a viewpoint at the light source, is used for a z-buffer shadow algorithm. The rendering algorithm is applied to broad leaf and needle leaf trees, and tested in animation. Our rendering algorithm is similar to that in Chen and Williams [1], with differences listed below.</abstract></paper>
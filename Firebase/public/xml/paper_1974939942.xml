<paper id="1974939942"><title>A unified treatment of flow analysis in higher-order languages</title><year>1995</year><authors><author org="Computer Science Division, NEC Research Institute, Princeton, NJ" id="2141982898">Suresh Jagannathan</author><author org="Dept. of Computer Science, Carnegie Mellon University, Pittsburgh, PA#TAB#" id="2232955512">Stephen Weeks</author></authors><n_citation>84</n_citation><doc_type>Conference</doc_type><references><reference>1580664042</reference><reference>1829244603</reference><reference>1967544098</reference><reference>1974895492</reference><reference>2021986357</reference><reference>2027065256</reference><reference>2034918983</reference><reference>2043100293</reference><reference>2047896115</reference><reference>2057065238</reference><reference>2063337452</reference><reference>2068226560</reference><reference>2068711880</reference><reference>2088126145</reference><reference>2102389857</reference><reference>2165069483</reference></references><venue id="1160032607" type="C">Symposium on Principles of Programming Languages</venue><doi>10.1145/199448.199536</doi><keywords><keyword weight="0.50439">Parameterized complexity</keyword><keyword weight="0.46583">Programming language</keyword><keyword weight="0.45838">Computer science</keyword><keyword weight="0.48772">Constraint programming</keyword><keyword weight="0.51838">Denotational semantics</keyword><keyword weight="0.47176">Theoretical computer science</keyword><keyword weight="0.50294">Equivalence (measure theory)</keyword><keyword weight="0.61762">Control flow analysis</keyword><keyword weight="0.47305">Hierarchy</keyword><keyword weight="0.46482">Reactive system</keyword><keyword weight="0.53176">Data flow diagram</keyword></keywords><publisher>ACM</publisher><abstract>We describe a framework for flow analysis in higher-order languages. It is both a synthesis and extension of earlier work in this area, most notably [20, 22] The framework makes explicit use of flow graphs for modeling control and data flow properties of untyped higher-order programs. The framework is parameterized, and can express a hierarchy of analyses with different cost/accuracy tradeoffs. The framework is also amenable to a direct, efficient implementation. We develop several instantiations of the framework, and prove their running-time complexity. In addition, we use the simplest instantiation to demonstrate the equivalence of a 0CFA style analysis and the set-based analysis of [8].</abstract></paper>
<paper id="1825148885"><title>Experiments in Theorem Proving and Model Checking for Protocol Verification</title><year>1996</year><authors><author org="LITP" id="690502127">Klaus Havelund</author><author org="SRI, International#TAB#" id="2118526916">Natarajan Shankar</author></authors><n_citation>144</n_citation><doc_type>Conference</doc_type><references><reference>1538310240</reference><reference>1551246917</reference><reference>1551406732</reference><reference>1857327297</reference><reference>1978358700</reference><reference>1987073197</reference><reference>2000302396</reference><reference>2015688007</reference><reference>2039853888</reference><reference>2080593426</reference><reference>2113486906</reference></references><venue id="1169806927" type="C">Formal Methods</venue><doi>10.1007/3-540-60973-3_113</doi><keywords><keyword weight="0.6079">Model checking</keyword><keyword weight="0.0">Correctness proofs</keyword><keyword weight="0.45009">Computer science</keyword><keyword weight="0.60903">Automated theorem proving</keyword><keyword weight="0.6935">Automated proof checking</keyword><keyword weight="0.44981">Theoretical computer science</keyword><keyword weight="0.47913">Selection rule</keyword><keyword weight="0.0">Protocol verification</keyword><keyword weight="0.53355">Communications protocol</keyword><keyword weight="0.65163">Formal verification</keyword></keywords><publisher>Springer Berlin Heidelberg</publisher><abstract>Communication protocols pose interesting and difficult challenges for verification technologies. The state spaces of interesting protocols are either infinite or too large for finite-state verification techniques like model checking and state exploration. Theorem proving is also not effective since the formal correctness proofs of these protocols can be long and complicated. We describe a series of protocol verification experiments culminating in a methodology where theorem proving is used to abstract out the sources of unboundedness in the protocol to yield a skeletal protocol that can be verified using model checking.</abstract></paper>
<paper id="1752570863"><title>The Implementation of the Cell Tree: Design Alternatives and Performance Evaluation</title><year>1989</year><authors><author org="University of California" id="2119886675">Oliver Günther</author><author org="International Computer Science Institute" id="2116964878">Jeff A. Bilmes</author></authors><n_citation>14</n_citation><doc_type /><references><reference>1493533887</reference><reference>1499737821</reference><reference>1502859759</reference><reference>1543638299</reference><reference>1574294280</reference><reference>1967087829</reference><reference>1981233261</reference><reference>1987647724</reference><reference>1991383761</reference><reference>1994404414</reference><reference>1995358377</reference><reference>2066799613</reference><reference>2067089692</reference><reference>2072627547</reference><reference>2077480559</reference><reference>2108643052</reference><reference>2118269922</reference><reference>2129584210</reference><reference>2129978134</reference><reference>2131620262</reference><reference>2133486897</reference><reference>2149173084</reference><reference>2161694911</reference><reference>2901608006</reference></references><venue id="" type="">BTW</venue><doi>10.1007/978-3-642-74571-3_19</doi><keywords><keyword weight="0.44319">Computer science</keyword><keyword weight="0.52081">Polyhedron</keyword><keyword weight="0.45822">Regular polygon</keyword><keyword weight="0.45887">Theoretical computer science</keyword><keyword weight="0.72509">Tree structure</keyword><keyword weight="0.4391">Artificial intelligence</keyword><keyword weight="0.0">Data objects</keyword><keyword weight="0.47981">Hierarchy</keyword><keyword weight="0.51343">Auxiliary memory</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The cell tree is a new dynamic object-oriented index structure for geometric databases. All data objects in the database are represented as unions of convex point sets (cells). The cell tree is a balanced tree structure whose leafs contain the cells and whose interior nodes correspond to a hierarchy of nested convex polyhedra. This index structure allows quick access to the cells (and therefore to the data objects) that occupy a given location in space. Furthermore, the cell tree is designed for paged secondary memory to minimize the number of disk accesses occuring during a tree search. Point locations and range searches can therefore be carried out very efficiently using the cell tree. This paper reports our experiences with the implementation of the cell tree and presents the results of a performance evaluation.</abstract></paper>
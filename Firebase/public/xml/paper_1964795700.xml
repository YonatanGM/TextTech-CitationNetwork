<paper id="1964795700"><title>Pattern matching for clone and concept detection</title><year>1996</year><authors><author org="McGill Univ., Montre´al, P.Q., Canada" id="689229069">K. A. Kontogiannis</author><author org="McGill Univ., Montre´al, P.Q., Canada" id="1966621621">R. Demori</author><author org="McGill Univ., Montre´al, P.Q., Canada" id="2982806956">E. Merlo</author><author org="McGill Univ., Montre´al, P.Q., Canada" id="2629049756">M. Galler</author><author org="McGill Univ., Montre´al, P.Q., Canada" id="2277856917">M. Bernstein</author></authors><n_citation>229</n_citation><doc_type>Conference</doc_type><references><reference>1512285202</reference><reference>1966467209</reference><reference>1967794586</reference><reference>1973828066</reference><reference>1976886499</reference><reference>1991133427</reference><reference>1997953464</reference><reference>2006267758</reference><reference>2019912855</reference><reference>2033750216</reference><reference>2079814255</reference><reference>2096815466</reference><reference>2100591395</reference><reference>2101530234</reference><reference>2109943392</reference><reference>2110621571</reference><reference>2117821076</reference><reference>2121227244</reference><reference>2127836646</reference><reference>2147555693</reference></references><venue id="1166511975" type="C">Automated Software Engineering</venue><doi>10.1007/BF00126960</doi><keywords><keyword weight="0.44351">Duplicate code</keyword><keyword weight="0.42965">Software engineering</keyword><keyword weight="0.41247">Systems engineering</keyword><keyword weight="0.42554">Computer science</keyword><keyword weight="0.43007">Reverse engineering</keyword><keyword weight="0.5014">Software system</keyword><keyword weight="0.47629">Software metric</keyword><keyword weight="0.43697">Pattern matching</keyword><keyword weight="0.52678">Legacy system</keyword><keyword weight="0.52718">Business rule</keyword></keywords><publisher>Kluwer Academic Publishers</publisher><abstract>A legacy system is an operational, large-scale software system that is maintained beyond its first generation of programmers. It typically represents a massive economic investment and is critical to the mission of the organization it serves. As such systems age, they become increasingly complex and brittle, and hence harder to maintain. They also become even more critical to the survival of their organization because the business rules encoded within the system are seldom documented elsewhere.</abstract></paper>
<paper id="1897593416"><title>Schedulability analysis for tasks with static and dynamic offsets</title><year>1998</year><authors><author org="Dept. de Electron. y Comput., Cantabria Univ., Santander, Spain" id="1978218980">J.C. Palencia</author><author org="" id="2988160796">M. Gonzalez Harbour</author></authors><n_citation>369</n_citation><doc_type>Conference</doc_type><references><reference>1702973254</reference><reference>2096986864</reference><reference>2109149844</reference><reference>2109488193</reference><reference>2145132630</reference><reference>2160293203</reference><reference>2165172064</reference><reference>2987380597</reference></references><venue id="1124527938" type="C">Real-Time Systems Symposium</venue><doi>10.1109/REAL.1998.739728</doi><keywords><keyword weight="0.51596">Algorithm design</keyword><keyword weight="0.46009">Upper and lower bounds</keyword><keyword weight="0.57052">Scheduling (computing)</keyword><keyword weight="0.44681">Computer science</keyword><keyword weight="0.46969">Parallel computing</keyword><keyword weight="0.46307">Real-time computing</keyword><keyword weight="0.503">Multiprocessing</keyword><keyword weight="0.0">Processor scheduling</keyword><keyword weight="0.61253">Dynamic priority scheduling</keyword><keyword weight="0.43224">Periodic graph (geometry)</keyword><keyword weight="0.46725">Distributed computing</keyword></keywords><publisher>IEEE</publisher><abstract>In this paper we present an extension to current schedulability analysis techniques for periodic task with offsets, scheduled under a preemptive fixed priority scheduler. Previous techniques allowed only static offsets restricted to being smaller than the task periods. With the extension presented in this paper, we eliminate this restriction and we allow both static and dynamic offsets. The most significant application of this extension is in the analysis of multiprocessor and distributed systems. We show that we can achieve a significant increase of the maximum schedulable utilization by using the new technique, as opposed to using previously known worst-case analysis techniques for distributed systems.</abstract></paper>
<paper id="1975514564"><title>Efficient points-to analysis for whole-program analysis</title><year>1999</year><authors><author org="Ohio State University , Columbus#TAB#" id="2157713762">Donglin Liang</author><author org="Ohio State University , Columbus#TAB#" id="2984677931">Mary Jean Harrold</author></authors><n_citation>105</n_citation><doc_type>Conference</doc_type><references><reference>1518169998</reference><reference>1797940162</reference><reference>1974604404</reference><reference>1980468060</reference><reference>2009911326</reference><reference>2053155313</reference><reference>2056289513</reference><reference>2068549754</reference><reference>2087612811</reference><reference>2103326816</reference><reference>2131135493</reference><reference>2133846634</reference><reference>2151360539</reference><reference>2166341446</reference></references><venue id="1199533187" type="C">Foundations of Software Engineering</venue><doi>10.1145/318774.318943</doi><keywords><keyword weight="0.48513">Pointer (computer programming)</keyword><keyword weight="0.53373">Pointer analysis</keyword><keyword weight="0.62659">Alias</keyword><keyword weight="0.46586">Computer science</keyword><keyword weight="0.46772">Algorithm</keyword><keyword weight="0.4645">Theoretical computer science</keyword><keyword weight="0.49436">Software system</keyword><keyword weight="0.71732">Alias analysis</keyword><keyword weight="0.51207">Program analysis</keyword><keyword weight="0.48438">Software development</keyword><keyword weight="0.40559">Empirical research</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>To function on programs written in languages such as C that make extensive use of pointers, automated software engineering tools require safe alias information. Existing alias-analysis techniques that are sufficiently efficient for analysis on large software systems may provide alias information that is too imprecise for tools that use it: the imprecision of the alias information may (1) reduce the precision of the information provided by the tools and (2) increase the cost of the tools. This paper presents a flow-insensitive, context-sensitive points-to analysis algorithm that computes alias information that is almost as precise as that computed by Andersenu0027s algorithm — the most precise flow- and context-insensitive algorithm — and almost as efficient as Steensgaardu0027s algorithm — the most efficient flow- and context-insensitive algorithm. Our empirical studies show that our algorithm scales to large programs better than Andersenu0027s algorithm and show that flow-insensitive alias analysis algorithms, such as our algorithm and Andersenu0027s algorithm, can compute alias information that is close in precision to that computed by the more expensive flow- and context-sensitive alias analysis algorithms.</abstract></paper>
<paper id="1540501475"><title>Using Partial Orders to Improve Automatic Verification Methods</title><year>1990</year><authors><author org="Université de Liège**" id="2634395717">Patrice Godefroid</author></authors><n_citation>261</n_citation><doc_type>Conference</doc_type><references><reference>1488650839</reference><reference>1603163314</reference><reference>1705394006</reference><reference>1787838883</reference><reference>1795817251</reference><reference>1875868519</reference><reference>1973501242</reference><reference>2016300863</reference><reference>2031145943</reference><reference>2113355185</reference><reference>2150320481</reference><reference>2912084748</reference><reference>2914421362</reference><reference>2939691189</reference></references><venue id="1162450063" type="C">Computer Aided Verification</venue><doi>10.1007/BFb0023731</doi><keywords><keyword weight="0.59939">Intelligent verification</keyword><keyword weight="0.46087">Computer science</keyword><keyword weight="0.57254">Concurrency</keyword><keyword weight="0.48551">Automaton</keyword><keyword weight="0.59223">Correctness</keyword><keyword weight="0.46428">Theoretical computer science</keyword><keyword weight="0.57317">Partial order reduction</keyword><keyword weight="0.59678">High-level verification</keyword><keyword weight="0.57405">Combinatorial explosion</keyword><keyword weight="0.4957">Linearization</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>In this paper, we present a verification method for concurrent finite-state systems that attempts to avoid the part of the combinatorial explosion due to the modeling of concurrency by interleavings. The behavior of a system is described in terms of partial orders (more precisely in terms of Mazurkiewiczu0027s traces) rather than in terms of interleavings. We introduce the notion of “trace automation” which generates only one linearization per partial order. Then we show how to use trace automata to prove program correctness.</abstract></paper>
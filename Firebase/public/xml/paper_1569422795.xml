<paper id="1569422795"><title>An Approach to the Obfuscation of Control-Flow of Sequential Computer Programs</title><year>2001</year><authors><author org="Cloakware Corporation" id="2100904488">Stanley Chow</author><author org="Cloakware Corporation" id="2577560304">Yuan Gu</author><author org="Cloakware Corporation" id="2115966929">Harold Johnson</author><author org="Russian Academy of Sciences" id="2435781502">Vladimir A. Zakharov</author></authors><n_citation>102</n_citation><doc_type>Conference</doc_type><references><reference>97397928</reference><reference>1495119144</reference><reference>1563342424</reference><reference>1798077826</reference><reference>1982129592</reference><reference>1984391920</reference><reference>1990053053</reference><reference>2020841721</reference><reference>2025554746</reference><reference>2031906711</reference><reference>2036918610</reference><reference>2068219251</reference><reference>2074674105</reference><reference>2126851641</reference><reference>2168837868</reference></references><venue id="2754249383" type="C">International Conference on Information Security</venue><doi>10.1007/3-540-45439-X_10</doi><keywords><keyword weight="0.44982">Computer science</keyword><keyword weight="0.45814">Cryptography</keyword><keyword weight="0.49021">Control flow</keyword><keyword weight="0.45963">Theoretical computer science</keyword><keyword weight="0.48129">Basic block</keyword><keyword weight="0.4567">Software</keyword><keyword weight="0.52201">Turing machine</keyword><keyword weight="0.49781">Computer program</keyword><keyword weight="0.51592">Obfuscation</keyword><keyword weight="0.48134">Bounded function</keyword><keyword weight="0.42767">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>In this paper we present a straightforward approach to the obfuscation of sequential program control-flow in order to design tamperresistant software. The principal idea of our technique is as follows: Let I be an instance of a hard combinatorial problem C, whose solution K is known. Then, given a source program ?, we implant I into ? by applying semantics-preserving transformations and using K as a key. This yields as its result an obfuscated program ?I,K, such that a detection of some property P of ?I,K, which is essential for comprehending the program, gives a solution to I. Varying instances I, we obtain a family ?C of obfuscated programs such that the problem of checking P for ?C is at least as hard as C. We show how this technique works by taking for C the acceptance problem for linear bounded Turing machines, which is known to be pspace-complete.</abstract></paper>
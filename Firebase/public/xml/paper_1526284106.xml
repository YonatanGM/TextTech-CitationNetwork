<paper id="1526284106"><title>An Industrial Experiment in Automatic Generation of Executable Test Suites for a Cache Coherency Protocol</title><year>1998</year><authors><author org="IRISA, INRIA, Rennes, France" id="1209744992">Hakim Kahlouche</author><author org="IFSIC-Université de Rennes I" id="1990331404">César Viho</author><author org="Via ai Laboratori Olivetti" id="277175208">Massimo Zendri</author></authors><n_citation>25</n_citation><doc_type /><references><reference>1510782929</reference><reference>1562046958</reference><reference>1624945350</reference><reference>2024851598</reference></references><venue id="" type="">IWTCS Proceedings of the IFIP TC6 11th International Workshop on Testing Communicating Systems</venue><doi>10.1007/978-0-387-35381-4_13</doi><keywords><keyword weight="0.0">Multiprocessor architecture</keyword><keyword weight="0.43441">Architecture</keyword><keyword weight="0.47098">Programming language</keyword><keyword weight="0.0">Protocol conformance testing</keyword><keyword weight="0.45896">Computer science</keyword><keyword weight="0.57539">Formal specification</keyword><keyword weight="0.59549">Conformance testing</keyword><keyword weight="0.0">Formal description</keyword><keyword weight="0.49878">Cache coherence</keyword><keyword weight="0.60101">Executable</keyword></keywords><publisher>Kluwer, B.V.</publisher><abstract>In this paper, we present an end-to-end industrial case-study concerning the automatic generation of tests suites for the Cache Coherency Protocol of a Multiprocessor Architecture. It consists of the following stages: (1) formal specification of the architecture using Lotos language, (2) formal description of the test purposes, (3) automatic generation of abstract test suites using the prototype TGV, and (4) automatic generation and analysis of executable test suites. Through the description of each of the previous stages, this paper demonstrates that tools designed for protocol conformance testing can be efficiently used to generate executable tests for hardware concurrent systems.</abstract></paper>
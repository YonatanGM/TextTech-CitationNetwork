<paper id="1559577056"><title>First version of a data flow procedure language</title><year>1974</year><authors><author org="Project MAC, MIT" id="2985403705">J. B. Dennis</author></authors><n_citation>472</n_citation><doc_type /><references><reference>2010927194</reference><reference>2045255985</reference><reference>2113757735</reference><reference>2149674691</reference></references><venue id="" type="">Programming Symposium, Proceedings Colloque sur la Programmation</venue><doi>10.1007/3-540-06859-7_145</doi><keywords><keyword weight="0.48336">Programming language</keyword><keyword weight="0.74691">Data control language</keyword><keyword weight="0.46523">Computer science</keyword><keyword weight="0.60813">Lisp</keyword><keyword weight="0.47124">Natural language processing</keyword><keyword weight="0.0">Artificial intelligence</keyword><keyword weight="0.74733">Universal Networking Language</keyword><keyword weight="0.71136">Data manipulation language</keyword><keyword weight="0.67742">Semantic computing</keyword><keyword weight="0.56882">Semantic data model</keyword><keyword weight="0.52437">Data flow diagram</keyword><keyword weight="0.72927">Language primitive</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>A language for representing computational procedures based on the concept of data flow is presented in terms of a semantic model that permits concurrent execution of noninterfering program parts. Procedures in the language operate on elementary and structured values, and always define functional transformations of values. The language is equivalent in expressive power to a block structured language with internal procedure variables and is a generalization of pure Lisp. The language is being used as a model for study of fundamental semantic constructs for programming, as a target language for evaluating trans-latability of programs expressed at the user-language level, and as a guide for research in advanced computer architecture.</abstract></paper>
<paper id="1516386166"><title>Analysing the impact of adding integrity constraints to information systems</title><year>2003</year><authors><author org="Department of Computer Science, University of Manchester, Manchester, England, United Kingdom" id="790587482">Suzanne M. Embury</author><author org="Department of Computer Science, Cardiff University, Cardiff, Wales, United Kingdom" id="2157821589">Jianhua Shao</author></authors><n_citation>9</n_citation><doc_type>Conference</doc_type><references><reference>135632037</reference><reference>180056467</reference><reference>1579790099</reference><reference>1810446874</reference><reference>2065530596</reference><reference>2099805467</reference><reference>2124496982</reference><reference>2133364435</reference></references><venue id="1134069326" type="C">Conference on Advanced Information Systems Engineering</venue><doi>10.1007/3-540-45017-3_14</doi><keywords><keyword weight="0.53451">Information system</keyword><keyword weight="0.43224">Data mining</keyword><keyword weight="0.54772">Programmer</keyword><keyword weight="0.45699">Computer science</keyword><keyword weight="0.50251">Competitive advantage</keyword><keyword weight="0.0">Rule engine</keyword><keyword weight="0.55982">Data integrity</keyword><keyword weight="0.0">Constraint violation</keyword><keyword weight="0.62031">Business rule</keyword><keyword weight="0.4415">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The ability of a business to change its working practices, in order to gain or retain competitive edge, is closely aligned to its ability to change the business rules implemented by its information systems. Unfortunately, adding a new business rule to an existing system is both time-consuming and error-prone. It is all too easy, for example, for the programmer to overlook some program elements that are affected by the addition of the new rule, with the result that it is not enforced uniformly by the system as a whole. When this happens, the information system can begin to behave in confusing and anomalous this :[103],"paper, we describe an impact analysis technique that aims to support the programmer in the difficult task of implementing an important class of business rules, namely, integrity constraints. We have adapted techniques from database integrity maintenance to allow us to identify whether a program is likely to be affected by the addition of a new constraint, and to pinpoint the specific program statements that must be guarded against the possibility of constraint violation. Our technique can also be used to provide guidance to the programmer as to the conditions that must be included in any new guards.</abstract></paper>
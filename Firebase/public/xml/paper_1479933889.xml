<paper id="1479933889"><title>Scalable Certification for Typed Assembly Language</title><year>2000</year><authors><author org="Cornell University;" id="2241310076">Dan Grossman</author><author org="Cornell University;" id="1985120884">J. Gregory Morrisett</author></authors><n_citation>19</n_citation><doc_type>Journal</doc_type><references><reference>1482715091</reference><reference>1592962791</reference><reference>1689872437</reference><reference>1974190112</reference><reference>1976394633</reference><reference>2016065322</reference><reference>2044636417</reference><reference>2051632385</reference><reference>2055886480</reference><reference>2057292961</reference><reference>2067976080</reference><reference>2069107692</reference><reference>2071060021</reference><reference>2093223485</reference><reference>2096213702</reference><reference>2114925693</reference><reference>2124117537</reference><reference>2142550124</reference><reference>2145900424</reference><reference>2151480972</reference><reference>2153297607</reference><reference>2171691057</reference><reference>2294934420</reference><reference>2911227993</reference></references><venue id="106296714" type="J">Lecture Notes in Computer Science</venue><doi>10.1007/3-540-45332-6_5</doi><keywords><keyword weight="0.62307">Dead code elimination</keyword><keyword weight="0.62647">Functional compiler</keyword><keyword weight="0.47252">Programming language</keyword><keyword weight="0.60315">Source code</keyword><keyword weight="0.45483">Computer science</keyword><keyword weight="0.66473">Typed assembly language</keyword><keyword weight="0.64645">Compiler correctness</keyword><keyword weight="0.62731">Code generation</keyword><keyword weight="0.64534">Compiler</keyword><keyword weight="0.63727">Compiler construction</keyword><keyword weight="0.44099">Distributed computing</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>A type-based certifying compiler maps source code to machine code and target-level type annotations. The target-level annotations make it possible to prove easily that the machine code is type-safe, independent of the source code or compiler. To be useful across a range of source languages and compilers, the target-language type system should provide powerful type constructors for encoding higher-level invariants. Unfortunately, it is difficult to engineer such type systems so that annotation sizes are small and verification times are fast.In this paper, we describe our experience writing a certifying compiler that targets Typed Assembly Language (TALx86) and discuss some general techniques we have used to keep annotation sizes small and verification times fast. We quantify the effiectiveness of these techniques by measuring their effiects on a sizeable application -- the certifying compiler itself. Using these techniques, which include common-subexpression elimination of types, higher-order type abbreviations, and selective reverification, can dramatically change certificate size and verification time.</abstract></paper>
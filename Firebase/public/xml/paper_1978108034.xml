<paper id="1978108034"><title>On the power of magic</title><year>1991</year><authors><author org="" id="345432764">Catriel Beeri</author><author org="" id="2164040783">Raghu Ramakrishnan</author></authors><n_citation>204</n_citation><doc_type>Journal</doc_type><references><reference>52405575</reference><reference>97364269</reference><reference>266212533</reference><reference>1528738961</reference><reference>1535993640</reference><reference>1570025952</reference><reference>1573631856</reference><reference>1586000712</reference><reference>1970637119</reference><reference>1987862681</reference><reference>2027276583</reference><reference>2042684233</reference><reference>2092842298</reference><reference>2132063146</reference><reference>2143526228</reference><reference>2163810897</reference><reference>2164954218</reference></references><venue id="86488779" type="J">Journal of Logic Programming</venue><doi>10.1016/0743-1066(91)90038-Q</doi><keywords><keyword weight="0.55712">Query language</keyword><keyword weight="0.0">Database query</keyword><keyword weight="0.51782">Horn clause</keyword><keyword weight="0.46793">Programming language</keyword><keyword weight="0.50206">Deductive database</keyword><keyword weight="0.4711">Computer science</keyword><keyword weight="0.46469">Algorithm</keyword><keyword weight="0.47691">Theoretical computer science</keyword><keyword weight="0.53482">Rewriting</keyword><keyword weight="0.49623">Recursion</keyword></keywords><publisher>Elsevier Science Inc.</publisher><abstract>Abstract This paper considers the efficient evaluation of recursive queries expressed using Horn clauses. We define sideways information passing formally and show how a query evaluation algorithm may be defined in terms of sideways information passing and control. We then consider a class of information-passing strategies that suffices to describe most query evaluation algorithms in the database literature, and show that these strategies may always be implemented by rewriting a given program and evaluating the rewritten program bottom-up. We describe in detail several algorithms for rewriting a program. These algorithms generalize the counting and magic-sets algorithms to work with arbitrary programs. Safety and optimality of the algorithms are also considered.</abstract></paper>
<paper id="1810396090"><title>Automatic, template-based run-time specialization: implementation and experimental study</title><year>1998</year><authors><author org="IRISA, Rennes, France" id="2191173505">F. Noel</author><author org="" id="230507561">L. Hornof</author><author org="" id="171983298">C. Consel</author><author org="" id="2083178904">J.L. Lawall</author></authors><n_citation>73</n_citation><doc_type>Conference</doc_type><references><reference>11600427</reference><reference>1496885683</reference><reference>1797198873</reference><reference>1986644367</reference><reference>2076960817</reference><reference>2113095216</reference><reference>2143964278</reference><reference>2161925862</reference></references><venue id="1140657324" type="C">International Conference on Computational Logistics</venue><doi>10.1109/ICCL.1998.674164</doi><keywords><keyword weight="0.45829">Programming language</keyword><keyword weight="0.49853">Program transformation</keyword><keyword weight="0.57461">Partial evaluation</keyword><keyword weight="0.61228">Source code</keyword><keyword weight="0.46224">Computer science</keyword><keyword weight="0.54032">Compiler</keyword><keyword weight="0.5968">Code generation</keyword><keyword weight="0.49952">Software quality</keyword><keyword weight="0.48042">Computer graphics</keyword><keyword weight="0.52249">Automatic programming</keyword></keywords><publisher>IEEE Computer Society</publisher><abstract>Specializing programs with respect to run time values has been shown to drastically improve code performance on realistic programs ranging from operating systems to graphics. Recently, various approaches to specializing code at run time have been proposed. However, these approaches still suffer from shortcomings that limit their applicability: they are manual, too expensive, or require programs to be written in a dedicated language. We solve these problems by introducing new techniques to implement run time specialization. The key to our approach is the use of code templates. Templates are automatically generated from ordinary programs and are optimized before run time, allowing high quality code to be quickly generated at run time. Experimental results obtained on scientific and graphics code indicate that our approach is highly effective. Little run time overhead is introduced, since code generation primarily consists of copying instructions. Run time specialized programs run up to 10 times faster, and are nearly as fast as fully optimized programs (80% on average). The combination of low run time overhead and high code quality enables specialization to be amortized in as few as 3 runs. Although this approach is highly effective, its implementation is relatively simple since it exploits existing partial evaluation and compiler technologies.</abstract></paper>
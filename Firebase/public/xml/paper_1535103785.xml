<paper id="1535103785"><title>Designing an Object-Oriented Programming Language with Behavioural Subtyping</title><year>1990</year><authors><author org="Philips Res. Labs." id="2030714940">Pierre America</author></authors><n_citation>162</n_citation><doc_type /><references><reference>1591007360</reference><reference>1770006921</reference><reference>1997522747</reference><reference>2032265482</reference><reference>2036656026</reference><reference>2038497675</reference><reference>2080040385</reference><reference>2110050316</reference><reference>2145459199</reference><reference>2153060956</reference><reference>2161825580</reference><reference>2163832616</reference><reference>2173184982</reference></references><venue id="" type="">Proceedings of the REX School/Workshop on Foundations of Object-Oriented Languages</venue><doi>10.1007/BFb0019440</doi><keywords><keyword weight="0.62704">Programming language specification</keyword><keyword weight="0.4657">Programming language</keyword><keyword weight="0.70275">Object-based language</keyword><keyword weight="0.44111">Computer science</keyword><keyword weight="0.62744">Object language</keyword><keyword weight="0.6365">Very high-level programming language</keyword><keyword weight="0.62885">High-level programming language</keyword><keyword weight="0.65952">First-generation programming language</keyword><keyword weight="0.63456">Low-level programming language</keyword><keyword weight="0.6466">Language primitive</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>This paper describes the design of the parallel object-oriented programming language POOL-I. We concentrate on the type system of the language and specifically on the aspects of subtyping and genericity. POOL-I is the first language we know of that includes subtyping and inheritance as completely separate language mechanisms. By decoupling these two, which have been strongly tied together in other statically typed object-oriented languages with inheritance, a much cleaner language design can be obtained and a much more flexible use of both mechanisms can be made in actual programs.</abstract></paper>
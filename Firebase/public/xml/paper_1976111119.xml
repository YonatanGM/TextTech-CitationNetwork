<paper id="1976111119"><title>Integrating a formal method into a software engineering process with UML and Java</title><year>2008</year><authors><author org="University of Oldenburg, Department of Computing Science, 26111, Oldenburg, Germany#TAB#" id="2150213130">Michael Möller</author><author org="University of Oldenburg, Department of Computing Science, 26111, Oldenburg, Germany#TAB#" id="2108294572">Ernst-Rüdiger Olderog</author><author org="University of Paderborn, Department of Computer Science, 33098, Paderborn, Germany#TAB#" id="2512701426">Holger Rasch</author><author org="University of Paderborn, Department of Computer Science, 33098, Paderborn, Germany#TAB#" id="2062320239">Heike Wehrheim</author></authors><n_citation>25</n_citation><doc_type>Journal</doc_type><references><reference>1487405315</reference><reference>1487672899</reference><reference>1489858443</reference><reference>1489862800</reference><reference>1505722265</reference><reference>1507195521</reference><reference>1514639330</reference><reference>1528309244</reference><reference>1534869992</reference><reference>1535836754</reference><reference>1544240048</reference><reference>1544646281</reference><reference>1559958463</reference><reference>1571075905</reference><reference>1571365490</reference><reference>1582068322</reference><reference>1593065203</reference><reference>1593874741</reference><reference>1604959559</reference><reference>1605548288</reference><reference>1782795672</reference><reference>1977237988</reference><reference>1985804037</reference><reference>1987407870</reference><reference>1998017916</reference><reference>1998490923</reference><reference>2020034474</reference><reference>2038167407</reference><reference>2048327004</reference><reference>2052957797</reference><reference>2057835515</reference><reference>2069865621</reference><reference>2077325003</reference><reference>2084998880</reference><reference>2094160561</reference><reference>2102097307</reference><reference>2105142318</reference><reference>2110425399</reference><reference>2118962824</reference><reference>2119402699</reference><reference>2119965246</reference><reference>2121759723</reference><reference>2122303816</reference><reference>2128111779</reference><reference>2144545266</reference><reference>2162669339</reference><reference>2295105386</reference><reference>2897840903</reference></references><venue id="128250343" type="J">Formal Aspects of Computing</venue><doi>10.1007/s00165-007-0042-7</doi><keywords><keyword weight="0.63722">Specification language</keyword><keyword weight="0.48321">Programming language</keyword><keyword weight="0.56677">Unified Modeling Language</keyword><keyword weight="0.64591">UML tool</keyword><keyword weight="0.46891">Computer science</keyword><keyword weight="0.6609">Formal specification</keyword><keyword weight="0.68026">Applications of UML</keyword><keyword weight="0.6483">Java Modeling Language</keyword><keyword weight="0.64385">Formal methods</keyword><keyword weight="0.56092">Java</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>We describe how CSP-OZ, a formal method combining the process algebra CSP with the specification language Object-Z, can be integrated into an object-oriented software engineering process employing the UML as a modelling and Java as an implementation language. The benefit of this integration lies in the rigour of the formal method, which improves the precision of the constructed models and opens up the possibility of (1) verifying properties of models in the early design phases, and (2) checking adherence of implementations to :[82],"envisaged application area of our approach is the design of distributed reactive systems. To this end, we propose a specific UML profile for reactive systems. The profile contains facilities for modelling components, their interfaces and interconnections via synchronous/broadcast communication, and the overall architecture of a system. The integration with the formal method proceeds by generating a significant part of the CSP-OZ specification from the initially developed UML model. The formal specification is on the one hand the starting point for verifying properties of the model, for instance by using the FDR model checker. On the other hand, it is the basis for generating contracts for the final implementation. Contracts are written in the Java Modeling Language (JML) complemented by CSPjassda, an assertion language for specifying orderings between method invocations. A set of tools for runtime checking can be used to supervise the adherence of the final Java implementation to the generated contracts.</abstract></paper>
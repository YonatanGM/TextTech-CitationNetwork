<paper id="1518523549"><title>The canonical activities of reverse engineering</title><year>2000</year><authors><author org="Department of Computer Science, University of California, Riverside, CA 92521&amp;dash" id="1871878035">Scott R. Tilley</author></authors><n_citation>20</n_citation><doc_type>Journal</doc_type><references><reference>1493596129</reference><reference>1545101345</reference><reference>1694414531</reference><reference>1820268915</reference><reference>1900564928</reference><reference>1980976550</reference><reference>1996853298</reference><reference>2003395552</reference><reference>2006267758</reference><reference>2018453069</reference><reference>2052100091</reference><reference>2066764477</reference><reference>2082398795</reference><reference>2108686520</reference><reference>2119452943</reference><reference>2122789628</reference><reference>2138225295</reference><reference>2141430101</reference><reference>2145308934</reference><reference>2148506541</reference><reference>2154738170</reference><reference>2154774499</reference><reference>2161148842</reference><reference>2167893474</reference><reference>2169348520</reference><reference>2172019287</reference><reference>2293624369</reference><reference>2911848417</reference></references><venue id="104191512" type="J">Annals of Software Engineering</venue><doi>10.1023/A:1018985010508</doi><keywords><keyword weight="0.46583">Data science</keyword><keyword weight="0.0">Design space</keyword><keyword weight="0.45286">Data collection</keyword><keyword weight="0.0">Information exploration</keyword><keyword weight="0.45249">Systems engineering</keyword><keyword weight="0.45564">Computer science</keyword><keyword weight="0.53738">Reverse engineering</keyword><keyword weight="0.48569">Software</keyword><keyword weight="0.49065">Hierarchy</keyword><keyword weight="0.51842">Vocabulary</keyword></keywords><publisher>J. C. Baltzer AG, Science Publishers</publisher><abstract>This paper describes three categories of canonical activities that are characteristic of reverse engineering for program understanding. The activities are data gathering, knowledge management, and information exploration. All tasks carried out by a software engineer during a program understanding exercise can be mapped to a composition of one or more of these canonical activities. The design space formed by the canonical activities can be used to classify the capabilities provided by individual support mechanisms using a common vocabulary. A descriptive model that categorizes important support mechanism features based on a hierarchy of attributes is used to structure the canonical activities.</abstract></paper>
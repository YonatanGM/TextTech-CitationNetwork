<paper id="1980241249"><title>The revival transformation</title><year>1994</year><authors><author org="Novell, Inc. and Stevens Institute of Technology#TAB#" id="2235273941">Lawrence Feigen</author><author org="Stevens Institute of Technology," id="2240413321">David Klappholz</author><author org="Nynex Science and Technology, Inc. and Stevens Institute of Technology" id="2222262220">Robert Casazza</author><author org="Stevens Institute of Technology," id="2226400688">Xing Xue</author></authors><n_citation>14</n_citation><doc_type>Conference</doc_type><references><reference>1491178396</reference><reference>1516632679</reference><reference>1994334933</reference><reference>2010452422</reference><reference>2025317174</reference><reference>2039805140</reference><reference>2042468601</reference><reference>2079573490</reference><reference>2082051985</reference><reference>2087086761</reference></references><venue id="1160032607" type="C">Symposium on Principles of Programming Languages</venue><doi>10.1145/174675.178043</doi><keywords><keyword weight="0.47328">Programming language</keyword><keyword weight="0.52411">Object-oriented programming</keyword><keyword weight="0.46316">Computer science</keyword><keyword weight="0.45651">Theoretical computer science</keyword><keyword weight="0.53315">Compiler</keyword><keyword weight="0.4368">Personalization</keyword></keywords><publisher>ACM</publisher><abstract>The notion that a definition of a variable is dead is used by optimizing compilers to delete code whose execution is useless. We extend the notion of deadness to that of partial deadness , and define a transformation, the revival transformation , which eliminates useless executions of a (partially dead) definition by tightening its execution conditions without changing the set of uses which it reaches or the conditions under which it reaches each of them.</abstract></paper>
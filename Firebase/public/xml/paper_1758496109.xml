<paper id="1758496109"><title>Towards a Formal Operational Semantics of UML Statechart Diagrams</title><year>1999</year><authors><author org="CNUCE" id="2101257309">Diego Latella</author><author org="Technical University of Budapest" id="341399993">Istvan Majzik</author><author org="â€ University of York" id="2138268002">Mieke Massink</author></authors><n_citation>173</n_citation><doc_type>Conference</doc_type><references><reference>1497879578</reference><reference>1503973138</reference><reference>2099529102</reference><reference>2115309705</reference><reference>2129395888</reference></references><venue id="1129611459" type="C">Formal Methods for Open Object-Based Distributed Systems</venue><doi>10.1007/978-0-387-35562-7_25</doi><keywords><keyword weight="0.50231">Kripke structure</keyword><keyword weight="0.59914">Operational semantics</keyword><keyword weight="0.45598">Programming language</keyword><keyword weight="0.66866">UML state machine</keyword><keyword weight="0.64188">UML tool</keyword><keyword weight="0.50447">Unified Modeling Language</keyword><keyword weight="0.42871">Computer science</keyword><keyword weight="0.51306">State diagram</keyword><keyword weight="0.43498">Theoretical computer science</keyword><keyword weight="0.68143">UML state machine</keyword><keyword weight="0.68366">Applications of UML</keyword></keywords><publisher>Springer, Boston, MA</publisher><abstract>Statechart Diagrams are a notation for describing behaviours in the framework of UML, the Unified Modeling Language of object-oriented systems. UML is a semi-formal language, with a precisely defined syntax and static semantics but with an only informally specified dynamic semantics. UML Statechart Diagrams differ from classical statecharts, as defined by Harel, for which formalizations and results are available in the literature. This paper sets the basis for the development of a formal semantics for UML Statechart Diagrams based on Kripke structures. This forms the first step towards model checking of UML Statechart Diagrams. We follow the approach proposed by Mikk and others: we first map Statechart Diagrams to the intermediate format of extended hierarchical automata and then we define an operational semantics for these automata. We prove a number of properties of such semantics which reflect the design choices of UML Statechart Diagrams.</abstract></paper>
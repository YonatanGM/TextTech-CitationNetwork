<paper id="1507959092"><title>Model Checking Complete Requirements Specifications Using Abstraction</title><year>1999</year><authors><author org="Center for High Assurance Computer Systems (Code 5546), Naval Research Laboratory, Washington, DC 20375. ramesh@itd.nrl.navy.mil#TAB#" id="2098528877">Ramesh Bharadwaj</author><author org="Center for High Assurance Computer Systems (Code 5546), Naval Research Laboratory, Washington, DC 20375. heitmeyer@itd.nrl.navy.mil#TAB#" id="2138945749">Constance L. Heitmeyer</author></authors><n_citation>124</n_citation><doc_type>Conference</doc_type><references><reference>1514983780</reference><reference>1540501475</reference><reference>1595351489</reference><reference>1857327297</reference><reference>1881906100</reference><reference>1934074768</reference><reference>1968978437</reference><reference>1985566198</reference><reference>1987073197</reference><reference>1995362218</reference><reference>2005001435</reference><reference>2016937010</reference><reference>2023825274</reference><reference>2030224590</reference><reference>2046138576</reference><reference>2077698590</reference><reference>2078388171</reference><reference>2080267935</reference><reference>2081553013</reference><reference>2081938726</reference><reference>2082434633</reference><reference>2090106217</reference><reference>2102785826</reference><reference>2103953153</reference><reference>2113486906</reference><reference>2114092850</reference><reference>2115309705</reference><reference>2116989825</reference><reference>2117189826</reference><reference>2118774213</reference><reference>2125708466</reference><reference>2146191617</reference><reference>2151056896</reference><reference>2159152974</reference><reference>2173952623</reference><reference>2293624369</reference></references><venue id="1166511975" type="C">Automated Software Engineering</venue><doi>10.1023/A:1008697817793</doi><keywords><keyword weight="0.6824">Abstraction model checking</keyword><keyword weight="0.67319">Model checking</keyword><keyword weight="0.4721">Programming language</keyword><keyword weight="0.46385">Computer science</keyword><keyword weight="0.52411">Binary decision diagram</keyword><keyword weight="0.4618">Theoretical computer science</keyword><keyword weight="0.51511">Data type</keyword><keyword weight="0.49942">Software</keyword><keyword weight="0.51645">Boolean data type</keyword><keyword weight="0.6066">Software requirements specification</keyword><keyword weight="0.63821">Symbolic trajectory evaluation</keyword></keywords><publisher>Kluwer Academic Publishers</publisher><abstract>Although model checking has proven remarkably effective in detecting errors in hardware designs, its success in the analysis of software specifications has been limited. Model checking algorithms for hardware verification commonly use Binary Decision Diagrams (BDDs) to represent predicates involving the many Boolean variables commonly found in hardware descriptions. Unfortunately, BDD representations may be less effective for analyzing software specifications, which usually contain not only Booleans but variables spanning a wide range of data types. Further, software specifications typically have huge, sometimes infinite, state spaces that cannot be model checked directly using conventional symbolic methods. One promising but largely unexplored approach to model checking software specifications is to apply mathematically sound abstraction methods. Such methods extract a reduced model from the specification, thus making model checking feasible. Currently, users of model checkers routinely analyze reduced models but often generate the models in ad hoc ways. As a result, the reduced models may be :[153],"paper, an expanded version of (Bharadwaj and Heitmeyer, 1997), describes how one can model check a complete requirements specification expressed in the SCR (Software Cost Reduction) tabular notation. Unlike previous approaches which applied model checking to mode transition tables with Boolean variables, we use model checking to analyze properties of a complete SCR specification with variables ranging over many data types. The paper also describes two sound and, under certain conditions, complete methods for producing abstractions from requirements specifications. These abstractions are derived from the specification and the property to be analyzed. Finally, the paper describes how SCR requirements specifications can be translated into the languages of Spin, an explicit state model checker, and SMV, a symbolic model checker, and presents the results of model checking two sample SCR specifications using our abstraction methods and the two model checkers.</abstract></paper>
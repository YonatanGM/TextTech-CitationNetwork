<paper id="1482704861"><title>PIL: An Optimizable Functional Language for Data Intensive Applications</title><year>1993</year><authors><author org="Hewlett-Packard Lab.#TAB#" id="2658861050">Waqar Hasan</author><author org="Hewlett-Packard Lab.#TAB#" id="2202388955">Ravi Krishnamurthy</author></authors><n_citation>5</n_citation><doc_type /><references><reference>1507693023</reference><reference>1524936640</reference><reference>1543641760</reference><reference>1576853379</reference><reference>2002301065</reference><reference>2078528123</reference><reference>2089042876</reference><reference>2098733337</reference><reference>2100398826</reference><reference>2105947458</reference><reference>2112668678</reference><reference>2126171191</reference><reference>2165060196</reference><reference>2296139130</reference></references><venue id="" type="">POS</venue><doi>10.1007/978-1-4471-3209-7_16</doi><keywords><keyword weight="0.52163">Query optimization</keyword><keyword weight="0.48104">Programming language</keyword><keyword weight="0.48378">Expression (mathematics)</keyword><keyword weight="0.53921">Functional programming</keyword><keyword weight="0.54954">Instruction set</keyword><keyword weight="0.4725">Computer science</keyword><keyword weight="0.46903">Theoretical computer science</keyword><keyword weight="0.50781">Model of computation</keyword><keyword weight="0.53651">Data type</keyword><keyword weight="0.52117">Complex instruction set computing</keyword><keyword weight="0.53353">Semantics</keyword></keywords><publisher>Springer, London</publisher><abstract>The Papyrus Interface Language (PIL) has the design goal of providing optimizable and parallelizable language features. Analogous to the design philosophy of RISC instruction sets, the design of PIL is motivated by the desire to exploit query optimization and parallelization techniques. In contrast, most proposals of database programming language provide features to directly match user needs irrespective of the implementation problems, analogous to the CISC instruction set proposals. We have combined a functional model of computation with data types suitable for data intensive applications. A functional model gives a declarative semantics to all expressions including “procedural” constructs such as if-then-else, while and function calls provided the expression is without side-effects. We also provide specialized constructs for iteration over bags and sequences in order to facilitate optimization. The semantics of data types and computational abstractions are carefully chosen to retain the capability to parallelize programs. We have chosen to only partially define the order of evaluation for programs. This opens up more opportunities for reordering and for parallel execution. Just as in RISC instruction sets — what is not included will be a factor in dictating the performance of the system — we argue the need to exclude features such as object identity, semantic types an d inheritance that are popularly included in most database programming languages.</abstract></paper>
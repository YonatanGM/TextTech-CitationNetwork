<paper id="1899647947"><title>Practical lineage tracing in data warehouses</title><year>2000</year><authors><author org="Dept. of Comput. Sci., Stanford Univ., CA, USA#TAB#" id="2096332374">Y. Cui</author><author org="" id="671527850">J. Widom</author></authors><n_citation>137</n_citation><doc_type>Conference</doc_type><references><reference>5685153</reference><reference>30253544</reference><reference>48722088</reference><reference>1479789170</reference><reference>1483064029</reference><reference>1483342375</reference><reference>1488870204</reference><reference>1494307597</reference><reference>1720961861</reference><reference>1983178058</reference><reference>1995999642</reference><reference>2012670464</reference><reference>2017782374</reference><reference>2040293060</reference><reference>2072764742</reference><reference>2103201239</reference><reference>2103920867</reference><reference>2114712170</reference><reference>2132729409</reference><reference>2146740661</reference><reference>2160825121</reference><reference>2164923618</reference><reference>2170515491</reference><reference>2171588311</reference><reference>2172028276</reference></references><venue id="1163988186" type="C">International Conference on Data Engineering</venue><doi>10.1109/ICDE.2000.839437</doi><keywords><keyword weight="0.58319">Data warehouse</keyword><keyword weight="0.46211">Data mining</keyword><keyword weight="0.56561">Relational database</keyword><keyword weight="0.5463">Source data</keyword><keyword weight="0.56632">Tuple</keyword><keyword weight="0.45916">Computer science</keyword><keyword weight="0.59334">Data lineage</keyword><keyword weight="0.4573">Database</keyword><keyword weight="0.53398">Tracing</keyword></keywords><publisher>Stanford InfoLab</publisher><abstract>We consider the view data lineage problem in a warehousing environment: for a given data item in a materialized warehouse view, we want to identify the set of source data items that produced the view item. We formalize the problem and we present a lineage tracing algorithm for relational views with aggregation. Based on our tracing algorithm, we propose a number of schemes for storing auxiliary views that enable consistent and efficient lineage tracing in a multi-source data warehouse. We report on a performance study of the various schemes, identifying which schemes perform best in which settings. Based on our results, we have implemented a lineage tracing package in the WHIPS data warehousing system prototype at Stanford. With this package, users can select view tuples of interest, then efficiently "drill through" to examine the exact source tuples that produced the view tuples of interest.</abstract></paper>
<paper id="1982405273"><title>A microprogrammed keyword transformation unit for a database computer</title><year>1977</year><authors><author org="" id="2153173803">Krishnamurthi Kannan</author><author org="" id="2951965222">David K. Hsiao</author><author org="" id="2147295284">Douglas S. Kerr</author></authors><n_citation>11</n_citation><doc_type>Conference</doc_type><references><reference>2026929157</reference><reference>2055818490</reference><reference>2074302481</reference></references><venue id="1150919317" type="C">International Symposium on Microarchitecture</venue><doi>10.1145/1014196.803319</doi><keywords><keyword weight="0.50695">Byte</keyword><keyword weight="0.51667">Microcode</keyword><keyword weight="0.45725">Virtual machine</keyword><keyword weight="0.43592">Computer science</keyword><keyword weight="0.43969">Command and control</keyword><keyword weight="0.44084">Real-time computing</keyword><keyword weight="0.45185">Computer hardware</keyword><keyword weight="0.44912">Parallel computing</keyword><keyword weight="0.53071">Control store</keyword><keyword weight="0.44519">Emulation</keyword><keyword weight="0.50616">Hash function</keyword><keyword weight="0.42167">dBc</keyword><keyword weight="0.43785">Database</keyword></keywords><publisher>IEEE Press</publisher><abstract>The design of a microprogrammable microprocessor-based keyword transformation unit for a database computer(DBC) is described. The DBC, a specialized back-end computer capable of managing 10 9 - 10 10 bytes of data, consists of two loops of memories and processors, the structure loop and the data loop, connected through a database command and control processor (DBCCP). The structure loop is used to retrieve and update the large amount (10 7 - 10 9 bytes) of structural information about the database from a structure memory (SM) at a rate commensurate with the database operations performed on the mass memory of the data loop. A keyword transformation unit (KXU) is therefore required to enhance the performance of the structure memory. The KXU encodes variable-length keywords into a fixed-length form by hashing. By managing a library of carefully designed hashing algorithms and by dynamically loading the algorithms in a writable control store for execution, the KXU allows the efficient storage of keywords and their associated information and minimizes subsequent accesses to the SM.</abstract></paper>
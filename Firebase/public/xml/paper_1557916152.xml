<paper id="1557916152"><title>UML behavior: inheritance and implementation in current object-oriented languages</title><year>1999</year><authors><author org="L3I, INSA, Bat. 502, Villeurbanne Cedex, France#TAB#" id="2716087020">Jean Louis Sourrouille</author></authors><n_citation>10</n_citation><doc_type>Journal</doc_type><references><reference>110801638</reference><reference>125724275</reference><reference>1499481996</reference><reference>1547337510</reference><reference>1971107784</reference><reference>1992788999</reference><reference>1995008247</reference><reference>2012640100</reference><reference>2059295282</reference><reference>2099529102</reference><reference>2102097307</reference><reference>2110425399</reference><reference>2112694783</reference><reference>2121163444</reference><reference>2157585155</reference><reference>2161825580</reference><reference>2169802556</reference><reference>2402713692</reference></references><venue id="106296714" type="J">Lecture Notes in Computer Science</venue><doi>10.1007/3-540-46852-8_33</doi><keywords><keyword weight="0.47595">Programming language</keyword><keyword weight="0.51128">Unified Modeling Language</keyword><keyword weight="0.53604">Object-oriented programming</keyword><keyword weight="0.45969">Computer science</keyword><keyword weight="0.58409">Abstract state machines</keyword><keyword weight="0.54281">State diagram</keyword><keyword weight="0.5687">Finite-state machine</keyword><keyword weight="0.51807">Formal specification</keyword><keyword weight="0.51666">Code generation</keyword><keyword weight="0.67061">Applications of UML</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The UML dynamic model is described using notions like state, event or active object that current object-oriented languages donu0027t support. When the implementation is not done using a state machine interpreter, these notions had to be translated into the target language. This work aims to study how to translate as automatically as possible UML state diagrams into current objectoriented languages (OOLs), distinguishing sequential and concurrent execution. This translation requires to map UML notions onto OOLs ones, to adapt the abstract state machine, and to add information to state diagrams. Behavior inheritance is a key problem, and both theoretical and practical solutions are examined to ensure behavior substitutability. Then, two main ways for state representation are compared from the inheritance point of view, and automatic code generation is discussed.</abstract></paper>
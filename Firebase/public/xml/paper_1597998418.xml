<paper id="1597998418"><title>Formal Models for Object Oriented Databases</title><year>1990</year><authors><author org="Department of Computer Science, The Hebrew University, Jerusalem 91904, ISRAEL" id="345432764">Catriel Beeri</author></authors><n_citation>108</n_citation><doc_type>Conference</doc_type><references><reference>1977583107</reference><reference>1978895269</reference><reference>1987862681</reference><reference>1988663974</reference><reference>2003453587</reference><reference>2073544767</reference><reference>2089781037</reference><reference>2172307690</reference><reference>2205031991</reference></references><venue id="2756318837" type="C">International Conference on Deductive and Object-Oriented Databases</venue><doi>10.1016/B978-0-444-88433-6.50030-7</doi><keywords><keyword weight="0.46329">Programming language</keyword><keyword weight="0.64375">Method</keyword><keyword weight="0.45748">Computer science</keyword><keyword weight="0.52162">Directed graph</keyword><keyword weight="0.67246">Object model</keyword><keyword weight="0.45663">Theoretical computer science</keyword><keyword weight="0.64481">Object (computer science)</keyword><keyword weight="0.0">Encapsulation (computer programming)</keyword><keyword weight="0.51465">Sketch</keyword><keyword weight="0.0">Object oriented databases</keyword></keywords><publisher>North-Holland</publisher><abstract>Object oriented database systems are the focus of current research and development efforts. Yet, there is no commonly accepted object model, nor is it clear whether such a model can be developed. This paper informally reports on efforts to develop a formal framework that contains most features found in current object oriented database systems. The framework contain two parts. The first is a structural object model, including concepts such as structured objects, identity, and some form of inheritance. For this model, we explain the distinction between values and (abstract) objects, describe a system as a directed graph, and discuss declarative languages. The second part deals with high order concepts, such as classes and functions as data, methods, inheritance and encapsulation. This part is a sketch, and leaves many issues unresolved.</abstract></paper>
<paper id="13244546"><title>Design of a self-evolving decision support system</title><year>1987</year><authors><author org="University of Illinois at Urbana Champaign;" id="2777020689">Ting-Peng Liang</author><author org="University of Pennsylvania" id="2127260773">Christopher V. Jones</author></authors><n_citation>20</n_citation><doc_type>Journal</doc_type><references><reference>25412251</reference><reference>175710610</reference><reference>1583141478</reference><reference>2031320978</reference><reference>2051279338</reference><reference>2055521902</reference><reference>2120958963</reference><reference>2402153121</reference></references><venue id="9954729" type="J">Journal of Management Information Systems</venue><doi>10.1080/07421222.1987.11517786</doi><keywords><keyword weight="0.51756">Information system</keyword><keyword weight="0.47052">Software engineering</keyword><keyword weight="0.46376">Computer science</keyword><keyword weight="0.51988">Expert system</keyword><keyword weight="0.58429">Decision support system</keyword><keyword weight="0.45906">Operations research</keyword><keyword weight="0.45381">Knowledge management</keyword><keyword weight="0.44743">Premise</keyword><keyword weight="0.45486">Software</keyword><keyword weight="0.54242">Systems development life cycle</keyword><keyword weight="0.53594">Knowledge base</keyword><keyword weight="0.46518">Hierarchy</keyword></keywords><publisher>M. E. Sharpe, Inc.</publisher><abstract>Abstract:The paper presents a self-evolving approach to decision support systems (dss) design. The basic premise of this approach is that a dss should be aware of how it is being used and, then, automatically adapt to the evolution of its users. With self-evolving capabilities, a dss will be able to provide a flexible menu hierarchy and a dynamic user interface.The major difference between the self-evolving design and a dss developed by current approaches such as system development life cycle and user-involved evolutionary design is that the former has an extra component—the evolutionary mechanism—to control the evolution of the system. In order to develop self-evolving capabilities, the following three components must be developed: (1) a database of user profiles to keep track of related system usage data, (2) a knowledge base to store rules for determining appropriate system default policy, and (3) a control mechanism to control the evolution of the system.</abstract></paper>
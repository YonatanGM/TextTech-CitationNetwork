<paper id="1971388424"><title>Value dependence graphs: representation without taxation</title><year>1994</year><authors><author org="Microsoft Research One Microsoft Way Redmond, WA" id="2204613330">Daniel Weise</author><author org="Microsoft Research One Microsoft Way Redmond, WA" id="2165679527">Roger F. Crew</author><author org="Microsoft Research One Microsoft Way Redmond, WA" id="2235702021">Michael Ernst</author><author org="Microsoft Research One Microsoft Way Redmond, WA" id="203879161">Bjarne Steensgaard</author></authors><n_citation>108</n_citation><doc_type>Conference</doc_type><references><reference>1491178396</reference><reference>1506151672</reference><reference>1579170619</reference><reference>1980241249</reference><reference>1986583217</reference><reference>1988503504</reference><reference>1988949749</reference><reference>1990087033</reference><reference>2008441811</reference><reference>2010452422</reference><reference>2025317174</reference><reference>2037545122</reference><reference>2039805140</reference><reference>2044895797</reference><reference>2045818721</reference><reference>2054664018</reference><reference>2065826255</reference><reference>2076090418</reference><reference>2079573490</reference><reference>2082051985</reference><reference>2087086761</reference><reference>2101811680</reference><reference>2102890180</reference><reference>2109027606</reference><reference>2118911512</reference><reference>2144344516</reference><reference>2152885483</reference><reference>2162046779</reference><reference>2171532807</reference><reference>2293624369</reference></references><venue id="1160032607" type="C">Symposium on Principles of Programming Languages</venue><doi>10.1145/174675.177907</doi><keywords><keyword weight="0.45968">Programming language</keyword><keyword weight="0.61741">Control flow graph</keyword><keyword weight="0.44792">Computer science</keyword><keyword weight="0.53505">Control flow</keyword><keyword weight="0.46909">Algorithm</keyword><keyword weight="0.44018">Communication channel</keyword><keyword weight="0.60953">Redundant code</keyword><keyword weight="0.4661">Theoretical computer science</keyword><keyword weight="0.55329">Compiler</keyword><keyword weight="0.50733">Type inference</keyword><keyword weight="0.5491">Program analysis</keyword><keyword weight="0.5283">Data flow diagram</keyword></keywords><publisher>ACM</publisher><abstract>The value dependence graph (VDG) is a sparse dataflow-like representation that simplifies program analysis and transformation. It is a functional representation that represents control flow as data flow and makes explicit all machine quantities, such as stores and I/O channels. We are developing a compiler that builds a VDG representing a program, analyzes and transforms the VDG, then produces a control flow graph (CFG) [ASU86] from the optimized VDG. This framework simplifies transformations and improves upon several published results. For example, it enables more powerful code motion than [CLZ86, FOW87], eliminates as many redundancies as [AWZ88, RWZ88] (except for redundant loops), and provides important information to the code scheduler [BR91]. We exhibit a fast, one-pass method for elimination of partial redundancies that never performs redundant code motion [KFS92, DS93] and is simpler than the classical [MR79, Dha91] or SSA [RWZ88] methods. These results accrue from eliminating the CFG from the analysis/transformation phases and using demand dependences in preference to control dependences.</abstract></paper>
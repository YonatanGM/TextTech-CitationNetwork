<paper id="1517943782"><title>UML collaboration diagrams and their transformation to java</title><year>1999</year><authors><author org="University of Paderborn, Dept. of Computer Science, Paderborn, Germany" id="2136680303">Gregor Engels</author><author org="SAP AG, Lo. Dev. PP-PI, Walldorf, Germany#TAB#" id="2287295420">Roland HÃ¼cking</author><author org="University of Paderborn, Dept. of Computer Science, Paderborn, Germany" id="2134847361">Stefan Sauer</author><author org="University of Paderborn, Dept. of Computer Science, Paderborn, Germany" id="2101535396">Annika Wagner</author></authors><n_citation>53</n_citation><doc_type>Journal</doc_type><references><reference>1998017916</reference><reference>2121163444</reference><reference>2127447375</reference><reference>2164827830</reference></references><venue id="106296714" type="J">Lecture Notes in Computer Science</venue><doi>10.1007/3-540-46852-8_34</doi><keywords><keyword weight="0.46812">Programming language</keyword><keyword weight="0.4533">Computer science</keyword><keyword weight="0.55624">State diagram</keyword><keyword weight="0.57049">Code generation</keyword><keyword weight="0.63848">Communication diagram</keyword><keyword weight="0.64753">Story-driven modeling</keyword><keyword weight="0.54719">Java</keyword><keyword weight="0.54782">Metamodeling</keyword><keyword weight="0.63472">Class diagram</keyword><keyword weight="0.63324">Interaction overview diagram</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>UML provides a variety of diagram types for specifying both the structure and the behavior of a system. During the development process, models specified by use of these diagram types have to be transformed into corresponding code. In the past, mainly class diagrams and state diagrams have been considered for an automatic code generation. In this paper, we focus on collaboration diagrams. As an important prerequisite for a consistent transformation into Java code, we first provide methodical guidelines on how to deploy collaboration diagrams to model functional behavior. This understanding yields a refined meta model and forms the base for the definition of a transformation algorithm. The automatically generated Java code fragments build a substantial part of the functionality and prevent the loss of important information during the transition from a model to its implementation.</abstract></paper>
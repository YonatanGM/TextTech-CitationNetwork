<paper id="1572988071"><title>Supporting Unanticipated Dynamic Adaptation of Application Behaviour</title><year>2002</year><authors><author org="*Trinity College, Dublin." id="2044153384">Barry Redmond</author><author org="*Trinity College, Dublin." id="1944145189">Vinny Cahill</author></authors><n_citation>103</n_citation><doc_type>Conference</doc_type><references><reference>1497308906</reference><reference>1508763736</reference><reference>1509514020</reference><reference>1526385399</reference><reference>1531578956</reference><reference>1557685493</reference><reference>1574162635</reference><reference>1601653334</reference><reference>1606614601</reference><reference>1610570299</reference><reference>1657706103</reference><reference>2123672134</reference><reference>2911646362</reference></references><venue id="1177184315" type="C">European Conference on Object-Oriented Programming</venue><doi>10.1007/3-540-47993-7_9</doi><keywords><keyword weight="0.47718">Programmer</keyword><keyword weight="0.44687">Programming language</keyword><keyword weight="0.4818">Object-oriented programming</keyword><keyword weight="0.49309">Adaptive system</keyword><keyword weight="0.47495">Source code</keyword><keyword weight="0.44565">Computer science</keyword><keyword weight="0.52105">Separation of concerns</keyword><keyword weight="0.5068">Interpreted language</keyword><keyword weight="0.48549">Software development</keyword><keyword weight="0.48674">Debugging</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The need to dynamically modify running applications arises in systems that must adapt to changes in their environment, in updating longrunning systems that cannot be halted and restarted, and in monitoring and debugging systems without the need to recompile and restart them. Relatively few architectures have explored the meaning and possibilities of applying behavioural modifications to already running applications without static preparation of the application. The desirable characteristics of an architecture for dynamic modification include support for non-invasive association of new behaviour with the application, support for modular reusable components encapsulating the new behaviour and support for dynamic association (and deassociation) of new behaviour with any class or object of the application. The Iguana/J architecture explores unanticipated dynamic modification, and demonstrates how these characteristics may be supported in an interpreted language without extending the language, without a preprocessor, and without requiring the source code of the application. This paper describes the Iguana/J programmeru0027s model and how it addresses some acknowledged issues in dynamic adaptation and separation of concerns, describes how Iguana/J is implemented, and gives examples of applying Iguana/J.</abstract></paper>
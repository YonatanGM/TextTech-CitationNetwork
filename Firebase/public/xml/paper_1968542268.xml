<paper id="1968542268"><title>Modular verification of collaboration-based software designs</title><year>2001</year><authors><author org="Dept of Computer Science, Worcester Polytechnic Institute, Worcester, MA" id="1254469007">Kathi Fisler</author><author org="Computer Science Department Brown University, Providence, RI#TAB#" id="2133340784">Shriram Krishnamurthi</author></authors><n_citation>68</n_citation><doc_type>Conference</doc_type><references><reference>1542895223</reference><reference>1581604070</reference><reference>1585262231</reference><reference>1595657196</reference><reference>1974986814</reference><reference>2009965218</reference><reference>2015077407</reference><reference>2022373880</reference><reference>2023546887</reference><reference>2067293385</reference><reference>2077318760</reference><reference>2077830885</reference><reference>2080648611</reference><reference>2115703981</reference><reference>2117189826</reference><reference>2117659504</reference><reference>2135274583</reference><reference>2138363365</reference><reference>2146262217</reference><reference>2148868862</reference><reference>2164532179</reference><reference>2167500728</reference><reference>2169934995</reference><reference>2340735175</reference><reference>2480511253</reference><reference>2913459036</reference></references><venue id="1199533187" type="C">Foundations of Software Engineering</venue><doi>10.1145/503209.503231</doi><keywords><keyword weight="0.51749">Model checking</keyword><keyword weight="0.46448">Systems engineering</keyword><keyword weight="0.47159">Software engineering</keyword><keyword weight="0.4688">Computer science</keyword><keyword weight="0.45641">Theoretical computer science</keyword><keyword weight="0.51456">Software</keyword><keyword weight="0.54129">Modular design</keyword><keyword weight="0.51842">Software architecture</keyword><keyword weight="0.57632">High-level verification</keyword><keyword weight="0.57903">Software construction</keyword><keyword weight="0.56775">Software verification and validation</keyword><keyword weight="0.59008">Software verification</keyword></keywords><publisher>ACM</publisher><abstract>Most existing modular model checking techniques betray their hardware roots: they assume that modules compose in parallel. In contrast, collaboration-based software designs, which have proven very successful in several domains, are sequential in the simplest case. Most interesting collaboration-based designs are really quasi-sequential compositions of parallel compositions. These designs demand and inspire new verification techniques. This paper presents algorithms that exploit the softwareu0027s modular decomposition to verify collaboration-based designs. Our technique can verify most properties locally in the collaborations; we also characterize when a global state space construction is unavoidable. We have validated our proposal by testing it on several designs.</abstract></paper>
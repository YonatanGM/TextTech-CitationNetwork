<paper id="1499765533"><title>Interprocedural Constant Propagation using Dependence Graphs and a Data-Flow Model</title><year>1994</year><authors><author org="(Loyola College in Maryland)" id="1918094245">David Binkley</author></authors><n_citation>25</n_citation><doc_type>Conference</doc_type><references><reference>1491178396</reference><reference>1966449927</reference><reference>1988503504</reference><reference>1997493115</reference><reference>2016558072</reference><reference>2034579607</reference><reference>2043555680</reference><reference>2064625489</reference><reference>2076090418</reference><reference>2080973181</reference><reference>2102890180</reference><reference>2124153277</reference><reference>2135736783</reference><reference>2143659699</reference><reference>2144344516</reference><reference>2159558457</reference></references><venue id="1162239172" type="C">Compiler Construction</venue><doi>10.1007/3-540-57877-3_25</doi><keywords><keyword weight="0.43171">Discrete mathematics</keyword><keyword weight="0.61678">Program Dependence Graph</keyword><keyword weight="0.41936">Combinatorics</keyword><keyword weight="0.50237">Line graph</keyword><keyword weight="0.58446">Control flow graph</keyword><keyword weight="0.50938">Graph property</keyword><keyword weight="0.44805">Computer science</keyword><keyword weight="0.46219">Theoretical computer science</keyword><keyword weight="0.5336">Compiled language</keyword><keyword weight="0.51401">Compiler</keyword><keyword weight="0.50978">Symbolic execution</keyword><keyword weight="0.51525">Dead code</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Aggressive compilers employ a larger number of well understood optimizations in the hope of improving compiled code quality. Unfortunately, these optimizations require a variety of intermediate program representations. A first step towards unifying these optimizations to a common intermediate representation is described. The representation chosen is the program dependence graph, which captures both control-flow and data-flow information from a program.</abstract></paper>
<paper id="1541858096"><title>Improved Utilization and Responsiveness with Gang Scheduling</title><year>1997</year><authors><author org="The Hebrew Univ. of Jerusalem" id="2137277626">Dror G. Feitelson</author><author org="Lawrence Livermore #N#National Laboratory" id="2151048582">Morris A. Jette</author></authors><n_citation>176</n_citation><doc_type>Conference</doc_type><references><reference>48700391</reference><reference>1501479579</reference><reference>1520162964</reference><reference>1575773008</reference><reference>1582785971</reference><reference>1585314083</reference><reference>1589576271</reference><reference>1599248213</reference><reference>1603445711</reference><reference>1605746882</reference><reference>1684247715</reference><reference>1881074592</reference><reference>1968346298</reference><reference>1986053068</reference><reference>1987340991</reference><reference>1995070612</reference><reference>2000419465</reference><reference>2018007365</reference><reference>2029804882</reference><reference>2076726046</reference><reference>2094587335</reference><reference>2099413756</reference><reference>2141704113</reference><reference>2150074609</reference><reference>2164502111</reference><reference>2174818301</reference></references><venue id="1122827389" type="C">Job Scheduling Strategies for Parallel Processing</venue><doi>10.1007/3-540-63574-2_24</doi><keywords><keyword weight="0.48384">Preemption</keyword><keyword weight="0.62839">Fair-share scheduling</keyword><keyword weight="0.46648">Supercomputer</keyword><keyword weight="0.42248">Computer science</keyword><keyword weight="0.62799">Coscheduling</keyword><keyword weight="0.52425">Scheduling (computing)</keyword><keyword weight="0.6913">Gang scheduling</keyword><keyword weight="0.41899">Real-time computing</keyword><keyword weight="0.50714">Schedule</keyword><keyword weight="0.60589">Dynamic priority scheduling</keyword><keyword weight="0.42697">Distributed computing</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>Most commercial multicomputers use space-slicing schemes in which each scheduling decision has an unknown impact on the future: should a job be scheduled, risking that it will block other larger jobs later, or should the processors be left idle for now in anticipation of future arrivals? This dilemma is solved by using gang scheduling, because then the impact of each decision is limited to its time slice, and future arrivals can be accommodated in other time slices. This added flexibility is shown to improve overall system utilization and responsiveness. Empirical evidence from using gang scheduling on a Cray T3D installed at Lawrence Livermore National Lab corroborates these results, and shows conclusively that gang scheduling can be very effective with current technology.</abstract></paper>
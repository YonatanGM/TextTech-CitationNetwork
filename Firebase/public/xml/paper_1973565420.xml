<paper id="1973565420"><title>Software component search</title><year>1996</year><authors><author org="University of California at San Diego Lajolla" id="2062581780">Joseph A. Goguen</author><author org="McClellan Air Force Base, Sacramento," id="2303843592">Doan Nguyen</author><author org="SRI International, Menlo Park," id="2141313922">Jos√© Meseguer</author><author org="Naval Postgraduate Sch., Monterey" id="219238218">Luqi</author><author org="California State University-Sacramento******" id="2148170066">Du Zhang</author><author org="Naval Postgraduate Sch., Monterey" id="2135164174">Valdis Berzins</author></authors><n_citation>25</n_citation><doc_type>Journal</doc_type><references><reference>41271454</reference><reference>1538599224</reference><reference>1541153481</reference><reference>1740437405</reference><reference>1965037638</reference><reference>1975255815</reference><reference>2029176884</reference><reference>2048769143</reference><reference>2077592849</reference><reference>2090855673</reference><reference>2091007968</reference><reference>2114767673</reference><reference>2136719335</reference><reference>2147519594</reference><reference>2165871256</reference><reference>2398663808</reference><reference>2420370654</reference><reference>2658295792</reference></references><venue id="180847057" type="J">Journal of Systems Integration</venue><doi>10.1007/BF02262753</doi><keywords><keyword weight="0.55673">Algebraic specification</keyword><keyword weight="0.50144">Notation</keyword><keyword weight="0.47361">Programming language</keyword><keyword weight="0.42407">Systems engineering</keyword><keyword weight="0.49848">Ranking</keyword><keyword weight="0.47375">Computer science</keyword><keyword weight="0.47194">Theoretical computer science</keyword><keyword weight="0.51221">Software</keyword><keyword weight="0.51954">Rewriting</keyword><keyword weight="0.54556">Component-based software engineering</keyword><keyword weight="0.50311">Search problem</keyword><keyword weight="0.55352">Software development</keyword></keywords><publisher>Springer Science and Business Media LLC</publisher><abstract>An important problem in software development is to make better use of software libraries by improving the search and retrieval process, that is, by making it easier to find the few components you may want among the many you do not want. This paper suggests some ideas to improve this process: (1) Associate analgebraic specification with each software component; these specifications should include complete syntactic information, but need have onlypartial semantic information. (2) User queries consist of syntactic declarations plus results forsample executions. (3) User queries may be posed in standard programming notation, which is then automatically translated into algebraic notation. (4) Search is organized asranked multi-level filtering, where each level yields aranked set of partial matches. (5) Early stages of filtering narrow the search space by using computationally simple procedures, such as checking that the number of types is adequate. (6) Middle levels may findpartial signature matches. (7) Pre-computedcatalogues (i.e., indexes) can speed up early and middle level filtering. (8) Semantic information is used in a final filter withterm rewriting, but complete verification is not attempted. (9) The series of filters is implementedincrementally, so as to backtrack to lower ranked components in case of failure. This approach avoids the need for complex theorem proving, and does not require any knowledge of algebraic specification from the user. Moreover, it does not require either specifications or queries to be complete or even fully correct, because it yields partial matches ranked by how well they fit the query. The paper concludes with a description of some preliminary experiments and some suggestions for further experiments.</abstract></paper>
<paper id="1978469611"><title>Algebraic laws for nondeterminism and concurrency</title><year>1985</year><authors><author org="University of Edinburgh, Edinburgh, Scotland," id="2094873031">Matthew Hennessy</author><author org="University of Edinburgh, Edinburgh, Scotland," id="2087817183">Robin Milner</author></authors><n_citation>1148</n_citation><doc_type>Journal</doc_type><references><reference>1539804543</reference><reference>1574129634</reference><reference>1576616200</reference><reference>1589421353</reference><reference>1973311427</reference><reference>2023808162</reference><reference>2062024564</reference><reference>2074756472</reference><reference>2137865376</reference></references><venue id="118992489" type="J">Journal of the ACM</venue><doi>10.1145/2455.2460</doi><keywords><keyword weight="0.44168">Discrete mathematics</keyword><keyword weight="0.43031">Combinatorics</keyword><keyword weight="0.47323">Simple extension</keyword><keyword weight="0.51242">Hennessyâ€“Milner logic</keyword><keyword weight="0.4873">Algebraic number</keyword><keyword weight="0.45904">Algebra</keyword><keyword weight="0.54171">Nondeterministic algorithm</keyword><keyword weight="0.56926">Concurrency</keyword><keyword weight="0.44239">Computer science</keyword><keyword weight="0.51174">Congruence (geometry)</keyword><keyword weight="0.48441">Semantics</keyword><keyword weight="0.53026">Recursion</keyword></keywords><publisher>ACM</publisher><abstract>Since a nondeterministic and concurrent program may, in general, communicate repeatedly with its environment, its meaning cannot be presented naturally as an input/output function (as is often done in the denotational approach to semantics). In this paper, an alternative is put forth. First, a definition is given of what it is for two programs or program parts to be equivalent for all observers; then two program parts are said to be observation congruent if they are, in all program contexts, equivalent. The behavior of a program part, that is, its meaning, is defined to be its observation congruence class. The paper demonstrates, for a sequence of simple languages expressing finite (terminating) behaviors, that in each case observation congruence can be axiomatized algebraically. Moreover, with the addition of recursion and another simple extension, the algebraic language described here becomes a calculus for writing and specifying concurrent programs and for proving their properties.</abstract></paper>
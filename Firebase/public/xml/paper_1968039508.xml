<paper id="1968039508"><title>Experiences building the open OODB query optimizer</title><year>1993</year><authors><author org="Texas Instruments" id="2651294325">Jos√© A. Blakeley</author><author org="University Of Colorado At Boulder" id="2271670569">William J. McKenna</author><author org="#N#Portland State University#N#" id="2284116839">Goetz Graefe</author></authors><n_citation>95</n_citation><doc_type>Conference</doc_type><references><reference>1491366049</reference><reference>1492804197</reference><reference>1524459778</reference><reference>1669847836</reference><reference>1965392376</reference><reference>1985464228</reference><reference>1994933468</reference><reference>1996688634</reference><reference>2001068989</reference><reference>2032831531</reference><reference>2087290458</reference><reference>2103036553</reference><reference>2136195851</reference><reference>2136623420</reference><reference>2146884585</reference><reference>2153329411</reference><reference>2336493585</reference></references><venue id="1175089206" type="C">International Conference on Management of Data</venue><doi>10.1145/170035.170080</doi><keywords><keyword weight="0.49839">Data modeling</keyword><keyword weight="0.46385">Data mining</keyword><keyword weight="0.47187">Programming language</keyword><keyword weight="0.50373">Logical connective</keyword><keyword weight="0.47805">Functional programming</keyword><keyword weight="0.47243">Computer science</keyword><keyword weight="0.54156">Path expression</keyword><keyword weight="0.47218">Theoretical computer science</keyword><keyword weight="0.46654">Operator (computer programming)</keyword><keyword weight="0.69043">Query optimization</keyword><keyword weight="0.59941">Sargable</keyword><keyword weight="0.51268">Data model</keyword><keyword weight="0.46033">Database</keyword></keywords><publisher>ACM</publisher><abstract>This paper reports our experiences building the query optimizer for TIu0027s Open OODB system. To the best of our knowledge, it is the first working object query optimizer to be based on a complete extensible optimization framework including logical algebra, execution algorithms, property enforcers, logical transformation rules, implementation rules, and selectivity and cost estimation. Our algebra incorporates a new materialize operator with its corresponding logical transformation and implementation rules that enable the optimization of path expressions. Initial experiments on queries obtained from the object query optimization literature demonstrate that our optimizer is able to derive plans that are as efficient as, and often substantially more efficient than, the plans generated by other query optimization strategies. These experiments demonstrate that our initial choices for populating each part of our optimization framework are reasonable. Our experience also shows that having a complete optimization framework is crucial for two reasons. First, it allows the optimizer to discover plans that cannot be revealed by exploring only the alternatives provided by the logical algebra and its transformations. Second, it helps and forces the database system designer to consider all parts of the framework and to maintain a good balance of choices when incorporating a new logical operator, execution algorithm, transformation rule, or implementation rule. The Open OODB query optimizer was constructed using the Volcano Optimizer Generator, demonstrating that this second-generation optimizer generator enables rapid development of efficient and effective query optimizers for non-standard data models and systems.</abstract></paper>
<paper id="144724653"><title>Static verification of dynamically detected program invariants: Integrating Daikon and ESC/Java</title><year>2001</year><authors><author org="MIT Lab for Computer Science 200 Technology Square, Cambridge, MA 02139, USA" id="2004925533">Jeremy W. Nimmer</author><author org="MIT Lab for Computer Science 200 Technology Square, Cambridge, MA 02139, USA" id="2235702021">Michael D. Ernst</author></authors><n_citation>94</n_citation><doc_type>Journal</doc_type><references><reference>18984239</reference><reference>68296798</reference><reference>1498946538</reference><reference>1546021725</reference><reference>1556247398</reference><reference>1561445823</reference><reference>1583826417</reference><reference>1848617919</reference><reference>1925475221</reference><reference>1971991620</reference><reference>1978367838</reference><reference>1983119041</reference><reference>1999138184</reference><reference>2000302396</reference><reference>2004865374</reference><reference>2007181618</reference><reference>2039549168</reference><reference>2039683780</reference><reference>2040060046</reference><reference>2042751794</reference><reference>2056055164</reference><reference>2070869623</reference><reference>2094160561</reference><reference>2096905893</reference><reference>2101665709</reference><reference>2103318645</reference><reference>2107119495</reference><reference>2107995193</reference><reference>2110846749</reference><reference>2111838219</reference><reference>2113186809</reference><reference>2134691366</reference><reference>2135274583</reference><reference>2147105902</reference><reference>2147543351</reference><reference>2149993502</reference><reference>2150580621</reference><reference>2159152974</reference><reference>2165026393</reference><reference>2166766372</reference><reference>2168230617</reference><reference>2168530252</reference><reference>2245429186</reference><reference>2295303622</reference><reference>2611515161</reference></references><venue id="50368787" type="J">Electronic Notes in Theoretical Computer Science</venue><doi>10.1016/S1571-0661(04)00256-7</doi><keywords><keyword weight="0.73993">ESC/Java</keyword><keyword weight="0.4762">Programming language</keyword><keyword weight="0.4609">Computer science</keyword><keyword weight="0.0">Java program</keyword><keyword weight="0.6813">Java annotation</keyword><keyword weight="0.40764">Invariant (mathematics)</keyword><keyword weight="0.69237">Java Modeling Language</keyword><keyword weight="0.0">Always true</keyword><keyword weight="0.6223">Java</keyword></keywords><publisher>Elsevier</publisher><abstract>Abstract This paper shows how to integrate two complementary techniques for manipulating program invariants: dynamic detection and static verification. Dynamic detection proposes likely invariants based on program executions, but the resulting properties are not guaranteed to be true over all possible executions. Static verification checks that properties are always true, but it can be difficult and tedious to select a goal and to annotate programs for input to a static checker. Combining these techniques overcomes the weaknesses of each: dynamically detected invariants can annotate a program or provide goals for static verification, and static verification can confirm properties proposed by a dynamic tool. We have integrated a tool for dynamically detecting likely program invariants, Daikon, with a tool for statically verifying program properties, ESC/Java. Daikon examines run-time values of program variables; it looks for patterns and relationships in those values, and it reports properties that are never falsified during test runs and that satisfy certain other conditions, such as being statistically justified. ESC/Java takes as input a Java program annotated with preconditions, postconditions, and other assertions, and it reports which annotations cannot be statically verified and also warns of potential runtime errors, such as null dereferences and out-of-bounds array indices. Our prototype system runs Daikon, inserts its output into code as ESC/Java annotations, and then runs ESC/Java, which reports unverifiable annotations. The entire process is completely automatic, though users may provide guidance in order to improve results if desired. In preliminary experiments, ESC/Java verified all or most of the invariants proposed by Daikon.</abstract></paper>
<paper id="1512248102"><title>The Theory and Practice of Transforming Call-by-need into Call-by-value</title><year>1980</year><authors><author org="University of Edinburgh," id="163000670">Alan Mycroft</author></authors><n_citation>173</n_citation><doc_type /><references><reference>1525140360</reference><reference>1991450942</reference><reference>2023299380</reference><reference>2043100293</reference><reference>2060148067</reference><reference>2075052434</reference></references><venue id="" type="">Proceedings of the Fourth 'Colloque International sur la Programmation' on International Symposium on Programming</venue><doi>10.1007/3-540-09981-6_19</doi><keywords><keyword weight="0.51044">Evaluation strategy</keyword><keyword weight="0.48107">Strictness analysis</keyword><keyword weight="0.45562">Programming language</keyword><keyword weight="0.55796">Program transformation</keyword><keyword weight="0.4522">Computer science</keyword><keyword weight="0.45197">Schema (psychology)</keyword><keyword weight="0.54466">Recursion</keyword><keyword weight="0.49585">Quotient graph</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Call-by-need (which is an equivalent but more efficient implementation of call-by-name for applicative languages) is quite expensive with current hardware and also does not permit full use of the tricks (such as memo functions and recursion removal) associated with the cheaper call-by-value. However the latter mechanism may fail to terminate for perfectly well-defined equations and also invalidates some program transformation schemata.</abstract></paper>
<paper id="1968942384"><title>Automatic transformation of series expressions into loops</title><year>1991</year><authors><author org="MIT Artificial Intelligence Labs., Cambridge, MA" id="2574801098">Richard C. Waters</author></authors><n_citation>39</n_citation><doc_type>Journal</doc_type><references><reference>1503052291</reference><reference>1509144055</reference><reference>1525140360</reference><reference>1535347731</reference><reference>1585022015</reference><reference>1655990431</reference><reference>1813547331</reference><reference>1982188882</reference><reference>1984646543</reference><reference>2008395018</reference><reference>2023223057</reference><reference>2023422725</reference><reference>2029046317</reference><reference>2029421624</reference><reference>2040302114</reference><reference>2046585568</reference><reference>2093716079</reference><reference>2097805327</reference><reference>2114761361</reference><reference>2120521451</reference><reference>2128743718</reference><reference>2133596900</reference><reference>2135736783</reference><reference>2157758640</reference><reference>2162873316</reference><reference>2172307690</reference><reference>2296541783</reference><reference>2296692502</reference></references><venue id="41449414" type="J">ACM Transactions on Programming Languages and Systems</venue><doi>10.1145/114005.102806</doi><keywords><keyword weight="0.54745">Common Lisp</keyword><keyword weight="0.47328">Programming language</keyword><keyword weight="0.53958">Expression (mathematics)</keyword><keyword weight="0.56837">Functional programming</keyword><keyword weight="0.4597">Computer science</keyword><keyword weight="0.46368">Theoretical computer science</keyword><keyword weight="0.54653">Compiler</keyword><keyword weight="0.54694">Preprocessor</keyword><keyword weight="0.5516">Data type</keyword><keyword weight="0.5193">Macro</keyword><keyword weight="0.55686">Automatic programming</keyword></keywords><publisher>ACM</publisher><abstract>The benefits of programming in a functional style are well known. In particular, algorithms that are expressed as compositions of functions operating on sequences/vectors/streams of data elements are easier to understand and modify than equivalent algorithms expressed as loops. Unfortunately, this kind of expression is not used anywhere near as often as it could be, for at least three reasons: (1) most programmers are less familiar with this kind of expression than with loops; (2) most programming languages provide poor support for this kind of expression; and (3) when support is provided, it is seldom effcient. In any programming language, the second and third problems can be largely solved by introducing a data type called series , a comprehensive set of procedures operating on series, and a preprocessor (or compiler extension) that automatically converts most series expressions into efficient loops. A set of restrictions specifies which series expressions can be optimized. If programmers stay within the limits imposed, they are guaranteed of high efficiency at all times. A common Lisp macro package supporting series has been in use for some time. A prototype demonnstrates that series can be straightforwardly supported in Pascal.</abstract></paper>
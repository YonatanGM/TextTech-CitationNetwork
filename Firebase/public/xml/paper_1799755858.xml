<paper id="1799755858"><title>A Type System for Bounded Space and Functional In-Place Update--Extended Abstract</title><year>2000</year><authors><author org="LFCS Edinburgh" id="2241022127">Martin Hofmann</author></authors><n_citation>39</n_citation><doc_type>Conference</doc_type><references><reference>1491698270</reference><reference>1562824671</reference><reference>1928448741</reference><reference>1971256104</reference><reference>1973858412</reference><reference>1977898832</reference><reference>1992868830</reference><reference>2006638707</reference><reference>2012968289</reference><reference>2055814018</reference><reference>2066550846</reference><reference>2086571520</reference><reference>2087875803</reference><reference>2093349705</reference><reference>2164039975</reference><reference>2170698790</reference></references><venue id="1136861413" type="C">European Symposium on Programming</venue><doi>10.1007/3-540-46425-5_11</doi><keywords><keyword weight="0.52209">Data structure</keyword><keyword weight="0.4747">Programming language</keyword><keyword weight="0.56106">Functional programming</keyword><keyword weight="0.46204">Computer science</keyword><keyword weight="0.53311">Correctness</keyword><keyword weight="0.51015">Linear space</keyword><keyword weight="0.46708">Theoretical computer science</keyword><keyword weight="0.50944">Compiler</keyword><keyword weight="0.51577">Heap (data structure)</keyword><keyword weight="0.52869">Proof-carrying code</keyword><keyword weight="0.51168">Linear logic</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We show how linear typing can be used to obtain functional programs which modify heap-allocated data structures in :[18],"present this both as a "design pattern" for writing C-code in a functional style and as a compilation process from linearly typed first-order functional programs into malloc()-free C :[47],"main technical result is the correctness of this :[56],"crucial innovation over previous linear typing schemes consists of the introduction of a resource type â‹„ which controls the number of constructor symbols such as cons in recursive definitions and ensures linear space while restricting expressive power surprisingly the space :[95],"efficiency brought about by the new typing scheme and the compilation into C can also be realised by with state-of-the-art optimising compilers for functional languages such as OCAML [15], the :[18],"present method provides guaranteed bounds on heap space which will be of use for applications such as languages for embedded systems or u0027proof carrying codeu0027 [18].</abstract></paper>
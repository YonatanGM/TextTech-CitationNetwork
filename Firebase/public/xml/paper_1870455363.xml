<paper id="1870455363"><title>Texas: An Efficient, Portable Persistent Store</title><year>1993</year><authors><author org="The University of Texas at Austin ," id="2105828834">Vivek Singhal</author><author org="The University of Texas at Austin ," id="1866663120">Sheetal V. Kakkad</author><author org="The University of Texas at Austin ," id="2166593280">Paul R. Wilson</author></authors><n_citation>139</n_citation><doc_type /><references><reference>1509600745</reference><reference>1597122400</reference><reference>1991259410</reference><reference>2001657718</reference><reference>2005907808</reference><reference>2028080565</reference><reference>2028917428</reference><reference>2048508645</reference><reference>2053986424</reference><reference>2076602346</reference><reference>2076878931</reference><reference>2082189801</reference><reference>2090723256</reference><reference>2102506488</reference><reference>2109485293</reference><reference>2159608022</reference><reference>2160460372</reference><reference>2161531345</reference><reference>2165971729</reference><reference>2411369279</reference></references><venue id="" type="">POS</venue><doi>10.1007/978-1-4471-3209-7_2</doi><keywords><keyword weight="0.57792">Address space</keyword><keyword weight="0.60751">Pointer (computer programming)</keyword><keyword weight="0.61604">Virtual memory</keyword><keyword weight="0.44662">Computer science</keyword><keyword weight="0.48394">Block (data storage)</keyword><keyword weight="0.49979">Garbage collection</keyword><keyword weight="0.60631">Page fault</keyword><keyword weight="0.54784">Software portability</keyword><keyword weight="0.64561">Pointer swizzling</keyword><keyword weight="0.46313">Operating system</keyword></keywords><publisher>Springer, London</publisher><abstract>Texas is a persistent storage system for C++, providing high performance while emphasizing simplicity, modularity and portability. A key component of the design is the use of pointer swizzling at page fault time, which exploits existing virtual memory features to implement large address spaces efficiently on stock hardware, with little or no change to existing compilers. Long pointers are used to implement an enormous address space, but are transparently converted to the hardware-supported pointer format when pages are loaded into virtual memory.</abstract></paper>
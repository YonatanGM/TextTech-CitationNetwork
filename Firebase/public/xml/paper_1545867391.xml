<paper id="1545867391"><title>Complexity of Concrete Type-Inference in the Presence of Exceptions</title><year>1998</year><authors><author org="Rutgers University" id="2760926782">Ramkrishna Chatterjee</author><author org="Rutgers University" id="2139647612">Barbara G. Ryder</author><author org="Siemens Corporate Research, Inc," id="2033631000">William Landi</author></authors><n_citation>27</n_citation><doc_type>Conference</doc_type><references><reference>1644882639</reference><reference>1911434165</reference><reference>1980468060</reference><reference>1985614269</reference><reference>2002771912</reference><reference>2009911326</reference><reference>2016558072</reference><reference>2053155313</reference><reference>2077102566</reference><reference>2080573945</reference><reference>2087612811</reference><reference>2091909330</reference><reference>2116098983</reference><reference>2127172188</reference><reference>2131135493</reference><reference>2145913834</reference><reference>2151360539</reference></references><venue id="1136861413" type="C">European Symposium on Programming</venue><doi>10.1007/BFb0053563</doi><keywords><keyword weight="0.5431">Pointer (computer programming)</keyword><keyword weight="0.45284">Programming language</keyword><keyword weight="0.51771">Object-oriented programming</keyword><keyword weight="0.43865">Computer science</keyword><keyword weight="0.57688">Dynamic dispatch</keyword><keyword weight="0.5385">Type inference</keyword><keyword weight="0.47629">Thread (computing)</keyword><keyword weight="0.44156">Theoretical computer science</keyword><keyword weight="0.48896">Symbolic execution</keyword><keyword weight="0.48551">Program analysis</keyword><keyword weight="0.4926">Java</keyword><keyword weight="0.42665">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Concrete type-inference for statically typed object-oriented programming languages (e.g., Java, C++) determines at each program point, those objects to which a reference may refer or a pointer may point during execution. A precise compile-time solution for this problem requires a flow-sensitive analysis. Our new complexity results for concrete type-inference distinguish the difficulty of the intraprocedural and interprocedural problem for languages with combinations of single-level types, exceptions with or without subtyping, and dynamic dispatch. Our results :[75],"first polynomial-time algorithm for concrete type-inference in the presence of exceptions, which handles Java without threads, and :[93],"that the above algorithm is always safe and provably precise on programs with single-level types, exceptions without subtyping, and without dynamic :[93],"that intraprocedural concrete type-inference problem with single-level :[115],"types and exceptions with subtyping is PSPACE-complete, while the interprocedural problem without dynamic dispatch is PSPACE-hard.</abstract></paper>
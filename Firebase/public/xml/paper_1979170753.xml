<paper id="1979170753"><title>Strong categorical datatypes II: a term logic for categorical programming</title><year>1995</year><authors><author org="Univ. of Calgary, Calgary, Alta, Canada#TAB#" id="2974355046">J. Robin B. Cockett</author><author org="Oregon Graduate Institute, Portland, OR#TAB#" id="2492215665">Dwight Spencer</author></authors><n_citation>30</n_citation><doc_type>Journal</doc_type><references><reference>326743114</reference><reference>1488646136</reference><reference>1519167703</reference><reference>1608714802</reference><reference>1987624682</reference><reference>1988932014</reference><reference>2010663699</reference><reference>2057292961</reference><reference>2105950068</reference><reference>2115617817</reference><reference>2164343886</reference><reference>2180914204</reference><reference>2913281688</reference></references><venue id="90727058" type="J">Theoretical Computer Science</venue><doi>10.1016/0304-3975(94)00099-5</doi><keywords><keyword weight="0.64569">Categorical logic</keyword><keyword weight="0.51632">System programming</keyword><keyword weight="0.45015">Programming language</keyword><keyword weight="0.5507">Categorical variable</keyword><keyword weight="0.55381">Combinatory logic</keyword><keyword weight="0.52483">Programming language implementation</keyword><keyword weight="0.42736">Discrete mathematics</keyword><keyword weight="0.4198">Combinatorics</keyword><keyword weight="0.44182">Algebra</keyword><keyword weight="0.51969">First-order logic</keyword><keyword weight="0.49646">Universal property</keyword><keyword weight="0.50243">Rule of inference</keyword><keyword weight="0.40275">Mathematics</keyword></keywords><publisher>Elsevier</publisher><abstract>Abstract This paper lifts earlier category-theoretic results on datatypes to the level of an abstract language suitable for categorical programming language implementation. The earlier work built a strongly normalizing categorical combinator reduction system based entirely on functorial strength which allows the distribution of context to the interior of datatypes. Here we declare inductive (initial) and coinductive (final) datatypes in a Hagino-Wraith style to provide an expressive computing environment. An inductive (resp. coinductive) datatype consists of a strong type-forming functor accompanied by (1) a collection of constructors (resp. destructors) and (2) a fold (resp. unfold) which is parametrized by state transformations to realize the appropriate universal property. The high complexity of programming exclusively in categorical notation (combinators) warrants the development of a friendlier language isomorphic to the distributive categorical setting. In this paper such a term logic, which is also the programming language of the charity programming system, is described. This logic is first-order and is dictated directly by the underlying categorical semantics. It embodies primitive inductive and coinductive principles which reflect the uniqueness properties of the fold and unfold combinators. Several basic progam equivalences are demonstrated to illustrate how these inductive and coinductive principles can be used.</abstract></paper>
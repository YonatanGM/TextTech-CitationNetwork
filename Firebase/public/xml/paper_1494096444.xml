<paper id="1494096444"><title>Dynamic Dependence in Term rewriting Systems and its Application to Program Slicing</title><year>1994</year><authors><author org="IBM T.J. Watson research center" id="2593155335">John Field</author><author org="CWI" id="2164566402">Frank Tip</author></authors><n_citation>23</n_citation><doc_type>Conference</doc_type><references><reference>343537745</reference><reference>1480790918</reference><reference>1543641760</reference><reference>1559686260</reference><reference>1575308494</reference><reference>1576042299</reference><reference>1603567390</reference><reference>1829244603</reference><reference>1975807602</reference><reference>1988503504</reference><reference>2003432901</reference><reference>2006468185</reference><reference>2027836624</reference><reference>2105135809</reference><reference>2128916862</reference><reference>2144344516</reference><reference>2147088720</reference><reference>2154940799</reference><reference>2162046779</reference><reference>2293624369</reference><reference>2912858146</reference><reference>2913158420</reference></references><venue id="2754504537" type="C">International Symposium on Programming Language Implementation and Logic Programming</venue><doi>10.1007/3-540-58402-1_29</doi><keywords><keyword weight="0.80821">Program slicing</keyword><keyword weight="0.4731">Programming language</keyword><keyword weight="0.45476">Computer science</keyword><keyword weight="0.52179">Slicing</keyword><keyword weight="0.53994">Rewriting</keyword><keyword weight="0.52256">Confluence</keyword><keyword weight="0.46854">Point of interest</keyword><keyword weight="0.47247">Semantics</keyword><keyword weight="0.51487">Debugging</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Program slicing is a useful technique for debugging, testing, and analyzing programs. A program slice consists of the parts of a program which (potentially) affect the values computed at some point of interest. With rare exceptions, program slices have hitherto been computed and defined in ad-hoc and language-specific ways. The principal contribution of this paper is to show that general and semantically well-founded notions of slicing and dependence can be derived in a simple, uniform way from term rewriting systems (TRSs). Our slicing technique is applicable to any language whose semantics is specified in TRS form. Moreover, we show that our method admits an efficient implementation.</abstract></paper>
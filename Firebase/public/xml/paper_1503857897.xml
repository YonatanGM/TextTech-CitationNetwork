<paper id="1503857897"><title>Set-Based Analysis of Reactive Infinite-State Systems</title><year>1998</year><authors><author org="Max Planck Institut für Informatik,#TAB#" id="2197030328">Witold Charatonik</author><author org="Max Planck Institut für Informatik,#TAB#" id="2284941451">Andreas Podelski</author></authors><n_citation>31</n_citation><doc_type>Conference</doc_type><references><reference>22002794</reference><reference>63829728</reference><reference>167696951</reference><reference>1524332517</reference><reference>1562833547</reference><reference>1589224558</reference><reference>1593983061</reference><reference>1795391326</reference><reference>1977601940</reference><reference>1987073197</reference><reference>1988808695</reference><reference>2022228153</reference><reference>2048355938</reference><reference>2049641148</reference><reference>2063727779</reference><reference>2076696436</reference><reference>2088126145</reference><reference>2114092850</reference><reference>2115656500</reference><reference>2268014521</reference></references><venue id="1159071770" type="C">Tools and Algorithms for Construction and Analysis of Systems</venue><doi>10.1007/BFb0054183</doi><keywords><keyword weight="0.63744">Computation tree logic</keyword><keyword weight="0.55165">Transition system</keyword><keyword weight="0.54973">Horn clause</keyword><keyword weight="0.56187">Model checking</keyword><keyword weight="0.44554">Computer science</keyword><keyword weight="0.57536">Automated theorem proving</keyword><keyword weight="0.4629">Theoretical computer science</keyword><keyword weight="0.58732">Program analysis</keyword><keyword weight="0.49154">Reactive system</keyword><keyword weight="0.48638">Rotation formalisms in three dimensions</keyword></keywords><publisher>Springer Berlin Heidelberg</publisher><abstract>We present an automated abstract verification method for infinite-state systems specified by logic programs (which are a uniform and intermediate layer to which diverse formalisms such as transition systems, pushdown processes and while programs can be mapped). We establish connections between: logic program semantics and CTL properties, set-based program analysis and pushdown processes, and also between model checking and constraint solving, viz. theorem proving. We show that set-based analysis can be used to compute supersets of the values of program variables in the states that satisfy a given CTL property.</abstract></paper>
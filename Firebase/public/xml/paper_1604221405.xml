<paper id="1604221405"><title>Application intrusion detection using language library calls</title><year>2001</year><authors><author org="Virginia Univ., Charlottesville, VA, USA" id="2974674927">A.K. Jones</author><author org="University of Virginia,," id="2480244986">Yu Lin</author></authors><n_citation>31</n_citation><doc_type>Conference</doc_type><references><reference>1941427975</reference><reference>2011604665</reference><reference>2128217000</reference><reference>2338717024</reference></references><venue id="1195398546" type="C">Annual Computer Security Applications Conference</venue><doi>10.1109/ACSAC.2001.991561</doi><keywords><keyword weight="0.58675">Host-based intrusion detection system</keyword><keyword weight="0.0">Intrusion</keyword><keyword weight="0.49407">Message authentication code</keyword><keyword weight="0.43821">Computer science</keyword><keyword weight="0.44061">Computer security</keyword><keyword weight="0.65633">Anomaly-based intrusion detection system</keyword><keyword weight="0.0">Intrusion prevention system</keyword><keyword weight="0.57448">System call</keyword><keyword weight="0.5883">Intrusion detection system</keyword><keyword weight="0.45917">Semantics</keyword></keywords><publisher>IEEE</publisher><abstract>Traditionally, intrusion detection systems detect intrusions at the operating system (OS) level. We explore the possibility of detecting intrusion at the application level by using rich application semantics. We use short sequences of language library calls as signatures. We consider library call signatures to be more application-oriented than system call signatures because they are a more direct reflection of application code. Most applications are written in a higher-level language with an associated support library such as C or C++. We hypothesize that library call signatures can be used to detect attacks that cause perturbation in the application code. We are hopeful that this technique will be amenable to detecting attacks that are carried out by internal intruders, who are viewed as legitimate users by an operating system.</abstract></paper>
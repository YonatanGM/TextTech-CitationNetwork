<paper id="1494981970"><title>A Basic Model of Typed Components</title><year>2000</year><authors><author org="Universidade Nova de Lisboa,#TAB#" id="2144826638">João Costa Seco</author><author org="Universidade Nova de Lisboa,#TAB#" id="2001121806">Luís Caires</author></authors><n_citation>91</n_citation><doc_type>Conference</doc_type><references><reference>1516097089</reference><reference>1529977394</reference><reference>1535444145</reference><reference>1591849443</reference><reference>1989493307</reference><reference>1993068529</reference><reference>1995549062</reference><reference>2022373880</reference><reference>2043261859</reference><reference>2048569219</reference><reference>2068625388</reference><reference>2070722084</reference><reference>2080648611</reference><reference>2083803628</reference><reference>2096213702</reference><reference>2115680394</reference><reference>2135785452</reference><reference>2165258104</reference><reference>2167500728</reference><reference>2610296873</reference></references><venue id="1177184315" type="C">European Conference on Object-Oriented Programming</venue><doi>10.1007/3-540-45102-1_6</doi><keywords><keyword weight="0.56929">Operational semantics</keyword><keyword weight="0.44261">Abstraction</keyword><keyword weight="0.4694">Programming language</keyword><keyword weight="0.58145">Object-oriented programming</keyword><keyword weight="0.55936">Object composition</keyword><keyword weight="0.45001">Computer science</keyword><keyword weight="0.50129">Type theory</keyword><keyword weight="0.45433">Theoretical computer science</keyword><keyword weight="0.48929">Parsing</keyword><keyword weight="0.47955">Java</keyword><keyword weight="0.56757">Scripting language</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>This paper studies specific language level abstractions for component-based programming. We propose a simple model which captures some basic ingredients--like explicit context dependence, dynamic binding and subtype polymorphism, late (dynamic) composition, and avoidance of inheritance in favor of object composition -- that several authors have defended to be central to black-box object-oriented component programming styles. The model is expressed by a core imperative typed calculus, in which components are first-class entities, and whose basic constructs enable the composition, scripting, instantiation and definition of atomic components. Some motivating programming examples are presented, and the operational semantics is shown to enjoy a type-safety property. We also discuss an extension to the Java language aimed at supporting the proposed model, and some implementation issues.</abstract></paper>
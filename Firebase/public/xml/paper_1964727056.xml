<paper id="1964727056"><title>An axiomatic proof technique for parallel programs I</title><year>1976</year><authors><author org="Computer Science Department, Cornell University, Ithaca, USA#TAB#" id="2019529423">Susan Owicki</author><author org="Department of Computer Science , Cornell University, Ithaca, USA#TAB#" id="1980295760">David Gries</author></authors><n_citation>867</n_citation><doc_type>Journal</doc_type><references><reference>1986658425</reference><reference>2022273990</reference><reference>2066305403</reference><reference>2100021838</reference><reference>2104055277</reference><reference>2107997147</reference><reference>2111706174</reference><reference>2113074643</reference><reference>2144738461</reference><reference>2542647517</reference></references><venue id="84409463" type="J">Acta Informatica</venue><doi>10.1007/BF00268134</doi><keywords><keyword weight="0.47483">Data structure</keyword><keyword weight="0.5107">Assignment</keyword><keyword weight="0.46328">Programming language</keyword><keyword weight="0.6545">Axiomatic semantics</keyword><keyword weight="0.44974">Computer science</keyword><keyword weight="0.47568">Axiom</keyword><keyword weight="0.59308">Correctness</keyword><keyword weight="0.53791">Deadlock</keyword><keyword weight="0.45598">Theoretical computer science</keyword><keyword weight="0.49791">Mutual exclusion</keyword><keyword weight="0.48009">Rule of inference</keyword></keywords><publisher>Springer, New York, NY</publisher><abstract>A language for parallel programming, with a primitive construct for synchronization and mutual exclusion, is presented. Hoareu0027s deductive system for proving partial correctness of sequential programs is extended to include the parallelism described by the language. The proof method lends insight into how one should understand and present parallel programs. Examples are given using several of the standard problems in the literature. Methods for proving termination and the absence of deadlock are also given.</abstract></paper>
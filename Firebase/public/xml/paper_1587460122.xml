<paper id="1587460122"><title>Combining Object-Oriented Analysis and Formal Description Techniques</title><year>1994</year><authors><author org="University of Stirling" id="2954094494">Ana M. D. Moreira</author><author org="University of Stirling" id="2170730531">Robert G. Clark</author></authors><n_citation>29</n_citation><doc_type>Conference</doc_type><references><reference>26566394</reference><reference>1499953177</reference><reference>1503973138</reference><reference>1555946950</reference><reference>1603788080</reference><reference>1702182592</reference><reference>1970495662</reference><reference>2041929143</reference><reference>2104452490</reference><reference>2110425399</reference><reference>2121372686</reference><reference>2157577995</reference></references><venue id="1177184315" type="C">European Conference on Object-Oriented Programming</venue><doi>10.1007/BFb0052191</doi><keywords><keyword weight="0.47574">Programming language</keyword><keyword weight="0.46159">Computer science</keyword><keyword weight="0.576">Object model</keyword><keyword weight="0.45401">Theoretical computer science</keyword><keyword weight="0.70611">Formal specification</keyword><keyword weight="0.6474">Object language</keyword><keyword weight="0.6655">Refinement</keyword><keyword weight="0.68582">Formal methods</keyword><keyword weight="0.64577">Software requirements specification</keyword><keyword weight="0.55241">Executable</keyword><keyword weight="0.65273">Formal verification</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The Rigorous Object-Oriented Analysis (ROOA) method provides a systematic development process by proposing a set of rules to be followed during the analysis phase. ROOA takes a set of informal requirements and an object model and produces a formal object-oriented analysis model that acts as a requirements specification. The resulting formal model integrates the static, dynamic and functional properties of a system in contrast to other object-oriented analysis methods which are informal and produce three separate models that are difficult to integrate and keep consistent. The model is expressed in LOTOS and provides a precise and unambiguous specification of a systemu0027s requirements. As the specification obtained is executable, prototyping can be used to check the conformance of the specification against the original requirements and to detect inconsistencies, omissions and ambiguities early in the development process.</abstract></paper>
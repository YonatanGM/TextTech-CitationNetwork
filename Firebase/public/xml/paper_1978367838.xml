<paper id="1978367838"><title>The synthesis of loop predicates</title><year>1974</year><authors><author org="Harvard Univ., and Xerox Palo Alto Research Center, Palo Alto, CA" id="2681783298">Ben Wegbreit</author></authors><n_citation>128</n_citation><doc_type>Journal</doc_type><references><reference>18230030</reference><reference>1489122955</reference><reference>1969077685</reference><reference>2079282627</reference></references><venue id="103482838" type="J">Communications of The ACM</venue><doi>10.1145/360827.360850</doi><keywords><keyword weight="0.43931">Boundary value problem</keyword><keyword weight="0.49287">Heuristic</keyword><keyword weight="0.46449">Programming language</keyword><keyword weight="0.4548">Computer science</keyword><keyword weight="0.52742">Automated theorem proving</keyword><keyword weight="0.46525">Theoretical computer science</keyword><keyword weight="0.44501">Predicate (grammar)</keyword></keywords><publisher>ACM</publisher><abstract>Current methods for mechanical program verification require a complete predicate specification on each loop. Because this is tedious and error prone, producing a program with complete, correct predicates is reasonably difficult and would be facilitated by machine assistance. This paper discusses techniques for mechanically synthesizing loop predicates. Two classes of techniques are considered: (1) heuristic methods which derive loop predicates from boundary conditions and/or partially specified inductive assertions: (2) extraction methods which use input predicates and appropriate weak interpretations to obtain certain classes of loop predicates by an evaluation on the weak interpretation.</abstract></paper>
<paper id="1592272620"><title>Type-Safe Delegation for Run-Time Component Adaptation</title><year>1999</year><authors><author org="Universität Bonn &gt;  &gt;  &gt;  &gt;" id="729669163">Günter Kniesel</author></authors><n_citation>134</n_citation><doc_type>Conference</doc_type><references><reference>1509514020</reference><reference>1529250287</reference><reference>1535444145</reference><reference>1544633123</reference><reference>1599062482</reference><reference>1868410565</reference><reference>1879619902</reference><reference>1892405650</reference><reference>1972575111</reference><reference>1977475024</reference><reference>1992050254</reference><reference>1995549062</reference><reference>2012408028</reference><reference>2021400450</reference><reference>2094282293</reference><reference>2132055297</reference><reference>2167500728</reference></references><venue id="1177184315" type="C">European Conference on Object-Oriented Programming</venue><doi>10.1007/3-540-48743-3_16</doi><keywords><keyword weight="0.5407">Object composition</keyword><keyword weight="0.45585">Computer science</keyword><keyword weight="0.52467">Compile time</keyword><keyword weight="0.61838">Common Component Architecture</keyword><keyword weight="0.52383">Interoperation</keyword><keyword weight="0.51838">Object model</keyword><keyword weight="0.52142">Link time</keyword><keyword weight="0.58437">Component-based software engineering</keyword><keyword weight="0.57846">Delegation</keyword><keyword weight="0.46436">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The aim of component technology is the replacement of large monolithic applications with sets of smaller software components, whose particular functionality and interoperation can be adapted to usersu0027 needs. However, the adaptation mechanisms of component software are still limited. Most proposals concentrate on adaptations that can be achieved either at compile time or at link time. Current support for dynamic component adaptation, i.e. unanticipated, incremental modifications of a component system at run-time, is not :[74],"paper proposes object-based inheritance (also known as delegation) as a complement to purely forwarding-based object composition. It presents a type-safe integration of delegation into a class-based object model and shows how it overcomes the problems faced by forwarding-based component interaction, how it supports independent extensibility of components and unanticipated, dynamic component adaptation.</abstract></paper>
<paper id="1494340314"><title>Formalising Behaviour Preserving Program Transformations</title><year>2002</year><authors><author org="Vrije Universiteit Brussel" id="1986880241">Tom Mens</author><author org="UNIVERSITEIT ANTWERPEN" id="2030505841">Serge Demeyer</author><author org="UNIVERSITEIT ANTWERPEN" id="2113706355">Dirk Janssens</author></authors><n_citation>117</n_citation><doc_type>Conference</doc_type><references><reference>1482012210</reference><reference>1503948619</reference><reference>1523742478</reference><reference>1532283544</reference><reference>1535958549</reference><reference>1574796876</reference><reference>1593874741</reference><reference>1706136589</reference><reference>1766987220</reference><reference>1839232938</reference><reference>2013060213</reference><reference>2031246684</reference><reference>2068536883</reference><reference>2075017593</reference><reference>2087502867</reference><reference>2127455123</reference><reference>2153887189</reference><reference>2172168118</reference><reference>2915014422</reference></references><venue id="1202305278" type="C">International Conference on Graph Transformation</venue><doi>10.1007/3-540-45832-8_22</doi><keywords><keyword weight="0.52403">Graph theory</keyword><keyword weight="0.54439">Program transformation</keyword><keyword weight="0.45981">Programming language</keyword><keyword weight="0.49584">Object-oriented programming</keyword><keyword weight="0.44588">Computer science</keyword><keyword weight="0.45301">Theoretical computer science</keyword><keyword weight="0.51756">Formal specification</keyword><keyword weight="0.62269">Graph rewriting</keyword><keyword weight="0.52735">Rewriting</keyword><keyword weight="0.67476">Code refactoring</keyword><keyword weight="0.56422">Graph (abstract data type)</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The notion of refactoring --transforming the source-code of an object-oriented program without changing its external behaviour-- has increased the need for a precise definition of refactorings and their properties. This paper introduces a graph representation of those aspects of the source code that should be preserved by a refactoring, and graph rewriting rules as a formal specification for the refactoring transformations themselves. To this aim, we use type graphs, forbidden subgraphs, embedding mechansims, negative application conditions and controlled graph rewriting. We show that it is feasible to reason about the effect of refactorings on object-oriented programs independently of the programming language being used. This is crucial for the next generation of refactoring tools.</abstract></paper>
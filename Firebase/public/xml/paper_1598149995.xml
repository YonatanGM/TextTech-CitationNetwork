<paper id="1598149995"><title>Toward a common component architecture for high-performance scientific computing</title><year>1999</year><authors><author org="Sandia National Laboratories; Albuquerque NM USA" id="2812633665">R. Armstrong</author><author org="" id="2646491152">A. Geist</author><author org="" id="2004855157">K. Keahey</author><author org="" id="2659490180">S. Kohn</author><author org="" id="672252194">L. McInnes</author><author org="" id="1995003537">S. Parker</author><author org="" id="2627633268">B. Smolinski</author></authors><n_citation>371</n_citation><doc_type>Conference</doc_type><references><reference>1515098175</reference><reference>1531011076</reference><reference>1557179596</reference><reference>1644882639</reference><reference>1922608927</reference><reference>1964979964</reference><reference>1965374402</reference><reference>1992315276</reference><reference>2010268137</reference><reference>2111161006</reference><reference>2116001007</reference><reference>2128177747</reference><reference>2156016715</reference><reference>2167500728</reference><reference>2646001950</reference></references><venue id="1141854641" type="C">High Performance Distributed Computing</venue><doi>10.1109/HPDC.1999.805289</doi><keywords><keyword weight="0.48311">Multithreading</keyword><keyword weight="0.49473">Work in process</keyword><keyword weight="0.46376">Computer science</keyword><keyword weight="0.51631">Interoperability</keyword><keyword weight="0.60667">Common Component Architecture</keyword><keyword weight="0.54054">Interface description language</keyword><keyword weight="0.51164">Software architecture</keyword><keyword weight="0.48127">Open system (systems theory)</keyword><keyword weight="0.49236">Scalability</keyword><keyword weight="0.46625">Distributed computing</keyword></keywords><publisher>IEEE</publisher><abstract>Describes work in progress to develop a standard for interoperability among high-performance scientific components. This research stems from the growing recognition that the scientific community needs to better manage the complexity of multidisciplinary simulations and better address scalable performance issues on parallel and distributed architectures. The driving force for this is the need for fast connections among components that perform numerically intensive work and for parallel collective interactions among components that use multiple processes or threads. This paper focuses on the areas we believe are most crucial in this context, namely an interface definition language that supports scientific abstractions for specifying component interfaces and a port connection model for specifying component interactions.</abstract></paper>
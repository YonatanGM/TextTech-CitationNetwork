<paper id="1964718922"><title>Some Deadlock Properties of Computer Systems</title><year>1972</year><authors><author org="Department of Computer Science and Computer Systems Research Group, University of Toronto, Toronto, Ontario, Canada" id="2982865463">Richard C. Holt</author></authors><n_citation>368</n_citation><doc_type>Journal</doc_type><references><reference>2039804807</reference><reference>2059881462</reference><reference>2104508180</reference><reference>2106001218</reference><reference>2121349710</reference><reference>2178204534</reference><reference>2294580796</reference></references><venue id="157921468" type="J">ACM Computing Surveys</venue><doi>10.1145/356603.356607</doi><keywords><keyword weight="0.72191">Edge chasing</keyword><keyword weight="0.65246">Concurrency control</keyword><keyword weight="0.47081">Computer science</keyword><keyword weight="0.71505">Deadlock</keyword><keyword weight="0.52405">Real-time operating system</keyword><keyword weight="0.46936">Theoretical computer science</keyword><keyword weight="0.76789">Deadlock prevention algorithms</keyword><keyword weight="0.0">Graph model</keyword><keyword weight="0.46757">Distributed computing</keyword></keywords><publisher>ACM</publisher><abstract>Several examples of deadlock occurring in present day computer systems are given Next, there is a discussion of the strategms which can be ~sed to deal with the deadlock problem A theory of computer systems is developed so that the terms "process" and "deadlock" can be defined. "Reusable resources" are introduced to model objects that are shared among processes, and "consumable resources" are introduced to model signals or messages passed among processes. Then a rumple graph model of computer systems m developed, and its deadlock propertms are investigated This graph model unifies a number of previous results, leads to efficient deadlock detection and prevenUon algorithms, and ~s useful for teaching purposes.</abstract></paper>
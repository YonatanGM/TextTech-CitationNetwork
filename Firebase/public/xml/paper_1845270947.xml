<paper id="1845270947"><title>Fundamentals of Generic Programming</title><year>1998</year><authors><author org="Silicon Graphics, Inc." id="2700439038">James C. Dehnert</author><author org="Silicon Graphics, Inc." id="2665557083">Alexander A. Stepanov</author></authors><n_citation>19</n_citation><doc_type /><references><reference>2154441371</reference><reference>2611598995</reference><reference>2914964273</reference></references><venue id="" type="">Selected Papers from the International Seminar on Generic Programming</venue><doi>10.1007/3-540-39953-4_1</doi><keywords><keyword weight="0.47151">Theoretical computer science</keyword><keyword weight="0.54051">Operator (computer programming)</keyword><keyword weight="0.57215">Generic programming</keyword><keyword weight="0.498">Semantics</keyword><keyword weight="0.41999">Mathematics</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Generic programming depends on the decomposition of programs into components which may be developed separately and combined arbitrarily, subject only to well-defined interfaces. Among the interfaces of interest, indeed the most pervasively and unconsciously used, are the fundamental operators common to all C++ built-in types, as extended to user-defined types; e.g., copy constructors, assignment, and equality. We investigate the relations which must hold among these operators to preserve consistency with their semantics for the built-in types and with the expectations of programmers. We can produce an axiomatization of these operators which yields the required consistency with built-in types, matches the intuitive expectations of programmers, and also reflects our underlying mathematical expectations.</abstract></paper>
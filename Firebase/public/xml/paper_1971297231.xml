<paper id="1971297231"><title>Finite representation of infinite query answers</title><year>1993</year><authors><author org="Kansas State Univ., Lawrence#TAB#" id="1973119209">Jan Chomicki</author><author org="Rutgers UNiv., New Brunswick, NJ#TAB#" id="152915441">Tomasz Imieli≈Ñski</author></authors><n_citation>62</n_citation><doc_type>Journal</doc_type><references><reference>151117432</reference><reference>192261927</reference><reference>203813422</reference><reference>1498119955</reference><reference>1527492779</reference><reference>1567856068</reference><reference>1572073643</reference><reference>1594295397</reference><reference>1601859976</reference><reference>1602772239</reference><reference>1902626857</reference><reference>1966748830</reference><reference>1969777579</reference><reference>1982644528</reference><reference>1989783863</reference><reference>1992810975</reference><reference>2000346568</reference><reference>2008276941</reference><reference>2020666986</reference><reference>2028737227</reference><reference>2046615742</reference><reference>2046778764</reference><reference>2049863790</reference><reference>2066989651</reference><reference>2076696436</reference><reference>2108911687</reference><reference>2111313539</reference><reference>2115656500</reference><reference>2124345097</reference><reference>2132063146</reference><reference>2153131284</reference><reference>2159808530</reference><reference>2161609549</reference><reference>2179367542</reference><reference>2585667143</reference></references><venue id="90119964" type="J">ACM Transactions on Database Systems</venue><doi>10.1145/151634.151635</doi><keywords><keyword weight="0.63957">Query optimization</keyword><keyword weight="0.4974">Complexity class</keyword><keyword weight="0.50619">Graph traversal</keyword><keyword weight="0.44697">Computer science</keyword><keyword weight="0.62006">Sargable</keyword><keyword weight="0.51262">Automated theorem proving</keyword><keyword weight="0.4664">Theoretical computer science</keyword><keyword weight="0.52075">Rewriting</keyword><keyword weight="0.6248">Datalog</keyword><keyword weight="0.41401">Database</keyword><keyword weight="0.50182">Mathematical logic</keyword></keywords><publisher>ACM</publisher><abstract>We define here a formal notion of finite representation of infinite query answers in logic programs. We apply this notion to Datalog nS programs may be infinite and consequently queries may have infinite answers. We present a method to finitely represent infinite least Herbrand models of Datalog nS program (and its underlying computational engine) can be forgotten. Given a query to be evaluated, it is easy to obtain from the relational specification finitely many answer substitutions that represent infinitely many answer substitutions to the query. The method involved is a combination of a simple, unificationless, computational mechanism (graph traversal, congruence closure, or term rewriting) and standard relational query evaluation methods. Second, a relational specification is effectively computable and its computation is no harder, in the sense of the complexity class, than answering yes-no queries. Our method is applicable to every range-restricted Datalog nS program. We also show that for some very simple non-Datalog nS logic programs, finite representations of query answers do not exist.</abstract></paper>
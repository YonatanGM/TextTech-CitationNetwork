<paper id="1562798600"><title>Mutation analysis testing for model transformations</title><year>2006</year><authors><author org="IRISA, Rennes, France#TAB#" id="328260536">Jean-Marie Mottu</author><author org="IRISA, Rennes, France#TAB#" id="2059819287">Benoit Baudry</author><author org="France Telecom R&amp;D - Lannion, France#TAB#" id="494248588">Yves Le Traon</author></authors><n_citation>74</n_citation><doc_type>Conference</doc_type><references><reference>1488331137</reference><reference>1570494899</reference><reference>1965070914</reference><reference>2049695835</reference><reference>2061227290</reference><reference>2104911885</reference><reference>2123812870</reference></references><venue id="2755158973" type="C">European conference on Model driven architecture-foundations and applications</venue><doi>10.1007/11787044_28</doi><keywords><keyword weight="0.5299">Procedural programming</keyword><keyword weight="0.62076">Model transformation</keyword><keyword weight="0.50739">Object-oriented programming</keyword><keyword weight="0.46554">Computer science</keyword><keyword weight="0.44944">Filter (signal processing)</keyword><keyword weight="0.46551">Theoretical computer science</keyword><keyword weight="0.656">Model transformation language</keyword><keyword weight="0.45879">Artificial intelligence</keyword><keyword weight="0.4909">Operator (computer programming)</keyword><keyword weight="0.48179">Test data</keyword><keyword weight="0.51799">Software development</keyword><keyword weight="0.45555">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>In MDE, model transformations should be efficiently tested so that it may be used and reused safely. Mutation analysis is an efficient technique to evaluate the quality of test data, and has been extensively studied both for procedural and object-oriented languages. In this paper, we study how it can be adapted to model oriented programming. Since no model transformation language has been widely accepted today, we propose generic fault models that are related to the model transformation process. First, we identify abstract operations that constitute this process: model navigation, modelu0027s elements filtering, output model creation and input model modification. Then, we propose a set of specific mutation operators which are directly inspired from these operations. We believe that these operators are meaningful since a large part of the errors in a transformation are due to the manipulation of complex models regardless of the concrete implementation language.</abstract></paper>
<paper id="1528309244"><title>Verification for Java's Reentrant Multithreading Concept</title><year>2002</year><authors><author org="Christian-Albrechts-Universität zu Kiel," id="2473430109">Erika Ábrahám-Mumm</author><author org="Utrecht University" id="2182928395">Frank S. de Boer</author><author org="Christian-Albrechts-Universität zu Kiel," id="2659041210">Willem P. de Roever</author><author org="Christian-Albrechts-Universität zu Kiel," id="2100766981">Martin Steffen</author></authors><n_citation>49</n_citation><doc_type>Conference</doc_type><references><reference>219793899</reference><reference>1483157468</reference><reference>1489990994</reference><reference>1507766766</reference><reference>1573258001</reference><reference>1576822203</reference><reference>1644882639</reference><reference>1918806322</reference><reference>1964727056</reference><reference>1975586790</reference><reference>1984831616</reference><reference>1987693120</reference><reference>2108107923</reference><reference>2111619838</reference><reference>2111706174</reference><reference>2159609157</reference><reference>2169735850</reference><reference>2294505023</reference></references><venue id="1146600191" type="C">Foundations of Software Science and Computation Structure</venue><doi>10.1007/3-540-45931-6_2</doi><keywords><keyword weight="0.4708">Programming language</keyword><keyword weight="0.67482">Java annotation</keyword><keyword weight="0.45261">Computer science</keyword><keyword weight="0.69638">Java concurrency</keyword><keyword weight="0.66958">Real time Java</keyword><keyword weight="0.67276">Generics in Java</keyword><keyword weight="0.64032">strictfp</keyword><keyword weight="0.66122">Java Modeling Language</keyword><keyword weight="0.63818">Concurrent object-oriented programming</keyword><keyword weight="0.64329">Java</keyword><keyword weight="0.45081">Operating system</keyword><keyword weight="0.44749">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Besides the features of a class-based object-oriented language, Java integrates concurrency via its thread-classes, allowing for a multithreaded flow of control. the concurrency model offers coordination via lock-synchronization, and communication by synchronous message passing, including re-entrant method calls, and by instance variables shared among threads.To reason about multithreaded programs, we introduce in this paper an assertional proof method for JavaMT ("Multi-Threaded Java"), a small concurrent sublanguage of Java, covering the mentioned concurrency issues as well as the object-based core of Java, i.e., object creation, side effects, and aliasing, but leaving aside inheritance and subtyping.</abstract></paper>
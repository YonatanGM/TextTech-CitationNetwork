<paper id="1976808561"><title>A modular, polyvariant and type-based closure analysis</title><year>1997</year><authors><author org="Xinotech Research, Minneapolis, MN" id="2123599481">Anindya Banerjee</author></authors><n_citation>50</n_citation><doc_type>Conference</doc_type><references><reference>1487777477</reference><reference>1491178396</reference><reference>1553391613</reference><reference>1599217540</reference><reference>1631991832</reference><reference>1703087989</reference><reference>1974939942</reference><reference>2014387690</reference><reference>2016076634</reference><reference>2032137108</reference><reference>2043100293</reference><reference>2051328776</reference><reference>2065403304</reference><reference>2068711880</reference><reference>2118002698</reference><reference>2123727486</reference></references><venue id="1162793720" type="C">International Conference on Functional Programming</venue><doi>10.1145/258948.258951</doi><keywords><keyword weight="0.46678">Programming language</keyword><keyword weight="0.45263">Computer science</keyword><keyword weight="0.50346">Free variables and bound variables</keyword><keyword weight="0.48816">Inference</keyword><keyword weight="0.46344">Theoretical computer science</keyword><keyword weight="0.52146">Modular design</keyword><keyword weight="0.51412">Modularity</keyword></keywords><publisher>ACM</publisher><abstract>We observe that the principal typing property of a type system is the enabling technology for modularity and separate compilation [10]. We use this technology to formulate a modular and polyvariant closure analysis, based on the rank 2 intersection types annotated with control-flow information.Modularity manifests itself in a syntax-directed, annotated-type inference algorithm that can analyse program fragments containing free variables: a principal typing property is used to formalise it. Polyvariance manifests itself in the separation of different behaviours of the same function at its different uses: this is formalised via the rank 2 intersection types. As the rank 2 intersection type discipline types at least all (core) ML programs, our analysis can be used in the separate compilation of such programs.</abstract></paper>
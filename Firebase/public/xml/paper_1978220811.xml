<paper id="1978220811"><title>A metaobject protocol for C</title><year>1995</year><authors><author org="Xerox PARC 64 University of Tokyo" id="2776281921">Shigeru Chiba</author></authors><n_citation>337</n_citation><doc_type>Conference</doc_type><references><reference>1593718819</reference><reference>1770006921</reference><reference>2018028877</reference><reference>2063100733</reference><reference>2075623160</reference><reference>2077097918</reference><reference>2084776520</reference><reference>2092467204</reference><reference>2168287017</reference></references><venue id="1138732554" type="C">Conference on Object-Oriented Programming Systems, Languages, and Applications</venue><doi>10.1145/217838.217868</doi><keywords><keyword weight="0.46344">Disposition Matrix</keyword><keyword weight="0.53287">Event scheduling</keyword><keyword weight="0.46824">Programming language</keyword><keyword weight="0.0">Event closure</keyword><keyword weight="0.44476">Computer science</keyword><keyword weight="0.45325">State diagram</keyword><keyword weight="0.43689">Theoretical computer science</keyword><keyword weight="0.68962">Metaobject</keyword></keywords><publisher>ACM</publisher><abstract>This paper presents a metaobject protocol (MOP) for C++. This MOP was designed to bring the power of meta-programming to C++ programmers. It avoids penalties on runtime performance by adopting a new meta-architecture in which the metaobjects control the compilation of programs instead of being active during program execution. This allows the MOP to be used to implement libraries of efficient, transparent language extensions.</abstract></paper>
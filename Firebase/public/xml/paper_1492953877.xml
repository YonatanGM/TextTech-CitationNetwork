<paper id="1492953877"><title>Implementing specification freedoms</title><year>1986</year><authors><author org="Information Sciences Institute, University of Southern California, Marina del Rey, CA 90291, U.S.A." id="2762929496">P. London</author><author org="Information Sciences Institute, University of Southern California, Marina del Rey, CA 90291, U.S.A." id="2973830810">M. Feather</author></authors><n_citation>48</n_citation><doc_type>Journal</doc_type><references><reference>28640463</reference><reference>74453804</reference><reference>166877302</reference><reference>1519651380</reference><reference>1579983340</reference><reference>1817451992</reference><reference>1963587374</reference><reference>1969368990</reference><reference>1970658603</reference><reference>1976303542</reference><reference>1988901815</reference><reference>1992180245</reference><reference>2002532745</reference><reference>2006875594</reference><reference>2013373314</reference><reference>2023299380</reference><reference>2038862832</reference><reference>2039601877</reference><reference>2040073555</reference><reference>2061767363</reference><reference>2087987137</reference><reference>2091346899</reference><reference>2093648364</reference><reference>2094837773</reference><reference>2094945667</reference><reference>2101188827</reference><reference>2123985997</reference><reference>2173368609</reference></references><venue id="21029587" type="J">Science of Computer Programming</venue><doi>10.1016/0167-6423(82)90010-7</doi><keywords><keyword weight="0.65425">Specification language</keyword><keyword weight="0.6344">Programming language specification</keyword><keyword weight="0.47232">Programming language</keyword><keyword weight="0.47064">Software engineering</keyword><keyword weight="0.46775">Computer science</keyword><keyword weight="0.68124">Formal specification</keyword><keyword weight="0.55589">Implementation</keyword><keyword weight="0.53495">Natural language</keyword><keyword weight="0.46745">Software</keyword><keyword weight="0.532">High-level programming language</keyword><keyword weight="0.66884">Language Of Temporal Ordering Specification</keyword></keywords><publisher>Morgan Kaufmann Publishers Inc.</publisher><abstract>Abstract The process of converting formal specifications into valid implementations is central in the development of reliable software. As formal specification languages are enriched with constructs to enhance their expressive capabilities and as they increasingly afford specificational freedoms by requiring only a description of intended behavior rather than a prescription of particular algorithms, the gap between specification and implementation widens so that converting specifications into implementations becomes even more difficult. A major problem lies in the mapping of high-level specification constructs into an implementation that effects the desired behavior. In this paper, we consider the issues involved in eliminating occurrences of high-level specification-oriented constructs during this process. Mapping issues are discussed in the context of our development methodology, in which implementations are derived via the application of correctness-preserving transformations applied to a specification language whose high-level expressive capabilities are modeled after natural language. After the general discussion, we demonstrate the techniques on a real system whose specification is written in this language.</abstract></paper>
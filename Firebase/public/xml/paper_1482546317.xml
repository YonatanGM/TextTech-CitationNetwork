<paper id="1482546317"><title>Analysis and presentation of recovered software architectures</title><year>1996</year><authors><author org="MITRE Corporation, Bedford, MA, USA#TAB#" id="2973862699">M.P. Chase</author><author org="" id="2973374346">D.R. Harris</author><author org="" id="2973427448">S.N. Roberts</author><author org="" id="2163540572">A.S. Yeh</author></authors><n_citation>14</n_citation><doc_type>Conference</doc_type><references><reference>1855586798</reference><reference>1923579057</reference><reference>1975294938</reference><reference>1985076540</reference><reference>1995543924</reference><reference>2019912855</reference><reference>2068258563</reference><reference>2112879740</reference><reference>2121739066</reference><reference>2122824813</reference><reference>2123159404</reference><reference>2126536832</reference><reference>2133875336</reference><reference>2160946661</reference><reference>2293624369</reference></references><venue id="1131743930" type="C">Working Conference on Reverse Engineering</venue><doi>10.1109/WCRE.1996.558899</doi><keywords><keyword weight="0.60574">Software design</keyword><keyword weight="0.46306">Programming language</keyword><keyword weight="0.47332">Software engineering</keyword><keyword weight="0.45128">Systems engineering</keyword><keyword weight="0.64448">Software architecture description</keyword><keyword weight="0.4596">Computer science</keyword><keyword weight="0.61188">Architecture tradeoff analysis method</keyword><keyword weight="0.62875">Resource-oriented architecture</keyword><keyword weight="0.62587">Reference architecture</keyword><keyword weight="0.61214">Software architecture</keyword><keyword weight="0.62015">Software construction</keyword><keyword weight="0.626">Software architecture recovery</keyword></keywords><publisher>IEEE</publisher><abstract>Since architecture descriptions support multiple software engineering tasks, software architecture recovery tools must attend to accompanying secondary analysis and presentation issues. The authors describe the secondary analysis and presentation capabilities of ManSART, a software architecture recovery tool. As a central part of its design, ManSART contains operators and presentation generators. The operators simplify or combine "as-built" architectural views producing hierarchies, hybrids, and abstractions. Presentation generators create the representations that are necessary for supporting end-user software understanding and external tool input.</abstract></paper>
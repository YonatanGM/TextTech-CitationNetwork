<paper id="1519382205"><title>Using category theory to design implicit conversions and generic operators</title><year>1980</year><authors><author org="Syracuse University" id="2403193723">John C. Reynolds</author></authors><n_citation>121</n_citation><doc_type /><references><reference>1511850051</reference><reference>2061786858</reference><reference>2087828835</reference><reference>2109798037</reference><reference>2169907127</reference></references><venue id="" type="">Semantics-Directed Compiler Generation, Proceedings of a Workshop</venue><doi>10.1007/3-540-10250-7_24</doi><keywords><keyword weight="0.54193">Allegory</keyword><keyword weight="0.46553">Algebra</keyword><keyword weight="0.49474">Imperative programming</keyword><keyword weight="0.44723">Pure mathematics</keyword><keyword weight="0.66807">Biproduct</keyword><keyword weight="0.60884">Category theory</keyword><keyword weight="0.50753">Operator (computer programming)</keyword><keyword weight="0.64528">Higher category theory</keyword><keyword weight="0.42593">Mathematics</keyword><keyword weight="0.53258">Free algebra</keyword><keyword weight="0.64197">Category</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>A generalization of many-sorted algebras, called category-sorted algebras, is defined and applied to the language-design problem of avoiding anomalies in the interaction of implicit conversions and generic operators. The definition of a simple imperative language (without any binding mechanisms) is used as an example.</abstract></paper>
<paper id="1494600236"><title>Protecting cryptographic keys against continual leakage</title><year>2010</year><authors><author org="Dept. of Computer Science, University of Toronto#TAB#" id="2608532673">Ali Juma</author><author org="Dept. of Computer Science, University of Toronto#TAB#" id="273228002">Yevgeniy Vahlis</author></authors><n_citation>73</n_citation><doc_type>Conference</doc_type><references><reference>111085860</reference><reference>236432643</reference><reference>1483290420</reference><reference>1508077776</reference><reference>1521253015</reference><reference>1528908721</reference><reference>1547517307</reference><reference>1563465674</reference><reference>1573157032</reference><reference>1588518948</reference><reference>1592625985</reference><reference>1606729219</reference><reference>1752847028</reference><reference>1753795543</reference><reference>1819824216</reference><reference>1970187925</reference><reference>1988374166</reference><reference>2031533839</reference><reference>2038761522</reference><reference>2061949491</reference><reference>2096290348</reference><reference>2101248381</reference><reference>2128673483</reference><reference>2133701468</reference><reference>2147436724</reference><reference>2156030242</reference><reference>2169985476</reference></references><venue id="1153524033" type="C">International Cryptology Conference</venue><doi>10.1007/978-3-642-14623-7_3</doi><keywords><keyword weight="0.52687">Homomorphic encryption</keyword><keyword weight="0.57648">Information leakage</keyword><keyword weight="0.4427">Computer science</keyword><keyword weight="0.44354">Computer security</keyword><keyword weight="0.53334">Cryptography</keyword><keyword weight="0.43552">Theoretical computer science</keyword><keyword weight="0.45087">Compiler</keyword><keyword weight="0.47708">Adversary</keyword><keyword weight="0.51097">Security token</keyword><keyword weight="0.56411">Key (cryptography)</keyword><keyword weight="0.44969">Computation</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Side-channel attacks have often proven to have a devastating effect on the security of cryptographic schemes. In this paper, we address the problem of storing cryptographic keys and computing on them in a manner that preserves security even when the adversary is able to obtain information leakage during the computation on the :[52],"any fully homomorphic encryption with re-randomizable ciphertexts, we show how to encapsulate a key and repeatedly evaluate arbitrary functions on it so that no adversary can gain :[52],"any useful information from a large class of side-channel attacks. We work in the model of Micali and Reyzin, assuming that only the active part of memory during computation leaks information. Our construction makes use of a single "leak-free" hardware token that samples from a distribution that does not depend on the protected key or the function that is evaluated on construction is the :[141],"first general compiler to achieve resilience against polytime leakage functions without performing :[52],"any leak-free computation on the protected key. Furthermore, the amount of computation our construction must perform does not grow with the amount of leakage the adversary is able to obtain; instead, it suffices to make a stronger assumption about the security of the fully homomorphic encryption.</abstract></paper>
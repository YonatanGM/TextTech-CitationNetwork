<paper id="1546462487"><title>Logical Update Queries as Open Nested Transactions</title><year>1999</year><authors><author org="Universität Passau" id="2015484110">Alfred Fent</author><author org="Universität Passau" id="2144205507">Carl-Alexander Wichert</author><author org="Universität Passau" id="2186162728">Burkhard Freitag</author></authors><n_citation>3</n_citation><doc_type>Journal</doc_type><references><reference>35152802</reference><reference>142603137</reference><reference>148128572</reference><reference>1525343879</reference><reference>1545155892</reference><reference>1557658075</reference><reference>1696171913</reference><reference>1995080554</reference><reference>2034579025</reference><reference>2077591300</reference><reference>2117162183</reference><reference>2129241924</reference><reference>2914315669</reference></references><venue id="106296714" type="J">Lecture Notes in Computer Science</venue><doi>10.1007/3-540-46466-2_3</doi><keywords><keyword weight="0.6162">Transaction processing</keyword><keyword weight="0.54069">Concurrency control</keyword><keyword weight="0.46612">Computer science</keyword><keyword weight="0.53205">Concurrency</keyword><keyword weight="0.59544">Online transaction processing</keyword><keyword weight="0.55601">Database transaction</keyword><keyword weight="0.6259">Distributed transaction</keyword><keyword weight="0.65605">Nested transaction</keyword><keyword weight="0.58413">Transaction processing system</keyword><keyword weight="0.4571">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The rule-based update language ULTRA has been designed for the specification of complex database updates in a modular fashion. The logical semantics of update goals is based on update request sets, which correspond to deferred basic updates in the database. The declarative character of the logical semantics leaves much freedom for various evaluation strategies, among them a top-down resolution, which can be mapped naturally onto a system of nested transactions. In this paper, we extend this operational model as follows: Not only the basic operations are performed and committed independently from the top-level transaction, but also complex operations defined by update rules. This leads to an open nested transaction hierarchy, which allows to exploit the semantical properties of complex operations to gain more concurrency. On the other hand, high-level compensation is necessary and meta information must be provided by the programmer. We present the key elements of this combination of logic-based update languages and transaction processing and propose a flexible system architecture.</abstract></paper>
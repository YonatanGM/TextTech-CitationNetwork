<paper id="1519969013"><title>High-Bandwidth Encryption with Low-Bandwidth Smartcards</title><year>1996</year><authors><author org="AT&amp;T Bell Lab.#TAB#" id="2903854414">Matt Blaze</author></authors><n_citation>55</n_citation><doc_type>Conference</doc_type><references><reference>1607280525</reference><reference>2119951041</reference><reference>2159339961</reference></references><venue id="2758283624" type="C">Fast Software Encryption</venue><doi>10.1007/3-540-60865-6_40</doi><keywords><keyword weight="0.62962">Cipher</keyword><keyword weight="0.54322">Overhead (computing)</keyword><keyword weight="0.64256">Block cipher</keyword><keyword weight="0.66046">Cryptographic protocol</keyword><keyword weight="0.42878">Computer science</keyword><keyword weight="0.60751">Cryptography</keyword><keyword weight="0.63469">Cryptographic hash function</keyword><keyword weight="0.53926">Smart card</keyword><keyword weight="0.62991">Encryption</keyword><keyword weight="0.44861">Embedded system</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>This paper describes a simple protocol, the Remotely Keyed Encryption Protocol (RKEP), that enables a secure, but bandwidthlimited, cryptographic smartcard to function as a high-bandwidth secretkey encryption and decryption engine for an insecure, but fast, host processor. The host processor assumes most of the computational and bandwidth burden of each cryptographic operation without ever learning the secret key stored on the card. By varying the parameters of the protocol, arbitrary size blocks can be processed by the host with only a single small message exchange with the card and minimal card computation. RKEP works with any conventional block cipher and requires only standard ECB mode block cipher operations on the smartcard, permitting its implementation with off-the-shelf components. There is no storage overhead. Computational overhead is minimal, and includes the calculation of a cryptographic hash function as well as a conventional cipher function on the host processor.</abstract></paper>
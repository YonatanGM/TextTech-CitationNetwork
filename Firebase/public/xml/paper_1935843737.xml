<paper id="1935843737"><title>Reverse engineering legacy interfaces: an interaction-driven approach</title><year>1999</year><authors><author org="Dept. of Comput. Sci., Alberta Univ., Edmonton, Alta., Canada" id="289916785">E. Stroulia</author><author org="" id="2304808059">M. El-Ramly</author><author org="" id="2139129581">L. Kong</author><author org="" id="2168760003">P. Sorenson</author><author org="" id="1035187312">B. Matichuk</author></authors><n_citation>44</n_citation><doc_type>Conference</doc_type><references><reference>1514784562</reference><reference>1570222067</reference><reference>1994374561</reference><reference>2021672791</reference><reference>2037712120</reference><reference>2040910572</reference><reference>2046567234</reference><reference>2083318874</reference><reference>2122327570</reference></references><venue id="1131743930" type="C">Working Conference on Reverse Engineering</venue><doi>10.1109/WCRE.1999.806968</doi><keywords><keyword weight="0.60548">Shell (computing)</keyword><keyword weight="0.61576">Task analysis</keyword><keyword weight="0.46418">Software engineering</keyword><keyword weight="0.44517">Systems engineering</keyword><keyword weight="0.46137">Computer science</keyword><keyword weight="0.50878">Reverse engineering</keyword><keyword weight="0.47733">Humanâ€“computer interaction</keyword><keyword weight="0.56807">Graphical user interface</keyword><keyword weight="0.63642">User interface</keyword><keyword weight="0.62085">Multiple document interface</keyword><keyword weight="0.57336">Legacy system</keyword><keyword weight="0.52581">Domain model</keyword></keywords><publisher>IEEE Computer Society</publisher><abstract>Legacy systems constitute valuable assets to the organizations that own them. However, due to the development of newer and faster hardware platforms and the invention of novel interface styles, there is a great demand for their migration to new platforms. We present a method for reverse engineering the system interface that consists of two tasks. Based on traces of the users interaction with the system, the "interface mapping" task constructs a "map" of the system interface, in terms of the individual system screens and the transitions between them. The subsequent "task and domain modeling" task uses the interface map and task-specific traces to construct an abstract model of a useru0027s task as an information exchange plan. The task model specifies the screen transition diagram that the user has to traverse in order to accomplish the task in question, and the flow of information that the user exchanges with the system at each screen. This task model is later used as the basis for specifying a new graphical user interface tailored to the task in question.</abstract></paper>
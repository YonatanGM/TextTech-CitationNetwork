<paper id="1553819710"><title>Modeling Dynamic Domains with ConGolog</title><year>1999</year><authors><author org="York University" id="680680422">Yves Lesp√©rance</author><author org="University of Toronto,#TAB#" id="2028814081">Todd G. Kelley</author><author org="University of Toronto,#TAB#" id="2161153869">John Mylopoulos</author><author org="University of Toronto,#TAB#" id="2159496315">Eric S. K. Yu</author></authors><n_citation>30</n_citation><doc_type>Conference</doc_type><references><reference>1573091213</reference><reference>1585197271</reference><reference>1971925101</reference><reference>1973391999</reference><reference>1993512664</reference><reference>2005473008</reference><reference>2045474169</reference><reference>2062205093</reference><reference>2099529102</reference><reference>2115349478</reference><reference>2125708466</reference><reference>2150317807</reference><reference>2170873897</reference></references><venue id="1134069326" type="C">Conference on Advanced Information Systems Engineering</venue><doi>10.1007/3-540-48738-7_27</doi><keywords><keyword weight="0.58776">Specification language</keyword><keyword weight="0.4683">Programming language</keyword><keyword weight="0.50264">Business process</keyword><keyword weight="0.45357">Computer science</keyword><keyword weight="0.51181">Automated theorem proving</keyword><keyword weight="0.43478">Algorithm</keyword><keyword weight="0.55069">Formal specification</keyword><keyword weight="0.54587">Logic programming</keyword><keyword weight="0.4913">Frame problem</keyword><keyword weight="0.5715">Logical framework</keyword><keyword weight="0.59001">Process Specification Language</keyword><keyword weight="0.44966">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>In this paper, we describe the process specification language ConGolog and show how it can be used to model business processes for requirements analysis. In ConGolog, the effects of actions in a dynamic domain are specified in a logical framework. This supports modeling even in the absence of complete information. The behavior of agents in the domain is specified in a concurrent process language, whose semantics is defined in the same logical framework. We then describe a simulation tool implemented in terms of logic programming technology. As well, we discuss a verification tool which is being developed based on theorem proving technology.</abstract></paper>
<paper id="162964049"><title>Reverse nearest neighbor aggregates over data streams</title><year>2002</year><authors><author org="AT&amp;T Labs — research" id="2238237585">Flip Korn</author><author org="AT&amp;T Labs — research" id="2921339358">S. Muthukrishnan</author><author org="AT&amp;T Labs — research" id="2196778472">Divesh Srivastava</author></authors><n_citation>86</n_citation><doc_type>Conference</doc_type><references><reference>1493149182</reference><reference>1503832576</reference><reference>1573284583</reference><reference>1761167196</reference><reference>1766932551</reference><reference>1983266860</reference><reference>2002076319</reference><reference>2004110412</reference><reference>2004154913</reference><reference>2028394981</reference><reference>2028660080</reference><reference>2033139852</reference><reference>2042875144</reference><reference>2045533739</reference><reference>2047424291</reference><reference>2068714596</reference><reference>2076287166</reference><reference>2080068757</reference><reference>2081189989</reference><reference>2084069552</reference><reference>2086345215</reference><reference>2100369465</reference><reference>2106163100</reference><reference>2112452856</reference><reference>2114944618</reference><reference>2121255383</reference><reference>2126105096</reference><reference>2137507206</reference><reference>2169593628</reference></references><venue id="1133523790" type="C">Very Large Data Bases</venue><doi>10.1016/B978-155860869-6/50077-9</doi><keywords><keyword weight="0.50524">k-nearest neighbors algorithm</keyword><keyword weight="0.44714">Data mining</keyword><keyword weight="0.61596">R-tree</keyword><keyword weight="0.45029">Data set</keyword><keyword weight="0.57559">Data stream mining</keyword><keyword weight="0.51577">Data stream</keyword><keyword weight="0.44078">Computer science</keyword><keyword weight="0.61982">Server</keyword><keyword weight="0.45853">Telephony</keyword><keyword weight="0.43508">Database</keyword><keyword weight="0.45009">Computation</keyword></keywords><publisher>VLDB Endowment</publisher><abstract>Reverse Nearest Neighbor (RNN) queries have been studied for finite, stored data sets and are of interest for decision support. However, in many applications such as fixed wireless telephony access and sensor-based highway traffic monitoring, the data arrives in a stream and cannot be stored. Exploratory analysis on this data stream can be formalized naturally using the notion of RNN aggregates (RNNAs), which involve the computation of some aggregate (such as C0UNT or MAX DISTANCE) over the set of reverse nearest neighbor "clients" associated with each this :[86],"paper, we introduce and investigate the problem of computing three types of RNNA queries over data streams of "client" locations: (i) Max-RNNA: given K servers, return the maximum RNNA over all clients to their closest servers; (ii) List-RNNA: given K servers, return a list of RNNAs over all clients to each of the K servers; and (iii) Opt-RNNA: find a subset of at most K servers for which their RNNAs are below a given threshold. While exact computation of these queries is not possible in the data stream model, we present efficient algorithms to approximately answer these RNNA queries over data streams with error guarantees. We provide analytical proofs of constant factor approximations for many RNNA queries, and complement our analyses with experimental evidence of the accuracy of our techniques.</abstract></paper>
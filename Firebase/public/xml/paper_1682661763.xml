<paper id="1682661763"><title>An efficient algorithm to compute the synchronized product</title><year>1995</year><authors><author org="Inst. d''Inf., Facultes Univ. Notre-Dame de la Paix, Namur, Belgium" id="2202667982">D. Zampunieris</author><author org="Inst. d''Inf., Facultes Univ. Notre-Dame de la Paix, Namur, Belgium" id="2231155038">B. Le Charlier</author></authors><n_citation>4</n_citation><doc_type>Conference</doc_type><references><reference>1507151801</reference><reference>1998132813</reference><reference>2080267935</reference></references><venue id="1180629300" type="C">Modeling, Analysis, and Simulation On Computer and Telecommunication Systems</venue><doi>10.1109/MASCOT.1995.378650</doi><keywords><keyword weight="0.55718">Data structure</keyword><keyword weight="0.6025">Automata theory</keyword><keyword weight="0.50404">Algorithm design</keyword><keyword weight="0.46129">Computer science</keyword><keyword weight="0.53468">Parallel algorithm</keyword><keyword weight="0.53333">Tree (data structure)</keyword><keyword weight="0.50602">Automaton</keyword><keyword weight="0.46986">Algorithm</keyword><keyword weight="0.47296">Theoretical computer science</keyword><keyword weight="0.53947">Concurrent computing</keyword><keyword weight="0.46989">Distributed computing</keyword><keyword weight="0.51729">Encoding (memory)</keyword></keywords><publisher>IEEE</publisher><abstract>Computing all the reachable states of synchronized automata is important in the mechanical verification of concurrent programs. It is however a hard task because this set of states typically grows exponentially in the number of automata involved. We present a new approach that yields interesting experimental results, both an memory requirements and computation times. It uses a new data structure, the sharing tree, which allows to store large sets of states in a compact way. Moreover, we have designed algorithms that use global operations and caching on the data structure itself. u003e</abstract></paper>
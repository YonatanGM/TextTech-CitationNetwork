<paper id="1986334602"><title>Linear-time subtransitive control flow analysis</title><year>1997</year><authors><author org="Bell Labs, 600 Mountain Ave, Murray Hill, NJ" id="2166414299">Nevin Heintze</author><author org="AT&amp;T Labs, 600 Mountain Ave, Murray Hill, NJ" id="2140912314">David McAllester</author></authors><n_citation>68</n_citation><doc_type>Conference</doc_type><references><reference>1507046749</reference><reference>1553391613</reference><reference>1829244603</reference><reference>1964952791</reference><reference>1989058323</reference><reference>2009215937</reference><reference>2014387690</reference><reference>2057085278</reference><reference>2058824372</reference><reference>2068711880</reference><reference>2095357205</reference><reference>2102389857</reference></references><venue id="1127352206" type="C">Programming Language Design and Implementation</venue><doi>10.1145/258915.258939</doi><keywords><keyword weight="0.47524">Discrete mathematics</keyword><keyword weight="0.68892">Transitive reduction</keyword><keyword weight="0.51738">Expression (mathematics)</keyword><keyword weight="0.4426">Computer science</keyword><keyword weight="0.46145">Algorithm</keyword><keyword weight="0.58849">Directed graph</keyword><keyword weight="0.46729">Theoretical computer science</keyword><keyword weight="0.58904">Control flow analysis</keyword><keyword weight="0.55223">Time complexity</keyword><keyword weight="0.64591">Transitive closure</keyword></keywords><publisher>ACM</publisher><abstract>We present a linear-time algorithm for bounded-type programs that builds a directed graph whose transitive closure gives exactly the results of the standard (cubic-time) Control-Flow Analysis (CFA) algorithm. Our algorithm can be used to list all functions calls from all call sites in (optimal) quadratic time. More importantly, it can be used to give linear-time algorithms for CFA-consuming applications such as:b effects analysis: find the side-effecting expressions in a program.b k-limited CFA: for each call-site, list the functions if there are only a few of them (l k) and otherwise output "many".b called-once analysis: identify all functions called from only one call-site.</abstract></paper>
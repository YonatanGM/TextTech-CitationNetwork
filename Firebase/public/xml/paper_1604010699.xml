<paper id="1604010699"><title>Retrieving library identifiers via equational matching of types</title><year>1990</year><authors><author org="Chalmers Tekniska Högskola och Göteborgs Universitet" id="52536704">Mikael Rittri</author></authors><n_citation>50</n_citation><doc_type>Conference</doc_type><references><reference>29085931</reference><reference>1539274846</reference><reference>1968553906</reference><reference>2033288425</reference><reference>2056016391</reference><reference>2078095352</reference><reference>2084405255</reference><reference>2114371252</reference><reference>2133420304</reference><reference>2149257851</reference><reference>2151384546</reference><reference>2166822586</reference><reference>2914314632</reference></references><venue id="1134440762" type="C">Conference on Automated Deduction</venue><doi>10.1007/3-540-52885-7_117</doi><keywords><keyword weight="0.44907">Discrete mathematics</keyword><keyword weight="0.52472">Functional programming</keyword><keyword weight="0.50908">Modulo</keyword><keyword weight="0.45736">Computer science</keyword><keyword weight="0.57931">Cartesian product</keyword><keyword weight="0.45785">Algorithm</keyword><keyword weight="0.46966">Theoretical computer science</keyword><keyword weight="0.60017">Algebraic data type</keyword><keyword weight="0.54847">Cartesian closed category</keyword><keyword weight="0.56467">Currying</keyword><keyword weight="0.5397">Exponentiation</keyword><keyword weight="0.52977">Pattern matching</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>In functional programming environments, one can use types as search keys in program libraries, if one disregards trivial differences in argument order or currying. A way to do this is to identify types that are isomorphic in every Cartesian closed category; simpler put, types should be identified if they are equal under an arithmetic interpretation, with Cartesian product as multiplication and function space as exponentiation. When the type system is polymorphic, one may also want to retrieve identifiers of types more general than the query. This paper describes a method to do both, that is, an algorithm for pattern matching modulo canonical CCC-isomorphism. The algorithm returns a finite complete set of matchers. An implementation shows that satisfactory speed can be achieved for library search.</abstract></paper>
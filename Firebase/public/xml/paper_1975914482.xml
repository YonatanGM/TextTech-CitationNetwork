<paper id="1975914482"><title>Analysis of pointers and structures</title><year>1990</year><authors><author org="Menlo Park, CA" id="2172235252">David R. Chase</author><author org="IBM T. J. Watson Research Center, P.O. Box 704, Yorktown, Heights, NY" id="2010226721">Mark Wegman</author><author org="Computer Science Dept., P.O. Box 1910, Brown University, Providence" id="2226456482">F. Kenneth Zadeck</author></authors><n_citation>472</n_citation><doc_type>Conference</doc_type><references><reference>1964583443</reference><reference>1966449927</reference><reference>1969077685</reference><reference>1970061809</reference><reference>1982205631</reference><reference>1982972210</reference><reference>2004419599</reference><reference>2012099766</reference><reference>2016558072</reference><reference>2019709986</reference><reference>2021986357</reference><reference>2022941785</reference><reference>2023222549</reference><reference>2045693727</reference><reference>2049384349</reference><reference>2062823821</reference><reference>2064750939</reference><reference>2066575220</reference><reference>2076090418</reference><reference>2088126145</reference><reference>2102890180</reference><reference>2111695742</reference><reference>2121762814</reference><reference>2130376240</reference><reference>2330123543</reference></references><venue id="1127352206" type="C">Programming Language Design and Implementation</venue><doi>10.1145/989393.989429</doi><keywords><keyword weight="0.53557">Pointer (computer programming)</keyword><keyword weight="0.56619">Pointer analysis</keyword><keyword weight="0.57457">Data structure</keyword><keyword weight="0.53541">Shape analysis (program analysis)</keyword><keyword weight="0.46031">Programming language</keyword><keyword weight="0.46573">Computer science</keyword><keyword weight="0.55571">Pointer aliasing</keyword><keyword weight="0.4679">Algorithm</keyword><keyword weight="0.47026">Theoretical computer science</keyword><keyword weight="0.50434">Compiler</keyword><keyword weight="0.5399">Alias analysis</keyword><keyword weight="0.50215">Information quality</keyword></keywords><publisher>ACM</publisher><abstract>Compilers can make good use of knowledge about the shape of data structures and the values that pointers assume during execution. We present results which show how a compiler can automatically determine some of this information. We believe that practical analyses based on this work can be used in compilers for languages that provide linked data structures. The analysis we present obtains useful information about linked data structures. We summarize unbounded data structures by taking advantage of structure present in the original program. The worst-case time bounds for a naive algorithm are high-degree polynomial, but for the expected (sparse) case we have an efficient algorithm. Previous work has addressed time bounds rarely, and efficient algorithms not at all. The quality of information obtained by this analysis appears to be (generally) an improvement on what is obtained by existing techniques. A simple extension obtains aliasing information for entire data structures that previously was obtained only through declarations. Previous work has shown that this information, however obtained, allows worthwhile optimization.</abstract></paper>
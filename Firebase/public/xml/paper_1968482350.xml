<paper id="1968482350"><title>A synthesizer of inductive assertions</title><year>1975</year><authors><author org="Xerox Res. Center, Palo Alto, CA, USA" id="2124558870">S. M. German</author><author org="Xerox Res. Center, Palo Alto, CA, USA" id="2681783298">B. Wegbreit</author></authors><n_citation>75</n_citation><doc_type>Journal</doc_type><references><reference>102054376</reference><reference>1489122955</reference><reference>1969077685</reference><reference>1978367838</reference><reference>1988651604</reference><reference>2037274415</reference><reference>2067018501</reference><reference>2075913776</reference><reference>2160363852</reference></references><venue id="8351582" type="J">IEEE Transactions on Software Engineering</venue><doi>10.1109/TSE.1975.6312821</doi><keywords><keyword weight="0.47181">Programming language</keyword><keyword weight="0.51194">Programmer</keyword><keyword weight="0.45843">Computer science</keyword><keyword weight="0.50689">Automated theorem proving</keyword><keyword weight="0.55072">Correctness</keyword><keyword weight="0.45753">Theoretical computer science</keyword><keyword weight="0.56166">Loop invariant</keyword><keyword weight="0.51127">Mathematical proof</keyword></keywords><publisher>IEEE</publisher><abstract>Describes a prototype system Vista which provides assistance in synthesizing correct inductive assertions. Given only the source program, it is able to generate a useful class of assertions automatically. For a larger class, it is able to extend partial inductive assertions supplied by the programmer to form complete assertions from which it proves program correctness. Its synthesis methods include: symbolic evaluation in a weak interpretation, combining output assertions with loop exit information to obtain trail loop assertions, and extracting information from proofs which fail in order to determine how assertions should be strengthened.</abstract></paper>
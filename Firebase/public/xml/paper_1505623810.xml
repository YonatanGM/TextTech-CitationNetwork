<paper id="1505623810"><title>Using Graphs to Understand PDL</title><year>1981</year><authors><author org="Stanford, University" id="2120476038">Vaughan R. Pratt</author></authors><n_citation>27</n_citation><doc_type /><references><reference>1990632580</reference><reference>2018732573</reference><reference>2066064214</reference><reference>2066949643</reference><reference>2069709605</reference><reference>2103953153</reference><reference>2111706174</reference></references><venue id="" type="">Logic of Programs, Workshop</venue><doi>10.1007/BFb0025792</doi><keywords><keyword weight="0.45766">Converse</keyword><keyword weight="0.60062">Quantum finite automata</keyword><keyword weight="0.4519">Discrete mathematics</keyword><keyword weight="0.50846">Regular expression</keyword><keyword weight="0.58425">Nondeterministic finite automaton</keyword><keyword weight="0.45484">Algebra</keyword><keyword weight="0.5089">Satisfiability</keyword><keyword weight="0.47544">Automaton</keyword><keyword weight="0.51753">Finite-state machine</keyword><keyword weight="0.48876">Time complexity</keyword><keyword weight="0.41065">Mathematics</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>This paper begins with the problem of sharpening our understanding of PDL. The position we take here is that PDL, which is ordinarily defined using regular operations on programs, is better understood in terms of finite state automata. Accordingly we rederive some basic PDL results (finite model, deterministic exponential satisfiability) in terms of automata. As corollaries to this we obtain answers to the following open questions. (i) What is the time complexity of satisfiability for propositional flowgraph logic? (ii) Can regular expressions be axiomatized equationally as succinctly as they can be represented with automata? We also show how converse and test relate to flowgraph operations.</abstract></paper>
<paper id="1708676256"><title>Monitoring Temporal Permissions using Partially Evaluated Transition Graphs</title><year>1992</year><authors><author org="University of Cambridge" id="281595915">Scarlet Schwiderski</author><author org="Technische UniversitÃ¤t Braunschweig" id="129750422">Gunter Saake</author></authors><n_citation>7</n_citation><doc_type /><references><reference>21471058</reference><reference>1529070545</reference><reference>1562179109</reference><reference>1969368990</reference><reference>1974461416</reference><reference>2026757511</reference><reference>2039759659</reference><reference>2040127143</reference><reference>2065817972</reference><reference>2076853127</reference><reference>2093916942</reference><reference>2103609748</reference><reference>2104145253</reference></references><venue id="" type="">Selected Papers from the Fourth International Workshop on Foundations of Models and Languages for Data and Objects: Modelling Database Dynamics</venue><doi>10.1007/978-1-4471-3554-8_12</doi><keywords><keyword weight="0.47603">Conceptual design</keyword><keyword weight="0.51304">Past tense</keyword><keyword weight="0.0">Graph</keyword><keyword weight="0.46001">Computer science</keyword><keyword weight="0.46705">Theoretical computer science</keyword><keyword weight="0.64663">Linear temporal logic</keyword><keyword weight="0.50122">Data integrity</keyword><keyword weight="0.57874">Database application</keyword><keyword weight="0.62753">Temporal logic</keyword><keyword weight="0.5886">Predicate logic</keyword></keywords><publisher>Springer, London</publisher><abstract>The conceptual design of a database application includes not only the design of its static structure but also the design of its dynamic behaviour. Temporal permissions are one of several concepts which can be used to specify dynamic database behaviour. They are used as enabling conditions for the occurrence of specific state-changing operations. Temporal permissions refer to the whole past life cycle of a database and are therefore specified in a past tense temporal logic. An efficient method for monitoring past tense temporal formulae, presented in this paper, avoids storing the whole past life cycle of the database. Instead, past tense temporal formulae are partially evaluated during database runtime using special evaluation schemes (so-called transition graphs). Necessary information about the database history is represented as a non-temporal predicate logic formula. The actual evaluation of a past tense temporal formula can then be reduced to evaluating this non-temporal formula.</abstract></paper>
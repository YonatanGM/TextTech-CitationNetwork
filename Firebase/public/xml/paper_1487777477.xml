<paper id="1487777477"><title>Effective Flow Analysis for Avoiding Run-Time Checks</title><year>1995</year><authors><author org="NEC Research Institute" id="2141982898">Suresh Jagannathan</author><author org="NEC Research Institute" id="2159959243">Andrew K. Wright</author></authors><n_citation>46</n_citation><doc_type>Conference</doc_type><references><reference>1583857822</reference><reference>1829244603</reference><reference>1963954367</reference><reference>1974939942</reference><reference>2002301065</reference><reference>2014387690</reference><reference>2068711880</reference><reference>2088126145</reference><reference>2088735483</reference><reference>2092749348</reference><reference>2102389857</reference><reference>2113486106</reference><reference>2161100976</reference><reference>2166822586</reference></references><venue id="1137552346" type="C">Static Analysis Symposium</venue><doi>10.1007/3-540-60360-3_41</doi><keywords><keyword weight="0.62952">Constant folding</keyword><keyword weight="0.61698">Loop-invariant code motion</keyword><keyword weight="0.0">General purpose</keyword><keyword weight="0.46409">Computer science</keyword><keyword weight="0.39173">Flow (psychology)</keyword><keyword weight="0.47179">Algorithm</keyword><keyword weight="0.52441">Type inference</keyword><keyword weight="0.4689">Theoretical computer science</keyword><keyword weight="0.60674">Program analysis</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>This paper describes a general purpose program analysis that computes global control-flow and data-flow information for higher-order, call-by-value programs. This information can be used to drive global program optimizations such as inlining and run-time check elimination, as well as optimizations like constant folding and loop invariant code motion that are typically based on special-purpose local analyses.</abstract></paper>
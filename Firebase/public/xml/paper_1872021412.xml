<paper id="1872021412"><title>Modular verification of static class invariants</title><year>2005</year><authors><author org="Microsoft Research, Redmond, WA" id="710865586">K. Rustan M. Leino</author><author org="ETH‐Zurich Switzerland" id="2285904575">Peter Müller</author></authors><n_citation>44</n_citation><doc_type>Conference</doc_type><references><reference>1489778371</reference><reference>1555946950</reference><reference>1573044584</reference><reference>1573258001</reference><reference>1964830323</reference><reference>1993836075</reference><reference>1995008247</reference><reference>2073407646</reference><reference>2094160561</reference><reference>2107995193</reference><reference>2136371406</reference><reference>2151131364</reference><reference>2161825580</reference><reference>2168441850</reference><reference>2789839712</reference></references><venue id="1169806927" type="C">Formal Methods</venue><doi>10.1007/11526841_4</doi><keywords><keyword weight="0.47038">Data field</keyword><keyword weight="0.50211">Data structure</keyword><keyword weight="0.51747">Object-oriented programming</keyword><keyword weight="0.45201">Computer science</keyword><keyword weight="0.49489">Correctness</keyword><keyword weight="0.46102">Theoretical computer science</keyword><keyword weight="0.45448">Software</keyword><keyword weight="0.50532">Invariant (mathematics)</keyword><keyword weight="0.48111">Formal methods</keyword><keyword weight="0.45929">Modular design</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Object invariants describe the consistency of object-oriented data structures and are central to reasoning about the correctness of object-oriented software. But object invariants are not the only consistency conditions on which a program may depend. The data in object-oriented programs consists not just of object fields, but also of static fields, which hold data that is shared among objects. The consistency of static fields is described by static class invariants, which are enforced at the class level. Static class invariants can also mention instance fields, describing the consistency of dynamic data structures rooted in static fields. Sometimes there are even consistency conditions that relate the instance fields of many or all objects of a class; static class invariants describe these relations, too, since they cannot be enforced by any one object in :[132],"paper presents a systematic way (a methodology) for specifying and verifying static class invariants in object-oriented programs. The methodology supports the three major uses of static fields and invariants in the Java library. The methodology is amenable to static, modular verification and is sound.</abstract></paper>
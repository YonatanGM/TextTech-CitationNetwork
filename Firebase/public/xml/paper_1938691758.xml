<paper id="1938691758"><title>Dynamic query scheduling in data integration systems</title><year>2000</year><authors><author org="PRiSM Lab., Versailles, France" id="2296668023">L. Bouganim</author><author org="" id="219046646">F. Fabret</author><author org="" id="2776608379">C. Mohan</author><author org="" id="2223920688">P. Valduriez</author></authors><n_citation>59</n_citation><doc_type>Conference</doc_type><references><reference>1483744472</reference><reference>1535462869</reference><reference>1572046961</reference><reference>1578006587</reference><reference>1966080685</reference><reference>1975731516</reference><reference>1977479689</reference><reference>1986843683</reference><reference>2040823248</reference><reference>2120754641</reference><reference>2145761653</reference><reference>2151197771</reference><reference>2158237121</reference><reference>2164433331</reference><reference>2201552871</reference></references><venue id="1163988186" type="C">International Conference on Data Engineering</venue><doi>10.1109/ICDE.2000.839442</doi><keywords><keyword weight="0.62178">Query optimization</keyword><keyword weight="0.5426">Data integration</keyword><keyword weight="0.45736">Data mining</keyword><keyword weight="0.46737">Relational database</keyword><keyword weight="0.50992">Scheduling (computing)</keyword><keyword weight="0.45829">Computer science</keyword><keyword weight="0.45839">Decision support system</keyword><keyword weight="0.49027">Execution model</keyword><keyword weight="0.48587">Distributed database</keyword><keyword weight="0.57239">Dynamic priority scheduling</keyword><keyword weight="0.44778">Database</keyword><keyword weight="0.46393">Distributed computing</keyword></keywords><publisher>IEEE Computer Society</publisher><abstract>Execution plans produced by traditional query optimizers for data integration queries may yield poor performance for several reasons. The cost estimates may be inaccurate, the memory available at run-time may be insufficient, or data delivery rate can be unpredictable. We address the problem of unpredictable data arrival rate. We propose to dynamically schedule queries in order to deal with irregular data delivery rate and gracefully adapt to the available memory. Our approach performs careful step-by-step scheduling of several query fragments and processes these fragments based on data arrivals. We describe a performance evaluation that shows important performance gains in several configurations.</abstract></paper>
<paper id="1610570299"><title>An Overview of AspectJ</title><year>2001</year><authors><author org="University of British Columbia, #TAB#" id="562619066">Gregor Kiczales</author><author org="Xerox Palo Alto Research Center#TAB#" id="2420602340">Erik Hilsdale</author><author org="Xerox Palo Alto Research Center#TAB#" id="2169399207">Jim Hugunin</author><author org="Xerox Palo Alto Research Center#TAB#" id="2952154346">Mik Kersten</author><author org="Xerox Palo Alto Research Center#TAB#" id="2303116884">Jeffrey Palm</author><author org="UniversityÂ of California" id="2112220066">William G. Griswold</author></authors><n_citation>912</n_citation><doc_type>Conference</doc_type><references><reference>1519249316</reference><reference>1523720236</reference><reference>1549128618</reference><reference>1587166076</reference><reference>1590740917</reference><reference>1770006921</reference><reference>1991604845</reference><reference>2014021676</reference><reference>2016238341</reference><reference>2018028877</reference><reference>2033868415</reference><reference>2064189581</reference><reference>2078434561</reference><reference>2082514774</reference><reference>2095219277</reference><reference>2099305423</reference><reference>2100134231</reference><reference>2115397303</reference><reference>2134119432</reference><reference>2138363365</reference><reference>2151605217</reference><reference>2168287017</reference></references><venue id="1177184315" type="C">European Conference on Object-Oriented Programming</venue><doi>10.1007/3-540-45337-7_18</doi><keywords><keyword weight="0.45514">Programming language</keyword><keyword weight="0.63073">Aspect-oriented programming</keyword><keyword weight="0.57246">Java annotation</keyword><keyword weight="0.56248">Join point</keyword><keyword weight="0.43322">Computer science</keyword><keyword weight="0.54723">Real time Java</keyword><keyword weight="0.57786">Java bytecode</keyword><keyword weight="0.70395">AspectJ</keyword><keyword weight="0.54372">Pointcut</keyword><keyword weight="0.54165">Java</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>AspectJ? is a simple and practical aspect-oriented extension to Java?. With just a few new constructs, AspectJ provides support for modular implementation of a range of crosscutting concerns. In AspectJu0027s dynamic join point model, join points are well-defined points in the execution of the program; pointcuts are collections of join points; advice are special method-like constructs that can be attached to pointcuts; and aspects are modular units of crosscutting implementation, comprising pointcuts, advice, and ordinary Java member declarations. AspectJ code is compiled into standard Java bytecode. Simple extensions to existing Java development environments make it possible to browse the crosscutting structure of aspects in the same kind of way as one browses the inheritance structure of classes. Several examples show that AspectJ is powerful, and that programs written using it are easy to understand.</abstract></paper>
<paper id="1578560741"><title>Specification of the Javacard API in JML</title><year>2001</year><authors><author org="University of Nijmegen" id="2149911619">Erik Poll</author><author org="University of Nijmegen" id="2160033024">Joachim van den Berg</author><author org="University of Nijmegen" id="2105127320">Bart Jacobs</author></authors><n_citation>38</n_citation><doc_type>Conference</doc_type><references><reference>1544646281</reference><reference>1583826417</reference><reference>1659048632</reference><reference>2059295282</reference><reference>2094160561</reference><reference>2096601022</reference><reference>2104506944</reference><reference>2111619838</reference><reference>2161825580</reference></references><venue id="1183877910" type="C">Smart Card Research and Advanced Application Conference</venue><doi>10.1007/978-0-387-35528-3_8</doi><keywords><keyword weight="0.56249">Specification language</keyword><keyword weight="0.46623">Programming language</keyword><keyword weight="0.55142">Programming language specification</keyword><keyword weight="0.49884">Source code</keyword><keyword weight="0.44704">Computer science</keyword><keyword weight="0.61077">Formal specification</keyword><keyword weight="0.53037">Reference implementation</keyword><keyword weight="0.56993">Language Of Temporal Ordering Specification</keyword><keyword weight="0.54009">Application programming interface</keyword><keyword weight="0.58168">Formal methods</keyword></keywords><publisher>Kluwer Academic Publishers</publisher><abstract>This paper reports on an effort to increase the reliability of JavaCard-based smart cards by means of formal specification and verification of JavaCard source code. As a first step, lightweight formal interface specifications, written in the specification language JML, have been developed for all the classes in the JavaCard API (version 2.1). They make many of the implicit assumptions underlying the current implementation explicit, and thus facilitate the use of this API and increase the reliability of the code that is based on it. Furthermore, the formal specifications are amenable to tool support, for verification purposes.</abstract></paper>
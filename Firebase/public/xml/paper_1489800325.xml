<paper id="1489800325"><title>Specifying Distributed Software Architectures</title><year>1995</year><authors><author org="imperial College" id="2097290386">Jeff Magee</author><author org="imperial College" id="874690412">Naranker Dulay</author><author org="imperial College" id="1998858448">Susan Eisenbach</author><author org="imperial College" id="2095806276">Jeff Kramer</author></authors><n_citation>727</n_citation><doc_type>Conference</doc_type><references><reference>1503973138</reference><reference>2013672985</reference><reference>2050185963</reference><reference>2052402632</reference><reference>2059496390</reference><reference>2093236316</reference><reference>2096870603</reference><reference>2108896670</reference><reference>2110425399</reference><reference>2111164171</reference><reference>2116307413</reference><reference>2122484330</reference><reference>2125294767</reference><reference>2126793385</reference><reference>2128932399</reference><reference>2176887522</reference><reference>2491671410</reference></references><venue id="2626725751" type="C">European Software Engineering Conference</venue><doi>10.1007/3-540-60406-5_12</doi><keywords><keyword weight="0.68511">Darwin (ADL)</keyword><keyword weight="0.5393">Software architecture description</keyword><keyword weight="0.45613">Computer science</keyword><keyword weight="0.54389">Distributed design patterns</keyword><keyword weight="0.5242">Software system</keyword><keyword weight="0.54169">Component-based software engineering</keyword><keyword weight="0.53755">Software architecture</keyword><keyword weight="0.51942">Software construction</keyword><keyword weight="0.51832">Software development</keyword><keyword weight="0.45642">Distributed computing</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>There is a real need for clear and sound design specifications of distributed systems at the architectural level. This is the level of the design which deals with the high-level organisation of computational elements and the interactions between those elements. The paper presents the Darwin notation for specifying this high-level organisation. Darwin is in essence a declarative binding language which can be used to define hierarchic compositions of interconnected components. Distribution is dealt with orthogonally to system structuring. The language supports the specification of both static structures and dynamic structures which may evolve during execution. The central abstractions managed by Darwin are components and services. Services are the means by which components interact.</abstract></paper>
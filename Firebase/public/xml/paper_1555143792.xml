<paper id="1555143792"><title>Executable semantics for compensating CSP</title><year>2005</year><authors><author org="School of Electronics and Computer Science, University of Southampton,,UK" id="2114313152">Michael Butler</author><author org="School of Electronics and Computer Science, University of Southampton,,UK" id="2134189443">Shamim Ripon</author></authors><n_citation>40</n_citation><doc_type>Conference</doc_type><references><reference>8870360</reference><reference>1239375374</reference><reference>1544621933</reference><reference>1579083398</reference><reference>1580055894</reference><reference>1587877137</reference><reference>1608333380</reference><reference>1974168649</reference><reference>2110425399</reference><reference>2118229393</reference><reference>2128932399</reference><reference>2132524091</reference><reference>2149416537</reference><reference>2167399349</reference><reference>2460103410</reference></references><venue id="1190735678" type="C">Web Services and Formal Methods</venue><doi>10.1007/11549970_18</doi><keywords><keyword weight="0.47673">Constraint satisfaction</keyword><keyword weight="0.60271">Operational semantics</keyword><keyword weight="0.49623">Model checking</keyword><keyword weight="0.4386">Computer science</keyword><keyword weight="0.44024">Theoretical computer science</keyword><keyword weight="0.48956">Prolog</keyword><keyword weight="0.49123">Formal methods</keyword><keyword weight="0.54634">Process calculus</keyword><keyword weight="0.48297">Semantics</keyword><keyword weight="0.514">Executable</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Compensation is an error recovery mechanism for long-running transactions. Compensating CSP is a variant of the CSP process algebra with constructs for orchestration of compensations. We present a simple operational semantics for Compensating CSP and outline an encoding of this semantics in Prolog. This provides a basis for implementation and model checking of the language.</abstract></paper>
<paper id="1592055490"><title>LSCs: Breathing Life into Message Sequence Charts</title><year>1998</year><authors><author org="OFFIS, Oldenburg, GERMANY" id="2950800745">Werner Damm</author><author org="The Weizmann Institute of Science Rehovot, Israel" id="427806604">David Harel</author></authors><n_citation>93</n_citation><doc_type>Conference</doc_type><references><reference>201628453</reference><reference>1513147665</reference><reference>1515542122</reference><reference>1535589004</reference><reference>1579440316</reference><reference>1595158423</reference><reference>1993921835</reference><reference>2024136845</reference><reference>2078440374</reference><reference>2096039823</reference><reference>2099529102</reference><reference>2103061456</reference><reference>2108571087</reference><reference>2112902853</reference><reference>2121163444</reference><reference>2139907081</reference><reference>2150119568</reference><reference>2462980980</reference></references><venue id="1129611459" type="C">Formal Methods for Open Object-Based Distributed Systems</venue><doi>10.1007/978-0-387-35562-7_23</doi><keywords><keyword weight="0.45484">Synchronization</keyword><keyword weight="0.44853">Programming language</keyword><keyword weight="0.46206">Unified Modeling Language</keyword><keyword weight="0.45093">Computer science</keyword><keyword weight="0.4486">Theoretical computer science</keyword><keyword weight="0.53252">Formal specification</keyword><keyword weight="0.0">Live sequence charts</keyword><keyword weight="0.48851">Chart</keyword><keyword weight="0.55925">Message sequence chart</keyword><keyword weight="0.42277">Partially ordered set</keyword><keyword weight="0.0">Branching (version control)</keyword></keywords><publisher>Springer, Boston, MA</publisher><abstract>While message sequence charts (MSCs) are widely used in industry to document the interworking of processes or objects, they are expressively quite weak, being based on the modest semantic notion of a partial ordering of events as defined, e.g., in the CCITT standard. A highly expressive and rigorously defined MSC language is a must for serious, semantically meaningful tool support for use-cases and scenarios. It is also a prerequisite to addressing what we regard as one of the central problems in behavioral specification of systems: relating scenario-based inter-object specification to state-machine intra-object specification. This paper proposes an extension of MSCs, which we call live sequence charts (or LSCs), since one of our main extensions deals with specifying ``liveness", i.e., things that must occur. In fact, LSCs allow the distinction between possible and necessary behavior both globally, on the level of an entire chart and locally, when specifying events, conditions and progress over time within a chart. We also deal with subcharts, synchronization, branching and iteration.</abstract></paper>
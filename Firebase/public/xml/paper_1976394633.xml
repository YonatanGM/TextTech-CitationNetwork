<paper id="1976394633"><title>A certifying compiler for Java</title><year>2000</year><authors><author org="Cedilla Systems Incorporated, 4616 Henry Street, Pittsburgh, Pennsylvania" id="2305908207">Christopher Colby</author><author org="Cedilla Systems Incorporated, 4616 Henry Street, Pittsburgh, Pennsylvania" id="2139030624">Peter Lee</author><author org="Cedilla Systems Incorporated, 4616 Henry Street, Pittsburgh, Pennsylvania" id="281330718">George C. Necula</author><author org="Cedilla Systems Incorporated, 4616 Henry Street, Pittsburgh, Pennsylvania" id="2227019732">Fred Blau</author><author org="Cedilla Systems Incorporated, 4616 Henry Street, Pittsburgh, Pennsylvania" id="2603155396">Mark Plesko</author><author org="Cedilla Systems Incorporated, 4616 Henry Street, Pittsburgh, Pennsylvania" id="2549321866">Kenneth Cline</author></authors><n_citation>175</n_citation><doc_type>Conference</doc_type><references><reference>1482715091</reference><reference>1588567874</reference><reference>1689872437</reference><reference>1974190112</reference><reference>1980280740</reference><reference>2051632385</reference><reference>2069107692</reference><reference>2150769115</reference><reference>2151480972</reference><reference>2153297607</reference><reference>2171691057</reference></references><venue id="1127352206" type="C">Programming Language Design and Implementation</venue><doi>10.1145/349299.349315</doi><keywords><keyword weight="0.63292">Dead code elimination</keyword><keyword weight="0.65603">Inline expansion</keyword><keyword weight="0.6542">Interprocedural optimization</keyword><keyword weight="0.63157">Dynamic compilation</keyword><keyword weight="0.47526">Programming language</keyword><keyword weight="0.6832">Functional compiler</keyword><keyword weight="0.46043">Computer science</keyword><keyword weight="0.6991">Compiler correctness</keyword><keyword weight="0.447">Theoretical computer science</keyword><keyword weight="0.68351">Compiler</keyword><keyword weight="0.70591">Compiler construction</keyword></keywords><publisher>ACM</publisher><abstract>This paper presents the initial results of a project to determine ifthe techniques of proof-carrying code and certifying compilers can be applied to programming languages of realistic size and complexity. The experiment shows that: (1) it is possible to implement a certifying native-code compiler for a large subset of the Java programming language; (2) the compiler is freely able to apply many standard local and global optimizations; and (3) the PCC binaries it produces are of reasonable size and can be rapidly checked for type safety by a small proof-checker. This paper also presents further evidence that PCC provides several advantages for compiler development. In particular, generating proofs of the target code helps to identify compiler bugs, many of which would have been difficult to discover by testing.</abstract></paper>
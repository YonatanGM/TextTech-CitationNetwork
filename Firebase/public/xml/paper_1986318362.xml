<paper id="1986318362"><title>Preference logic grammars: fixed point semantics and application to data standardization</title><year>2002</year><authors><author org="IBM Silicon Valley Lab., San Jose, CA" id="2218137247">Baoqiu Cui</author><author org="SUNY at Stony Brook, Stony Brook, NY" id="2291248690">Terrance Swift</author></authors><n_citation>27</n_citation><doc_type>Journal</doc_type><references><reference>47323645</reference><reference>194816663</reference><reference>1482502297</reference><reference>1520935955</reference><reference>1573627427</reference><reference>1750970660</reference><reference>1847820984</reference><reference>1968513265</reference><reference>1984715534</reference><reference>2021567838</reference><reference>2031868932</reference><reference>2124627636</reference><reference>2152096446</reference><reference>2161021345</reference></references><venue id="196139623" type="J">Artificial Intelligence</venue><doi>10.1016/S0004-3702(02)00185-6</doi><keywords><keyword weight="0.6219">Default logic</keyword><keyword weight="0.46623">Programming language</keyword><keyword weight="0.45355">Computer science</keyword><keyword weight="0.61526">Multimodal logic</keyword><keyword weight="0.59174">Prolog</keyword><keyword weight="0.59118">Non-monotonic logic</keyword><keyword weight="0.59579">Stable model semantics</keyword><keyword weight="0.61146">Logic programming</keyword><keyword weight="0.61039">Higher-order logic</keyword><keyword weight="0.62845">Well-founded semantics</keyword></keywords><publisher>Elsevier</publisher><abstract>The addition of preferences to normal logic programs is a convenient way to represent many aspects of default reasoning. If the derivation of an atom A1 is preferred to that of an atom A2, a preference rule can be defined so that A2 is derived only if A1 is not. Although such situations can be modelled directly using default negation, it is often easier to define preference rules than it is to add negation to the bodies of rules. As first noted by Govindarajan et al. [Proc. Internat. Conf. on Logic Programming, 1995, pp. 731-746], for certain grammars, it may be easier to disambiguate parses using preferences than by enforcing disambiguation in the grammar rules themselves. In this paper we define a general fixed-point semantics for preference logic programs based on an embedding into the well-founded semantics, and discuss its features and relation to previous preference logic semantics. We then study how preference logic grammars are used in data standardization, the commercially important process of extracting useful information from poorly structured textual data. This process includes correcting misspellings and truncations that occur in data, extraction of relevant information via parsing, and correcting inconsistencies in the extracted information. The declarativity of Prolog offers natural advantages for data standardization, and a commercial standardizer has been implemented using Prolog. However, we show that the use of preference logic grammars allow construction of a much more powerful and declarative commercial standardizer, and discuss in detail how the use of the non-monotonic construct of preferences leads to improved commercial software.</abstract></paper>
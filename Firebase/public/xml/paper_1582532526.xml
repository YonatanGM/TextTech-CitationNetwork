<paper id="1582532526"><title>Arity Raiser and its Use in Program Specialization</title><year>1990</year><authors><author org="Academy of Sciences of the USSR" id="2435876473">Sergei A. Romanenko</author></authors><n_citation>39</n_citation><doc_type>Conference</doc_type><references><reference>1566017743</reference><reference>1566968514</reference><reference>1574621558</reference><reference>1996081324</reference><reference>1997179278</reference><reference>2009674917</reference><reference>2020024606</reference><reference>2020530016</reference><reference>2023299380</reference><reference>2057731509</reference><reference>2208923056</reference></references><venue id="1136861413" type="C">European Symposium on Programming</venue><doi>10.1007/3-540-52592-0_73</doi><keywords><keyword weight="0.42309">Residual</keyword><keyword weight="0.59197">Arity</keyword><keyword weight="0.47164">Programming language</keyword><keyword weight="0.55656">Functional programming</keyword><keyword weight="0.55626">Partial evaluation</keyword><keyword weight="0.44746">Computer science</keyword><keyword weight="0.58531">Lisp</keyword><keyword weight="0.53574">Compiler</keyword><keyword weight="0.44931">Theoretical computer science</keyword><keyword weight="0.51845">Interpreter</keyword><keyword weight="0.4414">If and only if</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Experiments on generating compilers by specializing specializers with respect to interpreters have shown that the compilers thus obtained have a natural structure only if the specializer does variable splitting. Variable splitting can result in a residual program using several variables to represent the values of a single variable of the original program. In the case of functional programming variable splitting is done by raising the arities of functions. The paper describes the structure and principles of operation of an arity raiser dealing with programs in a subset of pure Lisp.</abstract></paper>
<paper id="1982877307"><title>Declarative workflows that support easy modification and dynamic browsing</title><year>1999</year><authors><author org="Bell Laboratories, Lucent Technologies, 600 Mountain Ave., Murray Hill, NJ" id="2157269769">Richard Hull</author><author org="Bell Laboratories, Lucent Technologies, 600 Mountain Ave., Murray Hill, NJ" id="2307922770">Francois Llirbat</author><author org="INRIA Roquencourt, Domaine de Voluceau, 78153 Le Chesnay, France" id="2231828748">Eric Siman</author><author org="Department of Computer Science, University of California Santa Barbara CA" id="2104064298">Jianwen Su</author><author org="Department of Computer Science &amp; Engineering, Wright State University, Dayton, Ohio,#TAB#" id="2164298414">Guozhu Dong</author><author org="Bell Laboratories, Lucent Technologies, 600 Mountain Ave., Murray Hill, NJ" id="2095907774">Bharat Kumar</author><author org="Bell Laboratories, Lucent Technologies, 600 Mountain Ave., Murray Hill, NJ" id="2303840565">Gang Zhou</author></authors><n_citation>66</n_citation><doc_type>Journal</doc_type><references><reference>195438148</reference><reference>1505900289</reference><reference>1520355364</reference><reference>1555095622</reference><reference>1555797260</reference><reference>1558832481</reference><reference>1576853379</reference><reference>1589389108</reference><reference>1966840450</reference><reference>1991418154</reference><reference>2007888575</reference><reference>2015234709</reference><reference>2064650227</reference><reference>2065961934</reference><reference>2072445657</reference><reference>2115447817</reference><reference>2117495487</reference><reference>2129338772</reference><reference>2162602286</reference></references><venue id="186921487" type="J">ACM Sigsoft Software Engineering Notes</venue><doi>10.1145/295666.295674</doi><keywords><keyword weight="0.47471">Programming language</keyword><keyword weight="0.47395">Software engineering</keyword><keyword weight="0.54632">Programming paradigm</keyword><keyword weight="0.47085">Computer science</keyword><keyword weight="0.41367">Vortex</keyword><keyword weight="0.52976">Execution model</keyword><keyword weight="0.48671">Workflow</keyword><keyword weight="0.49458">Modularity</keyword><keyword weight="0.4974">Semantics</keyword></keywords><publisher>ACM</publisher><abstract>A new programming paradigm named "Vortex" is introduced for specifying a wide range of decision-making activities including, in particular, workflows. In Vortex workflows are specified declaratively. A particular emphasis is on "object-focused" workflows, i.e., workflows focused on how individual input objects should be processed within an organization. Such workflows arise commonly in practice, including insurance claims processing, and many electronic commerce applications, and in the area of Customer Care, e.g., web-based storefronts. Vortex workflows are "attribute-centric", because they are centered around how the attribute values for an input object are gathered and computed. Initially, only a few attributes of an input object have assigned values. During processing of the object, additional attribute values may be assigned by external modules, or by internal modules, including "decision modules". Decision modules include "attribute rules" that specify contributions to specific attribute values; these are combined with one of a broad family of available semantics. In Vortex, enabling conditions are used to determine what attributes should be evaluated. A novel choice-based execution model provides a general framework for optimization strategies. The use of enabling conditions, attribute rules and declarative semantics makes Vortex workflows easier to modify and refine than traditional, procedurally specified workflows. Vortex supports modularity and permits the natural intermixing of Vortex workflows with traditional, procedural workflows. The paper introduces a novel spreadsheet-like interface for dynamic browsing of Vortex executions.</abstract></paper>
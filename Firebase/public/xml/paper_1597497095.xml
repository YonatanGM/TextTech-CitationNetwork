<paper id="1597497095"><title>Unboxed values as first class citizens in a non-strict functional language</title><year>1991</year><authors><author org="#N#University of Glasgow#N#" id="2142246817">Simon L. Peyton Jones</author><author org="#N#University of Glasgow#N#" id="343041661">John Launchbury</author></authors><n_citation>163</n_citation><doc_type>Conference</doc_type><references><reference>1518881611</reference><reference>1543641760</reference><reference>1968066174</reference><reference>1978718408</reference><reference>1979240050</reference><reference>2024873396</reference><reference>2058821858</reference><reference>2073771426</reference><reference>2156876717</reference><reference>2163976959</reference><reference>2208923056</reference></references><venue id="1162793720" type="C">International Conference on Functional Programming</venue><doi>10.1007/3540543961_30</doi><keywords><keyword weight="0.48236">Functional logic programming</keyword><keyword weight="0.51985">Functional compiler</keyword><keyword weight="0.45401">Programming language</keyword><keyword weight="0.48431">Program transformation</keyword><keyword weight="0.4823">Programming paradigm</keyword><keyword weight="0.4385">Computer science</keyword><keyword weight="0.51372">Code generation</keyword><keyword weight="0.52398">Compiler</keyword><keyword weight="0.50512">Low-level programming language</keyword><keyword weight="0.50647">Goto</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>The code compiled from a non-strict functional program usually manipulates heap-allocated boxed numbers. Compilers for such languages often go to considerable trouble to optimise operations on boxed numbers into simpler operations on their unboxed forms. These optimisations are usually handled in an ad hoc manner in the code generator, because earlier phases of the compiler have no way to talk about unboxed values.</abstract></paper>
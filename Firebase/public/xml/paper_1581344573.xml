<paper id="1581344573"><title>Predicting Application Run Times Using Historical Information</title><year>1998</year><authors><author org="Argonne National Laboratory," id="2475449320">Warren Smith</author><author org="Argonne National Laboratory,#TAB#" id="2017222965">Ian T. Foster</author><author org="Northwestern University" id="2105362179">Valerie E. Taylor</author></authors><n_citation>286</n_citation><doc_type>Conference</doc_type><references><reference>1492040731</reference><reference>1603445711</reference><reference>1639032689</reference><reference>2108905989</reference><reference>2111996486</reference><reference>2127081717</reference><reference>2147953263</reference></references><venue id="1122827389" type="C">Job Scheduling Strategies for Parallel Processing</venue><doi>10.1007/BFb0053984</doi><keywords><keyword weight="0.56798">Supercomputer</keyword><keyword weight="0.46184">Computer science</keyword><keyword weight="0.47229">Parallel computing</keyword><keyword weight="0.0">Parallel processing</keyword><keyword weight="0.45627">Algorithm</keyword><keyword weight="0.46265">Real-time computing</keyword><keyword weight="0.52433">Greedy algorithm</keyword><keyword weight="0.0">Genetic search</keyword><keyword weight="0.0">Processor scheduling</keyword><keyword weight="0.51307">Genetic algorithm</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>We present a technique for deriving predictions for the run times of parallel applications from the run times of “similar” applications that have executed in the past. The novel aspect of our work is the use of search techniques to determine those application characteristics that yield the best definition of similarity for the purpose of making predictions. We use four workloads recorded from parallel computers at Argonne National Laboratory, the Cornell Theory Center, and the San Diego Supercomputer Center to evaluate the effectiveness of our approach. We show that on these workloads our techniques achieve predictions that are between 14 and 60 percent better than those achieved by other researchers; our approach achieves mean prediction errors that are between 40 and 59 percent of mean application run times.</abstract></paper>
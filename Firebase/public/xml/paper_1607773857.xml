<paper id="1607773857"><title>Efficient Parallel Pseudo-Random Number Generation</title><year>1985</year><authors><author org="Harvard University" id="2051256779">John H. Reif</author><author org="Harvard University" id="2237110490">J. D. Tygar</author></authors><n_citation>15</n_citation><doc_type>Conference</doc_type><references><reference>1952573265</reference><reference>1975146994</reference><reference>2026143151</reference><reference>2047892357</reference><reference>2054924988</reference><reference>2063301742</reference><reference>2069919161</reference><reference>2081256023</reference><reference>2083368929</reference><reference>2087115651</reference><reference>2107324709</reference><reference>2117362057</reference><reference>2126466445</reference><reference>2130130502</reference><reference>2162198369</reference></references><venue id="1153524033" type="C">International Cryptology Conference</venue><doi>10.1007/3-540-39799-X_33</doi><keywords><keyword weight="0.43558">Log-log plot</keyword><keyword weight="0.46253">Discrete mathematics</keyword><keyword weight="0.51021">Binary logarithm</keyword><keyword weight="0.46054">Combinatorics</keyword><keyword weight="0.54482">Multiplicative inverse</keyword><keyword weight="0.4817">Polynomial</keyword><keyword weight="0.52284">Parallel algorithm</keyword><keyword weight="0.41513">Theoretical computer science</keyword><keyword weight="0.49498">Almost surely</keyword><keyword weight="0.51522">Random number generation</keyword><keyword weight="0.41006">Mathematics</keyword><keyword weight="0.55781">Pseudorandom number generator</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>We present a parallel algorithm for pseudo-random number generation. Given a seed of n? truly random bits for any ? u003e 0, our algorithm generates n? pseuderandom bits for any c u003e 1. This takes poly-log time using n?? processors where ?? = k? for some fixed small constant k u003e 1. We show that the pseuds-random bits output by our algorithm can not be distinguished from truly random bits in parallel poly-log time using a polynomial number of processors with probability 1/2 + 1/nO(1) if the multiplicative inverse problem almost always can not be solved in RNC. The proof is interesting and is quite different from previous proofs for sequential pseudo-random number generators.Our generator is fast and its output is provably as effective for RNC algorithms as truly random bits. Our generator passes all the statistical tests in KNUTH[14].Moreover, the existence of our generator has a number of central consequences for complexity theory. Given a randomized parallel algorithm A (over a wide class of machine models such as parallel RAMS and fixed connection networks) with time bound T(n) and processor bound P(n), we show A can be simulated by a parallel algorithm with time bound T(n) + O((log n)(log log n)), processor bound P(n)n??, and only using n? truly random bits for any ? u003e 0.Also, we show that if the multiplicative inverse problem is almost always not in RNC, then RNC is within the class of languages accepted by uniform poly-log depth circuits with unbounded fan-in and strictly sub-exponential size ?? u003e 0 2n?.</abstract></paper>
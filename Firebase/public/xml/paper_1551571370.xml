<paper id="1551571370"><title>Cleanness Checking of String Manipulations in C Programs via Integer Analysis</title><year>2001</year><authors><author org="Tel‐Aviv University ," id="2303071586">Nurit Dor</author><author org="IBM Research Laboratory#TAB#" id="8183976">Michael Rodeh</author><author org="Tel‐Aviv University ," id="2132786051">Shmuel Sagiv</author></authors><n_citation>82</n_citation><doc_type>Conference</doc_type><references><reference>1502028089</reference><reference>1579850852</reference><reference>1685737956</reference><reference>1973326708</reference><reference>2032230066</reference><reference>2043100293</reference><reference>2054827240</reference><reference>2091141964</reference><reference>2120138937</reference><reference>2132661148</reference><reference>2611598995</reference></references><venue id="1137552346" type="C">Static Analysis Symposium</venue><doi>10.1007/3-540-47764-0_12</doi><keywords><keyword weight="0.54647">Pointer (computer programming)</keyword><keyword weight="0.50373">False alarm</keyword><keyword weight="0.44335">Computer science</keyword><keyword weight="0.49823">Software bug</keyword><keyword weight="0.4655">Static analysis</keyword><keyword weight="0.46055">Unix</keyword><keyword weight="0.43403">Real-time computing</keyword><keyword weight="0.44189">Theoretical computer science</keyword><keyword weight="0.57264">String (computer science)</keyword><keyword weight="0.43557">Distributed computing</keyword><keyword weight="0.44522">Algorithm</keyword><keyword weight="0.50396">Program analysis</keyword><keyword weight="0.53856">Buffer overflow</keyword></keywords><publisher>Springer Berlin Heidelberg</publisher><abstract>All practical C programs use structures, arrays, and/or strings. At runtime, such objects are mapped into consecutive memory locations, hereafter referred to as buffers. Many software defects are caused by buffer overflow -- unintentional access to memory outside the intended object. Stringma nipulation is a major source of such defects. Accordingto the FUZZ study, they are the cause of most UNIX failures. We present a new algorithm for statically detecting buffer overflow defects caused by string manipulations in C programs. In many programs, our algorithm is capable of precisely handling destructive memory updates, even in the presence of overlapping pointer variables which reference the same buffer at different offsets. Thus, our algorithm can uncover defects which go undetected by previous works. We reduce the problem of checkings tring manipulation to that of analyzing integer variables. A prototype of the algorithm has been implemented and applied to statically uncover defects in real C applications, i.e., errors which occur on some inputs to the program. The applications were selected without a priori knowledge of the number of string manipulation errors. A significant number of string manipulation errors were found in every application, further indicating the extensiveness of such errors. We are encouraged by the fact that our algorithm reports very few false alarms, i.e., warnings on errors that never occur at runtime.</abstract></paper>
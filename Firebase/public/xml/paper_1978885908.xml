<paper id="1978885908"><title>Peep: an architectural description driven peephole optimizer</title><year>1984</year><authors><author org="University of Utah, Salt Lake City, Utah" id="2087817292">Robert R. Kessler</author></authors><n_citation>23</n_citation><doc_type>Conference</doc_type><references><reference>2025554746</reference><reference>2051769410</reference><reference>2065496085</reference><reference>2069659819</reference><reference>2075523020</reference><reference>2092576944</reference><reference>2100087302</reference><reference>2118387410</reference><reference>2340812064</reference></references><venue id="1162239172" type="C">Compiler Construction</venue><doi>10.1145/502874.502884</doi><keywords><keyword weight="0.0">Portable standard lisp</keyword><keyword weight="0.47573">Programming language</keyword><keyword weight="0.57742">Peephole</keyword><keyword weight="0.45503">Computer science</keyword><keyword weight="0.62014">Lisp</keyword><keyword weight="0.44612">Theoretical computer science</keyword><keyword weight="0.6063">Compiler</keyword><keyword weight="0.56353">Machine code</keyword><keyword weight="0.0">Storage management</keyword><keyword weight="0.76534">Peephole optimization</keyword></keywords><publisher>ACM</publisher><abstract>Peep is an architectural description driven peephole optimizer, that is being adapted for use in the Portable Standard Lisp compiler. Tables of optimizable instructions are generated prior to the creation of the compiler from the architectural description of the target machine. Peep then performs global flow analysis on the target machine code and optimizes instructions as defined in the table. This global flow analysis allows optimization across basic blocks of instructions, and the use of tables created at compiler-generation time minimizes the overhead of discovering optimizable instructions.</abstract></paper>
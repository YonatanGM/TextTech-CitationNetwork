<paper id="1512698516"><title>Nested Queries in Object Bases</title><year>1993</year><authors><author org="domaine de Voluceau, INRIA, Le Chesnay Cédex, France" id="2062670818">Sophie Cluet</author><author org="Universität karlsruhe" id="172573358">Guido Moerkotte</author></authors><n_citation>107</n_citation><doc_type>Conference</doc_type><references><reference>1481805023</reference><reference>1524459778</reference><reference>1550420318</reference><reference>1555504763</reference><reference>1568082637</reference><reference>1661321285</reference><reference>1825341804</reference><reference>1965392376</reference><reference>1965909768</reference><reference>1985464228</reference><reference>1994933468</reference><reference>2008116177</reference><reference>2039384225</reference><reference>2068377062</reference><reference>2087290458</reference><reference>2127872176</reference><reference>2136623420</reference><reference>2153524094</reference><reference>2165674271</reference><reference>2205031991</reference></references><venue id="1192201180" type="C">Database Programming Languages</venue><doi>10.1007/978-1-4471-3564-7_13</doi><keywords><keyword weight="0.54796">Query optimization</keyword><keyword weight="0.60487">Query language</keyword><keyword weight="0.45113">Programming language</keyword><keyword weight="0.44317">Computer science</keyword><keyword weight="0.52347">Path expression</keyword><keyword weight="0.53651">Object Query Language</keyword><keyword weight="0.48465">Object Definition Language</keyword><keyword weight="0.50701">Object Constraint Language</keyword><keyword weight="0.48599">Algebraic expression</keyword><keyword weight="0.42805">Database</keyword><keyword weight="0.65811">Nested loop join</keyword></keywords><publisher>Springer, London</publisher><abstract>Many declarative query languages for object-oriented databases allow nested subqueries. This paper contains the first (to our knowledge) proposal to optimize them. A two-phase approach is used to optimize nested queries in the object-oriented context. The first phase—called dependency-based optimization—transforms queries at the query language level in order to treat common subexpressions and independent subqueries more efficiently. The transformed queries are translated to nested algebraic expressions. These entail nested loop evaluation which may be very inefficient. Hence, the second phase unnests nested algebraic expres­sions to allow for more efficient evaluation.</abstract></paper>
<paper id="1710250545"><title>Connection Analysis: A Practical Interprocedural Heap Analysis for C</title><year>1996</year><authors><author org="School of Computer Science, McGill University, Montréal, Canada H3A 2A7#TAB#" id="2059182353">Rakesh Ghiya</author><author org="School of Computer Science, McGill University, Montréal, Canada H3A 2A7#TAB#" id="2057929015">Laurie J. Hendren</author></authors><n_citation>64</n_citation><doc_type>Conference</doc_type><references><reference>1493844047</reference><reference>1577294234</reference><reference>1966285605</reference><reference>1970061809</reference><reference>1975914482</reference><reference>1980468060</reference><reference>2002771912</reference><reference>2004419599</reference><reference>2019709986</reference><reference>2046405656</reference><reference>2047896115</reference><reference>2072858236</reference><reference>2077102566</reference><reference>2087612811</reference><reference>2097145414</reference><reference>2102440514</reference><reference>2111695742</reference><reference>2135697103</reference><reference>2139356751</reference><reference>2145021036</reference><reference>2151360539</reference><reference>2161065509</reference><reference>2919464784</reference></references><venue id="1198129048" type="C">Languages and Compilers for Parallel Computing</venue><doi>10.1007/BF03356759</doi><keywords><keyword weight="0.51721">Pointer (computer programming)</keyword><keyword weight="0.627">Pointer analysis</keyword><keyword weight="0.45593">Programming language</keyword><keyword weight="0.48328">Disjoint sets</keyword><keyword weight="0.45116">Computer science</keyword><keyword weight="0.46134">Parallel computing</keyword><keyword weight="0.66649">Heap (data structure)</keyword><keyword weight="0.50924">Compiler</keyword><keyword weight="0.63442">Binary heap</keyword><keyword weight="0.52688">Program analysis</keyword><keyword weight="0.66989">Binomial heap</keyword></keywords><publisher>Springer US</publisher><abstract>This paper presents a practical heap analysis technique, connection analysis, that can be used to disambiguate heap accesses in C programs. The technique is designed for analyzing programs that allocate many disjoint objects in the heap such as dynamically-allocated arrays in scientific programs. The method statically estimates connection matrices which encode the connection relationships between all heap-directed pointers at each program point. The results of the analysis can be used by parallelizing compilers to determine when two heap-allocated objects are guaranteed to be disjoint, and thus can be used to improve array dependence and interference analysis. The method has been implemented as a context-sensitive interprocedural analysis in the McCAT optimizing/parallelizing C compiler. Experimental results are given to compare the accuracy of connection analysis versus a conservative estimate based on points-to analysis.</abstract></paper>
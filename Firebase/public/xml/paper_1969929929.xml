<paper id="1969929929"><title>A Technique for Verifying Component-Based Software</title><year>2005</year><authors><author org="DISCO, Università degli Studi di Milano Bicocca, via Bicocca degli Arcimboldi, 8, 20126 Milano, Italy#TAB#" id="2953981468">Leonardo Mariani</author><author org="DISCO, Università degli Studi di Milano Bicocca, via Bicocca degli Arcimboldi, 8, 20126 Milano, Italy#TAB#" id="1399203037">Mauro Pezzè</author></authors><n_citation>34</n_citation><doc_type>Journal</doc_type><references><reference>144724653</reference><reference>1559171143</reference><reference>1740522204</reference><reference>1965171928</reference><reference>1986347924</reference><reference>1993454158</reference><reference>2020538887</reference><reference>2096537660</reference><reference>2100689925</reference><reference>2103318645</reference><reference>2104420598</reference><reference>2107995193</reference><reference>2116409384</reference><reference>2117827650</reference><reference>2120926795</reference><reference>2121376435</reference><reference>2146908974</reference><reference>2155891645</reference><reference>2166197284</reference></references><venue id="50368787" type="J">Electronic Notes in Theoretical Computer Science</venue><doi>10.1016/j.entcs.2004.02.089</doi><keywords><keyword weight="0.63846">System integration testing</keyword><keyword weight="0.46147">Programming language</keyword><keyword weight="0.46834">Software engineering</keyword><keyword weight="0.46911">Computer science</keyword><keyword weight="0.45771">Theoretical computer science</keyword><keyword weight="0.64469">Software system</keyword><keyword weight="0.65048">Software reliability testing</keyword><keyword weight="0.62409">Backporting</keyword><keyword weight="0.63191">Component-based software engineering</keyword><keyword weight="0.61896">Software verification and validation</keyword><keyword weight="0.67657">Software construction</keyword><keyword weight="0.61946">Software development</keyword></keywords><publisher>Elsevier</publisher><abstract>Component-based software systems raise new problems for the testing community: the reuse of components suggests the possibility of reducing testing costs by reusing information about the quality of the software components. This paper addresses the problem of testing evolving software systems, i.e., systems obtained by modifying and/or substituting some of their components. The paper proposes a technique to automatically identify behavioral differences between different versions of the system, to deduce possible problems from inconsistent behaviors. The approach is based on the automatic distilling of invariants from in-field executions. The computed invariants are used to monitor the behavior of new components, and to reveal unexpected interactions. The event generated while monitoring system executions are presented to software engineers who can infer possible problems of the new versions.</abstract></paper>
<paper id="1608806855"><title>Exploiting Parallelism in Tabled Evaluations</title><year>1995</year><authors><author org="State University of New York at Stony Brook" id="2116519607">Juliana Freire</author><author org="State University of New York at Stony Brook" id="2403075171">Rui Hu</author><author org="State University of New York at Stony Brook" id="2291248690">Terrance Swift</author><author org="State University of New York at Stony Brook" id="2163362677">David Scott Warren</author></authors><n_citation>17</n_citation><doc_type>Conference</doc_type><references><reference>57903016</reference><reference>1502359129</reference><reference>1502605899</reference><reference>1522225310</reference><reference>1543331534</reference><reference>1544862482</reference><reference>1968592673</reference><reference>1971941065</reference><reference>1972456337</reference><reference>1975576519</reference><reference>2005774723</reference><reference>2012662948</reference><reference>2019968021</reference><reference>2098780004</reference><reference>2100264125</reference><reference>2132063146</reference></references><venue id="2754504537" type="C">International Symposium on Programming Language Implementation and Logic Programming</venue><doi>10.1007/BFb0026817</doi><keywords><keyword weight="0.67731">Instruction-level parallelism</keyword><keyword weight="0.0">Logic program</keyword><keyword weight="0.43841">Architecture</keyword><keyword weight="0.7436">Task parallelism</keyword><keyword weight="0.45903">Computer science</keyword><keyword weight="0.47732">Parallel computing</keyword><keyword weight="0.76041">Data parallelism</keyword></keywords><publisher>Springer-Verlag</publisher><abstract>This paper addresses general issues involved in parallelizing tabled evaluations by introducing a model of shared-memory parallelism which we call table-parallelism, and by comparing it to traditional models of parallelizing SLD. A basic architecture for supporting table-parallelism in the framework of the SLG-WAM[14] is also presented, along with an algorithm for detecting termination of subcomputations.</abstract></paper>
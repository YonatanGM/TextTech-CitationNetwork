<paper id="1980939032"><title>A Syntactic Approach to Type Soundness</title><year>1994</year><authors><author org="Rice Univ, Dept Comp Sci, Houston, TX 77251, USA#TAB#" id="2159959243">A.K. Wright</author><author org="Rice Univ, Dept Comp Sci, Houston, TX 77251, USA#TAB#" id="113813022">M. Felleisen</author></authors><n_citation>866</n_citation><doc_type>Journal</doc_type><references><reference>1503871268</reference><reference>1509898628</reference><reference>1523016082</reference><reference>1523047387</reference><reference>1534508664</reference><reference>1829244603</reference><reference>1974396457</reference><reference>1984807151</reference><reference>1987203566</reference><reference>1992520783</reference><reference>2007759294</reference><reference>2010525351</reference><reference>2043416466</reference><reference>2054299141</reference><reference>2062145157</reference><reference>2071095465</reference><reference>2083697466</reference><reference>2084792162</reference><reference>2088735483</reference><reference>2093541252</reference><reference>2110135416</reference><reference>2118068787</reference><reference>2151156765</reference><reference>2151716725</reference><reference>2163976959</reference><reference>2166822586</reference></references><venue id="59933527" type="J">Information &amp; Computation</venue><doi>10.1006/inco.1994.1093</doi><keywords><keyword weight="0.4494">Programming language</keyword><keyword weight="0.54134">Functional programming</keyword><keyword weight="0.54198">Standard ML</keyword><keyword weight="0.52596">Combinatory logic</keyword><keyword weight="0.51537">Typed assembly language</keyword><keyword weight="0.59943">Subject reduction</keyword><keyword weight="0.52192">Imperative programming</keyword><keyword weight="0.53645">Proof theory</keyword><keyword weight="0.59097">Soundness</keyword><keyword weight="0.39615">Mathematics</keyword></keywords><publisher>Academic Press, Inc.</publisher><abstract>We present a new approach to proving type soundness for Hindley/Milner-style polymorphic type systems. The keys to our approach are (1) an adaptation of subject reduction theorems from combinatory logic to programming languages, and (2) the use of rewriting techniques for the specification of the language semantics. The approach easily extends from polymorphic functional languages to imperative languages that provide references, exceptions, continuations, and similar features. We illustrate the technique with a type soundness theorem for the core of Standard ML, which includes the first type soundness proof for polymorphic exceptions and continuations.</abstract></paper>
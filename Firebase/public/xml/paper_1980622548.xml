<paper id="1980622548"><title>A graphical query language supporting recursion</title><year>1987</year><authors><author org="University of Toronto Toronto Canada" id="2136308466">Isabel F. Cruz</author><author org="University of Toronto Toronto Canada" id="1969282344">Alberto O. Mendelzon</author><author org="University of Toronto Toronto Canada" id="2301950271">Peter T. Wood</author></authors><n_citation>227</n_citation><doc_type>Conference</doc_type><references><reference>1655990431</reference><reference>1967992696</reference><reference>1970637119</reference><reference>1979514837</reference><reference>1989783863</reference><reference>2027276583</reference><reference>2034951428</reference><reference>2042684233</reference><reference>2045426033</reference><reference>2072843304</reference><reference>2089692469</reference><reference>2175812749</reference><reference>2569646339</reference></references><venue id="1175089206" type="C">International Conference on Management of Data</venue><doi>10.1145/38713.38749</doi><keywords><keyword weight="0.661">Query optimization</keyword><keyword weight="0.62354">Web search query</keyword><keyword weight="0.71275">Query language</keyword><keyword weight="0.68248">RDF query language</keyword><keyword weight="0.46768">Programming language</keyword><keyword weight="0.62463">Query expansion</keyword><keyword weight="0.45893">Computer science</keyword><keyword weight="0.64007">Sargable</keyword><keyword weight="0.64867">Query by Example</keyword><keyword weight="0.62729">Object Query Language</keyword><keyword weight="0.43602">Database</keyword></keywords><publisher>ACM</publisher><abstract>We define a language G for querying data represented as a labeled graph G . By considering G as a relation, this graphical query language can be viewed as a relational query language, and its expressive power can be compared to that of other relational query languages. We do not propose G as an alternative to general purpose relational query languages, but rather as a complementary language in which recursive queries are simple to formulate. The user is aided in this formulation by means of a graphical interface. The provision of regular expressions in G allows recursive queries more general than transitive closure to be posed, although the language is not as powerful as those based on function-free Horn clauses. However, we hope to be able to exploit well-known graph algorithms in evaluating recursive queries efficiently, a topic which has received widespread attention recently.</abstract></paper>
<paper id="1499332970"><title>Enhancing object-based system composition through per-object mixins</title><year>1999</year><authors><author org="Essen Univ., Germany" id="2113115014">G. Neumann</author><author org="" id="2344120076">U. Zdun</author></authors><n_citation>17</n_citation><doc_type>Conference</doc_type><references><reference>1581138707</reference><reference>1606263019</reference><reference>1965695377</reference><reference>1977431221</reference><reference>2045723688</reference><reference>2063580821</reference><reference>2088520036</reference><reference>2110001365</reference><reference>2115680394</reference><reference>2120668987</reference><reference>2131431233</reference><reference>2132055297</reference><reference>2137606889</reference><reference>2161825580</reference></references><venue id="1134663949" type="C">Asia-Pacific Software Engineering Conference</venue><doi>10.1109/APSEC.1999.809645</doi><keywords><keyword weight="0.57453">Object code</keyword><keyword weight="0.46593">Programming language</keyword><keyword weight="0.58004">Object-oriented programming</keyword><keyword weight="0.56508">Method</keyword><keyword weight="0.45721">Computer science</keyword><keyword weight="0.5164">Language construct</keyword><keyword weight="0.5036">Code reuse</keyword><keyword weight="0.4277">Hierarchy</keyword><keyword weight="0.51016">Method chaining</keyword><keyword weight="0.50783">Scripting language</keyword></keywords><publisher>IEEE Computer Society</publisher><abstract>The management of complexity in large systems is traditionally focused on the modeling and management of classes and hierarchies of classes. In order to improve the compositional flexibility in large systems, this paper turns the focus on objects rather than classes. It demonstrates that a more powerful object system can ease the development of large systems and can improve the degree of code reuse. The paper introduces per-object mixins as a new object-level language construct for object-based system composition. Per-object mixins are implemented in the scripting language XOT/sub CL/ as a straightforward extension of its method chaining mechanism and enables the developer to mix classes into the precedence order of an arbitrary object. Per-object mixins can be used to implement state-specific behavior changes in a clean way. We present per-object mixins as a general approach to hide object specifics from client objects transparently.</abstract></paper>
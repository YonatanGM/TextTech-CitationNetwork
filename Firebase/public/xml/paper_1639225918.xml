<paper id="1639225918"><title>Using Architectural Style as a Basis for System Self-repair</title><year>2002</year><authors><author org="Carnegie - Mellon University#TAB#" id="2126408194">Shang-Wen Cheng</author><author org="Carnegie - Mellon University#TAB#" id="2256096860">David Garlan</author><author org="Carnegie - Mellon University#TAB#" id="713569583">Bradley R. Schmerl</author><author org="Carnegie - Mellon University#TAB#" id="2100174805">Jo√£o Pedro Sousa</author><author org="Carnegie - Mellon University#TAB#" id="2285702201">Bridget Spitnagel</author><author org="Carnegie - Mellon University#TAB#" id="2203016445">Peter Steenkiste</author></authors><n_citation>74</n_citation><doc_type>Conference</doc_type><references><reference>1489800325</reference><reference>1507376660</reference><reference>1919395891</reference><reference>2052989301</reference><reference>2053304989</reference><reference>2093635516</reference><reference>2096937604</reference><reference>2131168552</reference><reference>2134716336</reference><reference>2143897980</reference><reference>2156129938</reference><reference>2167429246</reference><reference>2762588455</reference></references><venue id="1130478978" type="C">IEEE/IFIP International Conference on Software Architecture</venue><doi>10.1007/978-0-387-35607-5_3</doi><keywords><keyword weight="0.55872">Representational state transfer</keyword><keyword weight="0.45374">Computer architecture</keyword><keyword weight="0.46157">Systems engineering</keyword><keyword weight="0.46714">Computer science</keyword><keyword weight="0.52437">Software system</keyword><keyword weight="0.50731">Resource-oriented architecture</keyword><keyword weight="0.53037">Software architecture</keyword><keyword weight="0.50723">Component-based software engineering</keyword><keyword weight="0.60743">Architectural pattern</keyword><keyword weight="0.51124">Software development</keyword><keyword weight="0.57332">Architectural style</keyword></keywords><publisher>Kluwer, B.V.</publisher><abstract>An increasingly important requirement for software systems is the capability to adapt at run time in order to accommodate varying resources, system errors, and changing requirements. For such self-repairing systems, one of the hard problems is determining when a change is needed, and knowing what kind of adaptation is required. Recently several researchers have explored the possibility of using architectural models as a basis for run time monitoring, error detection, and repair. Each of these efforts, however, has demonstrated the feasibility of using architectural models in the context of a specific style. In this paper we show how to generalize these solutions by making architectural style a parameter in the monitoring/repair framework and its supporting infrastructure. The value of this generalization is that it allows one to tailor monitoring/repair mechanisms to match both the properties of interest (such as performance or security), and the available operators for run time adaptation.</abstract></paper>
<paper id="1554502957"><title>Comparison of Two Pseudo-Random Number Generators</title><year>1983</year><authors><author org="U.C. Berkeley#TAB#" id="2148799760">Lenore Blum</author><author org="UniversityÂ of California" id="2897821684">Manuel Blum</author><author org="Graduate Center of CUNY" id="2163466163">Michael Shub</author></authors><n_citation>83</n_citation><doc_type>Conference</doc_type><references><reference>76185347</reference><reference>340987026</reference><reference>1523854767</reference><reference>1981455414</reference><reference>2012857639</reference><reference>2043944888</reference><reference>2087115651</reference><reference>2169377825</reference></references><venue id="1153524033" type="C">International Cryptology Conference</venue><doi>10.1007/978-1-4757-0602-4_6</doi><keywords><keyword weight="0.45708">Discrete mathematics</keyword><keyword weight="0.54797">Quadratic residue</keyword><keyword weight="0.61052">Fair coin</keyword><keyword weight="0.6239">Lavarand</keyword><keyword weight="0.54026">Jacobi symbol</keyword><keyword weight="0.40793">Computer science</keyword><keyword weight="0.66598">Lagged Fibonacci generator</keyword><keyword weight="0.53242">Discrete logarithm</keyword><keyword weight="0.62339">Pseudorandom number generator</keyword></keywords><publisher>Springer, Boston, MA</publisher><abstract>What do we want from a pseudo-random sequence generator? Ideally, we would like a pseudo-random sequence generator to quickly produce, from short seeds, long sequences (of bits) that appear in every way to be generated by successive flips of a fair coin.</abstract></paper>
<paper id="1985819576"><title>Making prolog more expressive</title><year>1984</year><authors><author org="" id="2163391027">John W. Lloyd</author><author org="" id="488584163">Rodney W. Topor</author></authors><n_citation>296</n_citation><doc_type>Journal</doc_type><references><reference>130866977</reference><reference>1766332311</reference><reference>2014030742</reference><reference>2105505307</reference></references><venue id="86488779" type="J">Journal of Logic Programming</venue><doi>10.1016/0743-1066(84)90011-6</doi><keywords><keyword weight="0.54057">Query language</keyword><keyword weight="0.47786">Programming language</keyword><keyword weight="0.70112">Deductive database</keyword><keyword weight="0.46131">Computer science</keyword><keyword weight="0.42933">Algorithm</keyword><keyword weight="0.63063">Prolog</keyword><keyword weight="0.51988">Data integrity</keyword><keyword weight="0.5958">Negation as failure</keyword><keyword weight="0.56572">Soundness</keyword><keyword weight="0.64613">Logic programming</keyword><keyword weight="0.0">Deductive database systems</keyword></keywords><publisher>North-Holland</publisher><abstract>Abstract This paper introduces extended programs and extended goals for logic programming. A clause in an extended program can have an arbitrary first-order formula as its body. Similarly, an extended goal can have an arbitrary first-order formula as its body. The main results of the paper are the soundness of the negation as failure rule and SLDNF-resolution for extended programs and goals. We show how the increased expressibility of extended programs and goals can be easily implemented in any PROLOG system which has a sound implementation of the negation as failure rule. We also show how these ideas can be used to implement first-order logic as a query language in a deductive database system. An application to integrity constraints in deductive database systems is also given.</abstract></paper>
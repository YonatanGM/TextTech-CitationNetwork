<paper id="1572150856"><title>Basic Forward Chaining Construction for Logic Programs</title><year>1997</year><authors><author org="Univ Kentucky" id="2027206797">V. Wiktor Marek</author><author org="Cornell University;" id="321207788">Anil Nerode</author><author org="University of california at San Diego" id="2103011650">Jeffrey B. Remmel</author></authors><n_citation>3</n_citation><doc_type>Conference</doc_type><references><reference>1494051470</reference><reference>1504756454</reference><reference>1573502627</reference><reference>1672891595</reference><reference>1968513265</reference><reference>1984715534</reference><reference>2111353076</reference><reference>2136523222</reference><reference>2155322595</reference><reference>2157746363</reference><reference>2171288778</reference><reference>2611415697</reference></references><venue id="1150208541" type="C">Foundations of Computer Science</venue><doi>10.1007/3-540-63045-7_22</doi><keywords><keyword weight="0.58425">Computational logic</keyword><keyword weight="0.64767">Forward chaining</keyword><keyword weight="0.59679">Autoepistemic logic</keyword><keyword weight="0.46327">Programming language</keyword><keyword weight="0.58419">Horn clause</keyword><keyword weight="0.46573">Computer science</keyword><keyword weight="0.58164">Multimodal logic</keyword><keyword weight="0.56917">Zeroth-order logic</keyword><keyword weight="0.46222">Theoretical computer science</keyword><keyword weight="0.59333">Stable model semantics</keyword><keyword weight="0.59182">Logic programming</keyword></keywords><publisher>Springer, Berlin, Heidelberg</publisher><abstract>Abstract : One of the problems which motivated this paper is how do we deal with inconsistent information. For example, suppose that we want to develop an expert system using logic programming with negation as a failure. One problem is that the resulting program may be inconsistent in the sense that the program has no stable model. That is the experts may not be consistent. The question then becomes how can we eliminate some of the clauses so that we can get a consistent program. That is, at a minimum, we would like to select a subprogram of the original program which has a stable model. In this paper, we shall present a basic Forward Chaining type construction which can be applied to any general logic program. All stable models of the original program will be constructed by our Forward Chaining construction for suitable orderings. Moreover, we shall show that for finite propositional logic programs, our construction will run in polynomial time.</abstract></paper>